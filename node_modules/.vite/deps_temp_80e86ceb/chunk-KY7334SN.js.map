{
  "version": 3,
  "sources": ["../../esm-env/true.js", "../../svelte/src/internal/shared/utils.js", "../../svelte/src/internal/client/constants.js", "../../svelte/src/internal/shared/errors.js", "../../svelte/src/internal/client/errors.js", "../../svelte/src/constants.js", "../../svelte/src/internal/client/warnings.js", "../../svelte/src/internal/client/dom/hydration.js", "../../svelte/src/internal/client/reactivity/equality.js", "../../svelte/src/internal/flags/index.js", "../../svelte/src/internal/client/dev/tracing.js", "../../svelte/src/internal/client/context.js", "../../svelte/src/internal/client/error-handling.js", "../../svelte/src/internal/client/dom/task.js", "../../svelte/src/reactivity/create-subscriber.js", "../../svelte/src/internal/client/dom/blocks/boundary.js", "../../svelte/src/internal/client/reactivity/deriveds.js", "../../svelte/src/internal/client/reactivity/batch.js", "../../svelte/src/internal/client/reactivity/sources.js", "../../svelte/src/internal/client/proxy.js", "../../svelte/src/internal/client/dev/equality.js", "../../svelte/src/internal/client/dom/operations.js", "../../svelte/src/internal/client/dom/elements/bindings/shared.js", "../../svelte/src/internal/client/reactivity/effects.js", "../../svelte/src/internal/client/legacy.js", "../../svelte/src/internal/client/runtime.js", "../../svelte/src/utils.js", "../../svelte/src/internal/client/dom/elements/events.js", "../../svelte/src/internal/client/dom/blocks/svelte-head.js", "../../svelte/src/internal/client/dom/reconciler.js", "../../svelte/src/internal/client/dom/template.js", "../../svelte/src/internal/client/render.js", "../../svelte/src/internal/client/dom/blocks/snippet.js", "../../svelte/src/internal/shared/attributes.js", "../../svelte/src/internal/client/dom/elements/attributes.js", "../../svelte/src/internal/client/dom/elements/bindings/size.js", "../../svelte/src/store/utils.js", "../../svelte/src/store/shared/index.js", "../../svelte/src/internal/client/reactivity/store.js", "../../svelte/src/legacy/legacy-client.js", "../../svelte/src/internal/client/dom/elements/custom-element.js", "../../svelte/src/index-client.js"],
  "sourcesContent": ["export default true;\r\n", "// Store the references to globals in case someone tries to monkey patch these, causing the below\r\n// to de-opt (this occurs often when using popular extensions).\r\nexport var is_array = Array.isArray;\r\nexport var index_of = Array.prototype.indexOf;\r\nexport var array_from = Array.from;\r\nexport var object_keys = Object.keys;\r\nexport var define_property = Object.defineProperty;\r\nexport var get_descriptor = Object.getOwnPropertyDescriptor;\r\nexport var get_descriptors = Object.getOwnPropertyDescriptors;\r\nexport var object_prototype = Object.prototype;\r\nexport var array_prototype = Array.prototype;\r\nexport var get_prototype_of = Object.getPrototypeOf;\r\nexport var is_extensible = Object.isExtensible;\r\n\r\n/**\r\n * @param {any} thing\r\n * @returns {thing is Function}\r\n */\r\nexport function is_function(thing) {\r\n\treturn typeof thing === 'function';\r\n}\r\n\r\nexport const noop = () => {};\r\n\r\n// Adapted from https://github.com/then/is-promise/blob/master/index.js\r\n// Distributed under MIT License https://github.com/then/is-promise/blob/master/LICENSE\r\n\r\n/**\r\n * @template [T=any]\r\n * @param {any} value\r\n * @returns {value is PromiseLike<T>}\r\n */\r\nexport function is_promise(value) {\r\n\treturn typeof value?.then === 'function';\r\n}\r\n\r\n/** @param {Function} fn */\r\nexport function run(fn) {\r\n\treturn fn();\r\n}\r\n\r\n/** @param {Array<() => void>} arr */\r\nexport function run_all(arr) {\r\n\tfor (var i = 0; i < arr.length; i++) {\r\n\t\tarr[i]();\r\n\t}\r\n}\r\n\r\n/**\r\n * TODO replace with Promise.withResolvers once supported widely enough\r\n * @template T\r\n */\r\nexport function deferred() {\r\n\t/** @type {(value: T) => void} */\r\n\tvar resolve;\r\n\r\n\t/** @type {(reason: any) => void} */\r\n\tvar reject;\r\n\r\n\t/** @type {Promise<T>} */\r\n\tvar promise = new Promise((res, rej) => {\r\n\t\tresolve = res;\r\n\t\treject = rej;\r\n\t});\r\n\r\n\t// @ts-expect-error\r\n\treturn { promise, resolve, reject };\r\n}\r\n\r\n/**\r\n * @template V\r\n * @param {V} value\r\n * @param {V | (() => V)} fallback\r\n * @param {boolean} [lazy]\r\n * @returns {V}\r\n */\r\nexport function fallback(value, fallback, lazy = false) {\r\n\treturn value === undefined\r\n\t\t? lazy\r\n\t\t\t? /** @type {() => V} */ (fallback)()\r\n\t\t\t: /** @type {V} */ (fallback)\r\n\t\t: value;\r\n}\r\n\r\n/**\r\n * When encountering a situation like `let [a, b, c] = $derived(blah())`,\r\n * we need to stash an intermediate value that `a`, `b`, and `c` derive\r\n * from, in case it's an iterable\r\n * @template T\r\n * @param {ArrayLike<T> | Iterable<T>} value\r\n * @param {number} [n]\r\n * @returns {Array<T>}\r\n */\r\nexport function to_array(value, n) {\r\n\t// return arrays unchanged\r\n\tif (Array.isArray(value)) {\r\n\t\treturn value;\r\n\t}\r\n\r\n\t// if value is not iterable, or `n` is unspecified (indicates a rest\r\n\t// element, which means we're not concerned about unbounded iterables)\r\n\t// convert to an array with `Array.from`\r\n\tif (n === undefined || !(Symbol.iterator in value)) {\r\n\t\treturn Array.from(value);\r\n\t}\r\n\r\n\t// otherwise, populate an array with `n` values\r\n\r\n\t/** @type {T[]} */\r\n\tconst array = [];\r\n\r\n\tfor (const element of value) {\r\n\t\tarray.push(element);\r\n\t\tif (array.length === n) break;\r\n\t}\r\n\r\n\treturn array;\r\n}\r\n", "export const DERIVED = 1 << 1;\r\nexport const EFFECT = 1 << 2;\r\nexport const RENDER_EFFECT = 1 << 3;\r\nexport const BLOCK_EFFECT = 1 << 4;\r\nexport const BRANCH_EFFECT = 1 << 5;\r\nexport const ROOT_EFFECT = 1 << 6;\r\nexport const BOUNDARY_EFFECT = 1 << 7;\r\nexport const UNOWNED = 1 << 8;\r\nexport const DISCONNECTED = 1 << 9;\r\nexport const CLEAN = 1 << 10;\r\nexport const DIRTY = 1 << 11;\r\nexport const MAYBE_DIRTY = 1 << 12;\r\nexport const INERT = 1 << 13;\r\nexport const DESTROYED = 1 << 14;\r\nexport const EFFECT_RAN = 1 << 15;\r\n/** 'Transparent' effects do not create a transition boundary */\r\nexport const EFFECT_TRANSPARENT = 1 << 16;\r\nexport const INSPECT_EFFECT = 1 << 17;\r\nexport const HEAD_EFFECT = 1 << 18;\r\nexport const EFFECT_PRESERVED = 1 << 19;\r\nexport const USER_EFFECT = 1 << 20;\r\n\r\n// Flags used for async\r\nexport const REACTION_IS_UPDATING = 1 << 21;\r\nexport const ASYNC = 1 << 22;\r\n\r\nexport const ERROR_VALUE = 1 << 23;\r\n\r\nexport const STATE_SYMBOL = Symbol('$state');\r\nexport const LEGACY_PROPS = Symbol('legacy props');\r\nexport const LOADING_ATTR_SYMBOL = Symbol('');\r\nexport const PROXY_PATH_SYMBOL = Symbol('proxy path');\r\n\r\n/** allow users to ignore aborted signal errors if `reason.name === 'StaleReactionError` */\r\nexport const STALE_REACTION = new (class StaleReactionError extends Error {\r\n\tname = 'StaleReactionError';\r\n\tmessage = 'The reaction that called `getAbortSignal()` was re-run or destroyed';\r\n})();\r\n\r\nexport const ELEMENT_NODE = 1;\r\nexport const TEXT_NODE = 3;\r\nexport const COMMENT_NODE = 8;\r\nexport const DOCUMENT_FRAGMENT_NODE = 11;\r\n", "/* This file is generated by scripts/process-messages/index.js. Do not edit! */\r\n\r\nimport { DEV } from 'esm-env';\r\n\r\n/**\r\n * Cannot await outside a `<svelte:boundary>` with a `pending` snippet\r\n * @returns {never}\r\n */\r\nexport function await_outside_boundary() {\r\n\tif (DEV) {\r\n\t\tconst error = new Error(`await_outside_boundary\\nCannot await outside a \\`<svelte:boundary>\\` with a \\`pending\\` snippet\\nhttps://svelte.dev/e/await_outside_boundary`);\r\n\r\n\t\terror.name = 'Svelte error';\r\n\r\n\t\tthrow error;\r\n\t} else {\r\n\t\tthrow new Error(`https://svelte.dev/e/await_outside_boundary`);\r\n\t}\r\n}\r\n\r\n/**\r\n * Cannot use `{@render children(...)}` if the parent component uses `let:` directives. Consider using a named snippet instead\r\n * @returns {never}\r\n */\r\nexport function invalid_default_snippet() {\r\n\tif (DEV) {\r\n\t\tconst error = new Error(`invalid_default_snippet\\nCannot use \\`{@render children(...)}\\` if the parent component uses \\`let:\\` directives. Consider using a named snippet instead\\nhttps://svelte.dev/e/invalid_default_snippet`);\r\n\r\n\t\terror.name = 'Svelte error';\r\n\r\n\t\tthrow error;\r\n\t} else {\r\n\t\tthrow new Error(`https://svelte.dev/e/invalid_default_snippet`);\r\n\t}\r\n}\r\n\r\n/**\r\n * A snippet function was passed invalid arguments. Snippets should only be instantiated via `{@render ...}`\r\n * @returns {never}\r\n */\r\nexport function invalid_snippet_arguments() {\r\n\tif (DEV) {\r\n\t\tconst error = new Error(`invalid_snippet_arguments\\nA snippet function was passed invalid arguments. Snippets should only be instantiated via \\`{@render ...}\\`\\nhttps://svelte.dev/e/invalid_snippet_arguments`);\r\n\r\n\t\terror.name = 'Svelte error';\r\n\r\n\t\tthrow error;\r\n\t} else {\r\n\t\tthrow new Error(`https://svelte.dev/e/invalid_snippet_arguments`);\r\n\t}\r\n}\r\n\r\n/**\r\n * `%name%(...)` can only be used during component initialisation\r\n * @param {string} name\r\n * @returns {never}\r\n */\r\nexport function lifecycle_outside_component(name) {\r\n\tif (DEV) {\r\n\t\tconst error = new Error(`lifecycle_outside_component\\n\\`${name}(...)\\` can only be used during component initialisation\\nhttps://svelte.dev/e/lifecycle_outside_component`);\r\n\r\n\t\terror.name = 'Svelte error';\r\n\r\n\t\tthrow error;\r\n\t} else {\r\n\t\tthrow new Error(`https://svelte.dev/e/lifecycle_outside_component`);\r\n\t}\r\n}\r\n\r\n/**\r\n * Attempted to render a snippet without a `{@render}` block. This would cause the snippet code to be stringified instead of its content being rendered to the DOM. To fix this, change `{snippet}` to `{@render snippet()}`.\r\n * @returns {never}\r\n */\r\nexport function snippet_without_render_tag() {\r\n\tif (DEV) {\r\n\t\tconst error = new Error(`snippet_without_render_tag\\nAttempted to render a snippet without a \\`{@render}\\` block. This would cause the snippet code to be stringified instead of its content being rendered to the DOM. To fix this, change \\`{snippet}\\` to \\`{@render snippet()}\\`.\\nhttps://svelte.dev/e/snippet_without_render_tag`);\r\n\r\n\t\terror.name = 'Svelte error';\r\n\r\n\t\tthrow error;\r\n\t} else {\r\n\t\tthrow new Error(`https://svelte.dev/e/snippet_without_render_tag`);\r\n\t}\r\n}\r\n\r\n/**\r\n * `%name%` is not a store with a `subscribe` method\r\n * @param {string} name\r\n * @returns {never}\r\n */\r\nexport function store_invalid_shape(name) {\r\n\tif (DEV) {\r\n\t\tconst error = new Error(`store_invalid_shape\\n\\`${name}\\` is not a store with a \\`subscribe\\` method\\nhttps://svelte.dev/e/store_invalid_shape`);\r\n\r\n\t\terror.name = 'Svelte error';\r\n\r\n\t\tthrow error;\r\n\t} else {\r\n\t\tthrow new Error(`https://svelte.dev/e/store_invalid_shape`);\r\n\t}\r\n}\r\n\r\n/**\r\n * The `this` prop on `<svelte:element>` must be a string, if defined\r\n * @returns {never}\r\n */\r\nexport function svelte_element_invalid_this_value() {\r\n\tif (DEV) {\r\n\t\tconst error = new Error(`svelte_element_invalid_this_value\\nThe \\`this\\` prop on \\`<svelte:element>\\` must be a string, if defined\\nhttps://svelte.dev/e/svelte_element_invalid_this_value`);\r\n\r\n\t\terror.name = 'Svelte error';\r\n\r\n\t\tthrow error;\r\n\t} else {\r\n\t\tthrow new Error(`https://svelte.dev/e/svelte_element_invalid_this_value`);\r\n\t}\r\n}", "/* This file is generated by scripts/process-messages/index.js. Do not edit! */\r\n\r\nimport { DEV } from 'esm-env';\r\n\r\nexport *  from '../shared/errors.js';\r\n\r\n/**\r\n * Cannot create a `$derived(...)` with an `await` expression outside of an effect tree\r\n * @returns {never}\r\n */\r\nexport function async_derived_orphan() {\r\n\tif (DEV) {\r\n\t\tconst error = new Error(`async_derived_orphan\\nCannot create a \\`$derived(...)\\` with an \\`await\\` expression outside of an effect tree\\nhttps://svelte.dev/e/async_derived_orphan`);\r\n\r\n\t\terror.name = 'Svelte error';\r\n\r\n\t\tthrow error;\r\n\t} else {\r\n\t\tthrow new Error(`https://svelte.dev/e/async_derived_orphan`);\r\n\t}\r\n}\r\n\r\n/**\r\n * Using `bind:value` together with a checkbox input is not allowed. Use `bind:checked` instead\r\n * @returns {never}\r\n */\r\nexport function bind_invalid_checkbox_value() {\r\n\tif (DEV) {\r\n\t\tconst error = new Error(`bind_invalid_checkbox_value\\nUsing \\`bind:value\\` together with a checkbox input is not allowed. Use \\`bind:checked\\` instead\\nhttps://svelte.dev/e/bind_invalid_checkbox_value`);\r\n\r\n\t\terror.name = 'Svelte error';\r\n\r\n\t\tthrow error;\r\n\t} else {\r\n\t\tthrow new Error(`https://svelte.dev/e/bind_invalid_checkbox_value`);\r\n\t}\r\n}\r\n\r\n/**\r\n * Component %component% has an export named `%key%` that a consumer component is trying to access using `bind:%key%`, which is disallowed. Instead, use `bind:this` (e.g. `<%name% bind:this={component} />`) and then access the property on the bound component instance (e.g. `component.%key%`)\r\n * @param {string} component\r\n * @param {string} key\r\n * @param {string} name\r\n * @returns {never}\r\n */\r\nexport function bind_invalid_export(component, key, name) {\r\n\tif (DEV) {\r\n\t\tconst error = new Error(`bind_invalid_export\\nComponent ${component} has an export named \\`${key}\\` that a consumer component is trying to access using \\`bind:${key}\\`, which is disallowed. Instead, use \\`bind:this\\` (e.g. \\`<${name} bind:this={component} />\\`) and then access the property on the bound component instance (e.g. \\`component.${key}\\`)\\nhttps://svelte.dev/e/bind_invalid_export`);\r\n\r\n\t\terror.name = 'Svelte error';\r\n\r\n\t\tthrow error;\r\n\t} else {\r\n\t\tthrow new Error(`https://svelte.dev/e/bind_invalid_export`);\r\n\t}\r\n}\r\n\r\n/**\r\n * A component is attempting to bind to a non-bindable property `%key%` belonging to %component% (i.e. `<%name% bind:%key%={...}>`). To mark a property as bindable: `let { %key% = $bindable() } = $props()`\r\n * @param {string} key\r\n * @param {string} component\r\n * @param {string} name\r\n * @returns {never}\r\n */\r\nexport function bind_not_bindable(key, component, name) {\r\n\tif (DEV) {\r\n\t\tconst error = new Error(`bind_not_bindable\\nA component is attempting to bind to a non-bindable property \\`${key}\\` belonging to ${component} (i.e. \\`<${name} bind:${key}={...}>\\`). To mark a property as bindable: \\`let { ${key} = $bindable() } = $props()\\`\\nhttps://svelte.dev/e/bind_not_bindable`);\r\n\r\n\t\terror.name = 'Svelte error';\r\n\r\n\t\tthrow error;\r\n\t} else {\r\n\t\tthrow new Error(`https://svelte.dev/e/bind_not_bindable`);\r\n\t}\r\n}\r\n\r\n/**\r\n * Calling `%method%` on a component instance (of %component%) is no longer valid in Svelte 5\r\n * @param {string} method\r\n * @param {string} component\r\n * @returns {never}\r\n */\r\nexport function component_api_changed(method, component) {\r\n\tif (DEV) {\r\n\t\tconst error = new Error(`component_api_changed\\nCalling \\`${method}\\` on a component instance (of ${component}) is no longer valid in Svelte 5\\nhttps://svelte.dev/e/component_api_changed`);\r\n\r\n\t\terror.name = 'Svelte error';\r\n\r\n\t\tthrow error;\r\n\t} else {\r\n\t\tthrow new Error(`https://svelte.dev/e/component_api_changed`);\r\n\t}\r\n}\r\n\r\n/**\r\n * Attempted to instantiate %component% with `new %name%`, which is no longer valid in Svelte 5. If this component is not under your control, set the `compatibility.componentApi` compiler option to `4` to keep it working.\r\n * @param {string} component\r\n * @param {string} name\r\n * @returns {never}\r\n */\r\nexport function component_api_invalid_new(component, name) {\r\n\tif (DEV) {\r\n\t\tconst error = new Error(`component_api_invalid_new\\nAttempted to instantiate ${component} with \\`new ${name}\\`, which is no longer valid in Svelte 5. If this component is not under your control, set the \\`compatibility.componentApi\\` compiler option to \\`4\\` to keep it working.\\nhttps://svelte.dev/e/component_api_invalid_new`);\r\n\r\n\t\terror.name = 'Svelte error';\r\n\r\n\t\tthrow error;\r\n\t} else {\r\n\t\tthrow new Error(`https://svelte.dev/e/component_api_invalid_new`);\r\n\t}\r\n}\r\n\r\n/**\r\n * A derived value cannot reference itself recursively\r\n * @returns {never}\r\n */\r\nexport function derived_references_self() {\r\n\tif (DEV) {\r\n\t\tconst error = new Error(`derived_references_self\\nA derived value cannot reference itself recursively\\nhttps://svelte.dev/e/derived_references_self`);\r\n\r\n\t\terror.name = 'Svelte error';\r\n\r\n\t\tthrow error;\r\n\t} else {\r\n\t\tthrow new Error(`https://svelte.dev/e/derived_references_self`);\r\n\t}\r\n}\r\n\r\n/**\r\n * Keyed each block has duplicate key `%value%` at indexes %a% and %b%\r\n * @param {string} a\r\n * @param {string} b\r\n * @param {string | undefined | null} [value]\r\n * @returns {never}\r\n */\r\nexport function each_key_duplicate(a, b, value) {\r\n\tif (DEV) {\r\n\t\tconst error = new Error(`each_key_duplicate\\n${value\r\n\t\t\t? `Keyed each block has duplicate key \\`${value}\\` at indexes ${a} and ${b}`\r\n\t\t\t: `Keyed each block has duplicate key at indexes ${a} and ${b}`}\\nhttps://svelte.dev/e/each_key_duplicate`);\r\n\r\n\t\terror.name = 'Svelte error';\r\n\r\n\t\tthrow error;\r\n\t} else {\r\n\t\tthrow new Error(`https://svelte.dev/e/each_key_duplicate`);\r\n\t}\r\n}\r\n\r\n/**\r\n * `%rune%` cannot be used inside an effect cleanup function\r\n * @param {string} rune\r\n * @returns {never}\r\n */\r\nexport function effect_in_teardown(rune) {\r\n\tif (DEV) {\r\n\t\tconst error = new Error(`effect_in_teardown\\n\\`${rune}\\` cannot be used inside an effect cleanup function\\nhttps://svelte.dev/e/effect_in_teardown`);\r\n\r\n\t\terror.name = 'Svelte error';\r\n\r\n\t\tthrow error;\r\n\t} else {\r\n\t\tthrow new Error(`https://svelte.dev/e/effect_in_teardown`);\r\n\t}\r\n}\r\n\r\n/**\r\n * Effect cannot be created inside a `$derived` value that was not itself created inside an effect\r\n * @returns {never}\r\n */\r\nexport function effect_in_unowned_derived() {\r\n\tif (DEV) {\r\n\t\tconst error = new Error(`effect_in_unowned_derived\\nEffect cannot be created inside a \\`$derived\\` value that was not itself created inside an effect\\nhttps://svelte.dev/e/effect_in_unowned_derived`);\r\n\r\n\t\terror.name = 'Svelte error';\r\n\r\n\t\tthrow error;\r\n\t} else {\r\n\t\tthrow new Error(`https://svelte.dev/e/effect_in_unowned_derived`);\r\n\t}\r\n}\r\n\r\n/**\r\n * `%rune%` can only be used inside an effect (e.g. during component initialisation)\r\n * @param {string} rune\r\n * @returns {never}\r\n */\r\nexport function effect_orphan(rune) {\r\n\tif (DEV) {\r\n\t\tconst error = new Error(`effect_orphan\\n\\`${rune}\\` can only be used inside an effect (e.g. during component initialisation)\\nhttps://svelte.dev/e/effect_orphan`);\r\n\r\n\t\terror.name = 'Svelte error';\r\n\r\n\t\tthrow error;\r\n\t} else {\r\n\t\tthrow new Error(`https://svelte.dev/e/effect_orphan`);\r\n\t}\r\n}\r\n\r\n/**\r\n * `$effect.pending()` can only be called inside an effect or derived\r\n * @returns {never}\r\n */\r\nexport function effect_pending_outside_reaction() {\r\n\tif (DEV) {\r\n\t\tconst error = new Error(`effect_pending_outside_reaction\\n\\`$effect.pending()\\` can only be called inside an effect or derived\\nhttps://svelte.dev/e/effect_pending_outside_reaction`);\r\n\r\n\t\terror.name = 'Svelte error';\r\n\r\n\t\tthrow error;\r\n\t} else {\r\n\t\tthrow new Error(`https://svelte.dev/e/effect_pending_outside_reaction`);\r\n\t}\r\n}\r\n\r\n/**\r\n * Maximum update depth exceeded. This typically indicates that an effect reads and writes the same piece of state\r\n * @returns {never}\r\n */\r\nexport function effect_update_depth_exceeded() {\r\n\tif (DEV) {\r\n\t\tconst error = new Error(`effect_update_depth_exceeded\\nMaximum update depth exceeded. This typically indicates that an effect reads and writes the same piece of state\\nhttps://svelte.dev/e/effect_update_depth_exceeded`);\r\n\r\n\t\terror.name = 'Svelte error';\r\n\r\n\t\tthrow error;\r\n\t} else {\r\n\t\tthrow new Error(`https://svelte.dev/e/effect_update_depth_exceeded`);\r\n\t}\r\n}\r\n\r\n/**\r\n * Cannot use `flushSync` inside an effect\r\n * @returns {never}\r\n */\r\nexport function flush_sync_in_effect() {\r\n\tif (DEV) {\r\n\t\tconst error = new Error(`flush_sync_in_effect\\nCannot use \\`flushSync\\` inside an effect\\nhttps://svelte.dev/e/flush_sync_in_effect`);\r\n\r\n\t\terror.name = 'Svelte error';\r\n\r\n\t\tthrow error;\r\n\t} else {\r\n\t\tthrow new Error(`https://svelte.dev/e/flush_sync_in_effect`);\r\n\t}\r\n}\r\n\r\n/**\r\n * `getAbortSignal()` can only be called inside an effect or derived\r\n * @returns {never}\r\n */\r\nexport function get_abort_signal_outside_reaction() {\r\n\tif (DEV) {\r\n\t\tconst error = new Error(`get_abort_signal_outside_reaction\\n\\`getAbortSignal()\\` can only be called inside an effect or derived\\nhttps://svelte.dev/e/get_abort_signal_outside_reaction`);\r\n\r\n\t\terror.name = 'Svelte error';\r\n\r\n\t\tthrow error;\r\n\t} else {\r\n\t\tthrow new Error(`https://svelte.dev/e/get_abort_signal_outside_reaction`);\r\n\t}\r\n}\r\n\r\n/**\r\n * Failed to hydrate the application\r\n * @returns {never}\r\n */\r\nexport function hydration_failed() {\r\n\tif (DEV) {\r\n\t\tconst error = new Error(`hydration_failed\\nFailed to hydrate the application\\nhttps://svelte.dev/e/hydration_failed`);\r\n\r\n\t\terror.name = 'Svelte error';\r\n\r\n\t\tthrow error;\r\n\t} else {\r\n\t\tthrow new Error(`https://svelte.dev/e/hydration_failed`);\r\n\t}\r\n}\r\n\r\n/**\r\n * Could not `{@render}` snippet due to the expression being `null` or `undefined`. Consider using optional chaining `{@render snippet?.()}`\r\n * @returns {never}\r\n */\r\nexport function invalid_snippet() {\r\n\tif (DEV) {\r\n\t\tconst error = new Error(`invalid_snippet\\nCould not \\`{@render}\\` snippet due to the expression being \\`null\\` or \\`undefined\\`. Consider using optional chaining \\`{@render snippet?.()}\\`\\nhttps://svelte.dev/e/invalid_snippet`);\r\n\r\n\t\terror.name = 'Svelte error';\r\n\r\n\t\tthrow error;\r\n\t} else {\r\n\t\tthrow new Error(`https://svelte.dev/e/invalid_snippet`);\r\n\t}\r\n}\r\n\r\n/**\r\n * `%name%(...)` cannot be used in runes mode\r\n * @param {string} name\r\n * @returns {never}\r\n */\r\nexport function lifecycle_legacy_only(name) {\r\n\tif (DEV) {\r\n\t\tconst error = new Error(`lifecycle_legacy_only\\n\\`${name}(...)\\` cannot be used in runes mode\\nhttps://svelte.dev/e/lifecycle_legacy_only`);\r\n\r\n\t\terror.name = 'Svelte error';\r\n\r\n\t\tthrow error;\r\n\t} else {\r\n\t\tthrow new Error(`https://svelte.dev/e/lifecycle_legacy_only`);\r\n\t}\r\n}\r\n\r\n/**\r\n * Cannot do `bind:%key%={undefined}` when `%key%` has a fallback value\r\n * @param {string} key\r\n * @returns {never}\r\n */\r\nexport function props_invalid_value(key) {\r\n\tif (DEV) {\r\n\t\tconst error = new Error(`props_invalid_value\\nCannot do \\`bind:${key}={undefined}\\` when \\`${key}\\` has a fallback value\\nhttps://svelte.dev/e/props_invalid_value`);\r\n\r\n\t\terror.name = 'Svelte error';\r\n\r\n\t\tthrow error;\r\n\t} else {\r\n\t\tthrow new Error(`https://svelte.dev/e/props_invalid_value`);\r\n\t}\r\n}\r\n\r\n/**\r\n * Rest element properties of `$props()` such as `%property%` are readonly\r\n * @param {string} property\r\n * @returns {never}\r\n */\r\nexport function props_rest_readonly(property) {\r\n\tif (DEV) {\r\n\t\tconst error = new Error(`props_rest_readonly\\nRest element properties of \\`$props()\\` such as \\`${property}\\` are readonly\\nhttps://svelte.dev/e/props_rest_readonly`);\r\n\r\n\t\terror.name = 'Svelte error';\r\n\r\n\t\tthrow error;\r\n\t} else {\r\n\t\tthrow new Error(`https://svelte.dev/e/props_rest_readonly`);\r\n\t}\r\n}\r\n\r\n/**\r\n * The `%rune%` rune is only available inside `.svelte` and `.svelte.js/ts` files\r\n * @param {string} rune\r\n * @returns {never}\r\n */\r\nexport function rune_outside_svelte(rune) {\r\n\tif (DEV) {\r\n\t\tconst error = new Error(`rune_outside_svelte\\nThe \\`${rune}\\` rune is only available inside \\`.svelte\\` and \\`.svelte.js/ts\\` files\\nhttps://svelte.dev/e/rune_outside_svelte`);\r\n\r\n\t\terror.name = 'Svelte error';\r\n\r\n\t\tthrow error;\r\n\t} else {\r\n\t\tthrow new Error(`https://svelte.dev/e/rune_outside_svelte`);\r\n\t}\r\n}\r\n\r\n/**\r\n * `setContext` must be called when a component first initializes, not in a subsequent effect or after an `await` expression\r\n * @returns {never}\r\n */\r\nexport function set_context_after_init() {\r\n\tif (DEV) {\r\n\t\tconst error = new Error(`set_context_after_init\\n\\`setContext\\` must be called when a component first initializes, not in a subsequent effect or after an \\`await\\` expression\\nhttps://svelte.dev/e/set_context_after_init`);\r\n\r\n\t\terror.name = 'Svelte error';\r\n\r\n\t\tthrow error;\r\n\t} else {\r\n\t\tthrow new Error(`https://svelte.dev/e/set_context_after_init`);\r\n\t}\r\n}\r\n\r\n/**\r\n * Property descriptors defined on `$state` objects must contain `value` and always be `enumerable`, `configurable` and `writable`.\r\n * @returns {never}\r\n */\r\nexport function state_descriptors_fixed() {\r\n\tif (DEV) {\r\n\t\tconst error = new Error(`state_descriptors_fixed\\nProperty descriptors defined on \\`$state\\` objects must contain \\`value\\` and always be \\`enumerable\\`, \\`configurable\\` and \\`writable\\`.\\nhttps://svelte.dev/e/state_descriptors_fixed`);\r\n\r\n\t\terror.name = 'Svelte error';\r\n\r\n\t\tthrow error;\r\n\t} else {\r\n\t\tthrow new Error(`https://svelte.dev/e/state_descriptors_fixed`);\r\n\t}\r\n}\r\n\r\n/**\r\n * Cannot set prototype of `$state` object\r\n * @returns {never}\r\n */\r\nexport function state_prototype_fixed() {\r\n\tif (DEV) {\r\n\t\tconst error = new Error(`state_prototype_fixed\\nCannot set prototype of \\`$state\\` object\\nhttps://svelte.dev/e/state_prototype_fixed`);\r\n\r\n\t\terror.name = 'Svelte error';\r\n\r\n\t\tthrow error;\r\n\t} else {\r\n\t\tthrow new Error(`https://svelte.dev/e/state_prototype_fixed`);\r\n\t}\r\n}\r\n\r\n/**\r\n * Updating state inside `$derived(...)`, `$inspect(...)` or a template expression is forbidden. If the value should not be reactive, declare it without `$state`\r\n * @returns {never}\r\n */\r\nexport function state_unsafe_mutation() {\r\n\tif (DEV) {\r\n\t\tconst error = new Error(`state_unsafe_mutation\\nUpdating state inside \\`$derived(...)\\`, \\`$inspect(...)\\` or a template expression is forbidden. If the value should not be reactive, declare it without \\`$state\\`\\nhttps://svelte.dev/e/state_unsafe_mutation`);\r\n\r\n\t\terror.name = 'Svelte error';\r\n\r\n\t\tthrow error;\r\n\t} else {\r\n\t\tthrow new Error(`https://svelte.dev/e/state_unsafe_mutation`);\r\n\t}\r\n}\r\n\r\n/**\r\n * A `<svelte:boundary>` `reset` function cannot be called while an error is still being handled\r\n * @returns {never}\r\n */\r\nexport function svelte_boundary_reset_onerror() {\r\n\tif (DEV) {\r\n\t\tconst error = new Error(`svelte_boundary_reset_onerror\\nA \\`<svelte:boundary>\\` \\`reset\\` function cannot be called while an error is still being handled\\nhttps://svelte.dev/e/svelte_boundary_reset_onerror`);\r\n\r\n\t\terror.name = 'Svelte error';\r\n\r\n\t\tthrow error;\r\n\t} else {\r\n\t\tthrow new Error(`https://svelte.dev/e/svelte_boundary_reset_onerror`);\r\n\t}\r\n}", "export const EACH_ITEM_REACTIVE = 1;\r\nexport const EACH_INDEX_REACTIVE = 1 << 1;\r\n/** See EachBlock interface metadata.is_controlled for an explanation what this is */\r\nexport const EACH_IS_CONTROLLED = 1 << 2;\r\nexport const EACH_IS_ANIMATED = 1 << 3;\r\nexport const EACH_ITEM_IMMUTABLE = 1 << 4;\r\n\r\nexport const PROPS_IS_IMMUTABLE = 1;\r\nexport const PROPS_IS_RUNES = 1 << 1;\r\nexport const PROPS_IS_UPDATED = 1 << 2;\r\nexport const PROPS_IS_BINDABLE = 1 << 3;\r\nexport const PROPS_IS_LAZY_INITIAL = 1 << 4;\r\n\r\nexport const TRANSITION_IN = 1;\r\nexport const TRANSITION_OUT = 1 << 1;\r\nexport const TRANSITION_GLOBAL = 1 << 2;\r\n\r\nexport const TEMPLATE_FRAGMENT = 1;\r\nexport const TEMPLATE_USE_IMPORT_NODE = 1 << 1;\r\nexport const TEMPLATE_USE_SVG = 1 << 2;\r\nexport const TEMPLATE_USE_MATHML = 1 << 3;\r\n\r\nexport const HYDRATION_START = '[';\r\n/** used to indicate that an `{:else}...` block was rendered */\r\nexport const HYDRATION_START_ELSE = '[!';\r\nexport const HYDRATION_END = ']';\r\nexport const HYDRATION_ERROR = {};\r\n\r\nexport const ELEMENT_IS_NAMESPACED = 1;\r\nexport const ELEMENT_PRESERVE_ATTRIBUTE_CASE = 1 << 1;\r\n\r\nexport const UNINITIALIZED = Symbol();\r\n\r\n// Dev-time component properties\r\nexport const FILENAME = Symbol('filename');\r\nexport const HMR = Symbol('hmr');\r\n\r\nexport const NAMESPACE_HTML = 'http://www.w3.org/1999/xhtml';\r\nexport const NAMESPACE_SVG = 'http://www.w3.org/2000/svg';\r\nexport const NAMESPACE_MATHML = 'http://www.w3.org/1998/Math/MathML';\r\n\r\n// we use a list of ignorable runtime warnings because not every runtime warning\r\n// can be ignored and we want to keep the validation for svelte-ignore in place\r\nexport const IGNORABLE_RUNTIME_WARNINGS = /** @type {const} */ ([\r\n\t'await_waterfall',\r\n\t'await_reactivity_loss',\r\n\t'state_snapshot_uncloneable',\r\n\t'binding_property_non_reactive',\r\n\t'hydration_attribute_changed',\r\n\t'hydration_html_changed',\r\n\t'ownership_invalid_binding',\r\n\t'ownership_invalid_mutation'\r\n]);\r\n\r\n/**\r\n * Whitespace inside one of these elements will not result in\r\n * a whitespace node being created in any circumstances. (This\r\n * list is almost certainly very incomplete)\r\n * TODO this is currently unused\r\n */\r\nexport const ELEMENTS_WITHOUT_TEXT = ['audio', 'datalist', 'dl', 'optgroup', 'select', 'video'];\r\n\r\nexport const ATTACHMENT_KEY = '@attach';\r\n", "/* This file is generated by scripts/process-messages/index.js. Do not edit! */\r\n\r\nimport { DEV } from 'esm-env';\r\n\r\nvar bold = 'font-weight: bold';\r\nvar normal = 'font-weight: normal';\r\n\r\n/**\r\n * Assignment to `%property%` property (%location%) will evaluate to the right-hand side, not the value of `%property%` following the assignment. This may result in unexpected behaviour.\r\n * @param {string} property\r\n * @param {string} location\r\n */\r\nexport function assignment_value_stale(property, location) {\r\n\tif (DEV) {\r\n\t\tconsole.warn(`%c[svelte] assignment_value_stale\\n%cAssignment to \\`${property}\\` property (${location}) will evaluate to the right-hand side, not the value of \\`${property}\\` following the assignment. This may result in unexpected behaviour.\\nhttps://svelte.dev/e/assignment_value_stale`, bold, normal);\r\n\t} else {\r\n\t\tconsole.warn(`https://svelte.dev/e/assignment_value_stale`);\r\n\t}\r\n}\r\n\r\n/**\r\n * Detected reactivity loss when reading `%name%`. This happens when state is read in an async function after an earlier `await`\r\n * @param {string} name\r\n */\r\nexport function await_reactivity_loss(name) {\r\n\tif (DEV) {\r\n\t\tconsole.warn(`%c[svelte] await_reactivity_loss\\n%cDetected reactivity loss when reading \\`${name}\\`. This happens when state is read in an async function after an earlier \\`await\\`\\nhttps://svelte.dev/e/await_reactivity_loss`, bold, normal);\r\n\t} else {\r\n\t\tconsole.warn(`https://svelte.dev/e/await_reactivity_loss`);\r\n\t}\r\n}\r\n\r\n/**\r\n * An async derived, `%name%` (%location%) was not read immediately after it resolved. This often indicates an unnecessary waterfall, which can slow down your app\r\n * @param {string} name\r\n * @param {string} location\r\n */\r\nexport function await_waterfall(name, location) {\r\n\tif (DEV) {\r\n\t\tconsole.warn(`%c[svelte] await_waterfall\\n%cAn async derived, \\`${name}\\` (${location}) was not read immediately after it resolved. This often indicates an unnecessary waterfall, which can slow down your app\\nhttps://svelte.dev/e/await_waterfall`, bold, normal);\r\n\t} else {\r\n\t\tconsole.warn(`https://svelte.dev/e/await_waterfall`);\r\n\t}\r\n}\r\n\r\n/**\r\n * `%binding%` (%location%) is binding to a non-reactive property\r\n * @param {string} binding\r\n * @param {string | undefined | null} [location]\r\n */\r\nexport function binding_property_non_reactive(binding, location) {\r\n\tif (DEV) {\r\n\t\tconsole.warn(\r\n\t\t\t`%c[svelte] binding_property_non_reactive\\n%c${location\r\n\t\t\t\t? `\\`${binding}\\` (${location}) is binding to a non-reactive property`\r\n\t\t\t\t: `\\`${binding}\\` is binding to a non-reactive property`}\\nhttps://svelte.dev/e/binding_property_non_reactive`,\r\n\t\t\tbold,\r\n\t\t\tnormal\r\n\t\t);\r\n\t} else {\r\n\t\tconsole.warn(`https://svelte.dev/e/binding_property_non_reactive`);\r\n\t}\r\n}\r\n\r\n/**\r\n * Your `console.%method%` contained `$state` proxies. Consider using `$inspect(...)` or `$state.snapshot(...)` instead\r\n * @param {string} method\r\n */\r\nexport function console_log_state(method) {\r\n\tif (DEV) {\r\n\t\tconsole.warn(`%c[svelte] console_log_state\\n%cYour \\`console.${method}\\` contained \\`$state\\` proxies. Consider using \\`$inspect(...)\\` or \\`$state.snapshot(...)\\` instead\\nhttps://svelte.dev/e/console_log_state`, bold, normal);\r\n\t} else {\r\n\t\tconsole.warn(`https://svelte.dev/e/console_log_state`);\r\n\t}\r\n}\r\n\r\n/**\r\n * %handler% should be a function. Did you mean to %suggestion%?\r\n * @param {string} handler\r\n * @param {string} suggestion\r\n */\r\nexport function event_handler_invalid(handler, suggestion) {\r\n\tif (DEV) {\r\n\t\tconsole.warn(`%c[svelte] event_handler_invalid\\n%c${handler} should be a function. Did you mean to ${suggestion}?\\nhttps://svelte.dev/e/event_handler_invalid`, bold, normal);\r\n\t} else {\r\n\t\tconsole.warn(`https://svelte.dev/e/event_handler_invalid`);\r\n\t}\r\n}\r\n\r\n/**\r\n * The `%attribute%` attribute on `%html%` changed its value between server and client renders. The client value, `%value%`, will be ignored in favour of the server value\r\n * @param {string} attribute\r\n * @param {string} html\r\n * @param {string} value\r\n */\r\nexport function hydration_attribute_changed(attribute, html, value) {\r\n\tif (DEV) {\r\n\t\tconsole.warn(`%c[svelte] hydration_attribute_changed\\n%cThe \\`${attribute}\\` attribute on \\`${html}\\` changed its value between server and client renders. The client value, \\`${value}\\`, will be ignored in favour of the server value\\nhttps://svelte.dev/e/hydration_attribute_changed`, bold, normal);\r\n\t} else {\r\n\t\tconsole.warn(`https://svelte.dev/e/hydration_attribute_changed`);\r\n\t}\r\n}\r\n\r\n/**\r\n * The value of an `{@html ...}` block %location% changed between server and client renders. The client value will be ignored in favour of the server value\r\n * @param {string | undefined | null} [location]\r\n */\r\nexport function hydration_html_changed(location) {\r\n\tif (DEV) {\r\n\t\tconsole.warn(\r\n\t\t\t`%c[svelte] hydration_html_changed\\n%c${location\r\n\t\t\t\t? `The value of an \\`{@html ...}\\` block ${location} changed between server and client renders. The client value will be ignored in favour of the server value`\r\n\t\t\t\t: 'The value of an `{@html ...}` block changed between server and client renders. The client value will be ignored in favour of the server value'}\\nhttps://svelte.dev/e/hydration_html_changed`,\r\n\t\t\tbold,\r\n\t\t\tnormal\r\n\t\t);\r\n\t} else {\r\n\t\tconsole.warn(`https://svelte.dev/e/hydration_html_changed`);\r\n\t}\r\n}\r\n\r\n/**\r\n * Hydration failed because the initial UI does not match what was rendered on the server. The error occurred near %location%\r\n * @param {string | undefined | null} [location]\r\n */\r\nexport function hydration_mismatch(location) {\r\n\tif (DEV) {\r\n\t\tconsole.warn(\r\n\t\t\t`%c[svelte] hydration_mismatch\\n%c${location\r\n\t\t\t\t? `Hydration failed because the initial UI does not match what was rendered on the server. The error occurred near ${location}`\r\n\t\t\t\t: 'Hydration failed because the initial UI does not match what was rendered on the server'}\\nhttps://svelte.dev/e/hydration_mismatch`,\r\n\t\t\tbold,\r\n\t\t\tnormal\r\n\t\t);\r\n\t} else {\r\n\t\tconsole.warn(`https://svelte.dev/e/hydration_mismatch`);\r\n\t}\r\n}\r\n\r\n/**\r\n * The `render` function passed to `createRawSnippet` should return HTML for a single element\r\n */\r\nexport function invalid_raw_snippet_render() {\r\n\tif (DEV) {\r\n\t\tconsole.warn(`%c[svelte] invalid_raw_snippet_render\\n%cThe \\`render\\` function passed to \\`createRawSnippet\\` should return HTML for a single element\\nhttps://svelte.dev/e/invalid_raw_snippet_render`, bold, normal);\r\n\t} else {\r\n\t\tconsole.warn(`https://svelte.dev/e/invalid_raw_snippet_render`);\r\n\t}\r\n}\r\n\r\n/**\r\n * Detected a migrated `$:` reactive block in `%filename%` that both accesses and updates the same reactive value. This may cause recursive updates when converted to an `$effect`.\r\n * @param {string} filename\r\n */\r\nexport function legacy_recursive_reactive_block(filename) {\r\n\tif (DEV) {\r\n\t\tconsole.warn(`%c[svelte] legacy_recursive_reactive_block\\n%cDetected a migrated \\`$:\\` reactive block in \\`${filename}\\` that both accesses and updates the same reactive value. This may cause recursive updates when converted to an \\`$effect\\`.\\nhttps://svelte.dev/e/legacy_recursive_reactive_block`, bold, normal);\r\n\t} else {\r\n\t\tconsole.warn(`https://svelte.dev/e/legacy_recursive_reactive_block`);\r\n\t}\r\n}\r\n\r\n/**\r\n * Tried to unmount a component that was not mounted\r\n */\r\nexport function lifecycle_double_unmount() {\r\n\tif (DEV) {\r\n\t\tconsole.warn(`%c[svelte] lifecycle_double_unmount\\n%cTried to unmount a component that was not mounted\\nhttps://svelte.dev/e/lifecycle_double_unmount`, bold, normal);\r\n\t} else {\r\n\t\tconsole.warn(`https://svelte.dev/e/lifecycle_double_unmount`);\r\n\t}\r\n}\r\n\r\n/**\r\n * %parent% passed property `%prop%` to %child% with `bind:`, but its parent component %owner% did not declare `%prop%` as a binding. Consider creating a binding between %owner% and %parent% (e.g. `bind:%prop%={...}` instead of `%prop%={...}`)\r\n * @param {string} parent\r\n * @param {string} prop\r\n * @param {string} child\r\n * @param {string} owner\r\n */\r\nexport function ownership_invalid_binding(parent, prop, child, owner) {\r\n\tif (DEV) {\r\n\t\tconsole.warn(`%c[svelte] ownership_invalid_binding\\n%c${parent} passed property \\`${prop}\\` to ${child} with \\`bind:\\`, but its parent component ${owner} did not declare \\`${prop}\\` as a binding. Consider creating a binding between ${owner} and ${parent} (e.g. \\`bind:${prop}={...}\\` instead of \\`${prop}={...}\\`)\\nhttps://svelte.dev/e/ownership_invalid_binding`, bold, normal);\r\n\t} else {\r\n\t\tconsole.warn(`https://svelte.dev/e/ownership_invalid_binding`);\r\n\t}\r\n}\r\n\r\n/**\r\n * Mutating unbound props (`%name%`, at %location%) is strongly discouraged. Consider using `bind:%prop%={...}` in %parent% (or using a callback) instead\r\n * @param {string} name\r\n * @param {string} location\r\n * @param {string} prop\r\n * @param {string} parent\r\n */\r\nexport function ownership_invalid_mutation(name, location, prop, parent) {\r\n\tif (DEV) {\r\n\t\tconsole.warn(`%c[svelte] ownership_invalid_mutation\\n%cMutating unbound props (\\`${name}\\`, at ${location}) is strongly discouraged. Consider using \\`bind:${prop}={...}\\` in ${parent} (or using a callback) instead\\nhttps://svelte.dev/e/ownership_invalid_mutation`, bold, normal);\r\n\t} else {\r\n\t\tconsole.warn(`https://svelte.dev/e/ownership_invalid_mutation`);\r\n\t}\r\n}\r\n\r\n/**\r\n * The `value` property of a `<select multiple>` element should be an array, but it received a non-array value. The selection will be kept as is.\r\n */\r\nexport function select_multiple_invalid_value() {\r\n\tif (DEV) {\r\n\t\tconsole.warn(`%c[svelte] select_multiple_invalid_value\\n%cThe \\`value\\` property of a \\`<select multiple>\\` element should be an array, but it received a non-array value. The selection will be kept as is.\\nhttps://svelte.dev/e/select_multiple_invalid_value`, bold, normal);\r\n\t} else {\r\n\t\tconsole.warn(`https://svelte.dev/e/select_multiple_invalid_value`);\r\n\t}\r\n}\r\n\r\n/**\r\n * Reactive `$state(...)` proxies and the values they proxy have different identities. Because of this, comparisons with `%operator%` will produce unexpected results\r\n * @param {string} operator\r\n */\r\nexport function state_proxy_equality_mismatch(operator) {\r\n\tif (DEV) {\r\n\t\tconsole.warn(`%c[svelte] state_proxy_equality_mismatch\\n%cReactive \\`$state(...)\\` proxies and the values they proxy have different identities. Because of this, comparisons with \\`${operator}\\` will produce unexpected results\\nhttps://svelte.dev/e/state_proxy_equality_mismatch`, bold, normal);\r\n\t} else {\r\n\t\tconsole.warn(`https://svelte.dev/e/state_proxy_equality_mismatch`);\r\n\t}\r\n}\r\n\r\n/**\r\n * A `<svelte:boundary>` `reset` function only resets the boundary the first time it is called\r\n */\r\nexport function svelte_boundary_reset_noop() {\r\n\tif (DEV) {\r\n\t\tconsole.warn(`%c[svelte] svelte_boundary_reset_noop\\n%cA \\`<svelte:boundary>\\` \\`reset\\` function only resets the boundary the first time it is called\\nhttps://svelte.dev/e/svelte_boundary_reset_noop`, bold, normal);\r\n\t} else {\r\n\t\tconsole.warn(`https://svelte.dev/e/svelte_boundary_reset_noop`);\r\n\t}\r\n}\r\n\r\n/**\r\n * The `slide` transition does not work correctly for elements with `display: %value%`\r\n * @param {string} value\r\n */\r\nexport function transition_slide_display(value) {\r\n\tif (DEV) {\r\n\t\tconsole.warn(`%c[svelte] transition_slide_display\\n%cThe \\`slide\\` transition does not work correctly for elements with \\`display: ${value}\\`\\nhttps://svelte.dev/e/transition_slide_display`, bold, normal);\r\n\t} else {\r\n\t\tconsole.warn(`https://svelte.dev/e/transition_slide_display`);\r\n\t}\r\n}", "/** @import { TemplateNode } from '#client' */\r\n\r\nimport { COMMENT_NODE } from '#client/constants';\r\nimport {\r\n\tHYDRATION_END,\r\n\tHYDRATION_ERROR,\r\n\tHYDRATION_START,\r\n\tHYDRATION_START_ELSE\r\n} from '../../../constants.js';\r\nimport * as w from '../warnings.js';\r\nimport { get_next_sibling } from './operations.js';\r\n\r\n/**\r\n * Use this variable to guard everything related to hydration code so it can be treeshaken out\r\n * if the user doesn't use the `hydrate` method and these code paths are therefore not needed.\r\n */\r\nexport let hydrating = false;\r\n\r\n/** @param {boolean} value */\r\nexport function set_hydrating(value) {\r\n\thydrating = value;\r\n}\r\n\r\n/**\r\n * The node that is currently being hydrated. This starts out as the first node inside the opening\r\n * <!--[--> comment, and updates each time a component calls `$.child(...)` or `$.sibling(...)`.\r\n * When entering a block (e.g. `{#if ...}`), `hydrate_node` is the block opening comment; by the\r\n * time we leave the block it is the closing comment, which serves as the block's anchor.\r\n * @type {TemplateNode}\r\n */\r\nexport let hydrate_node;\r\n\r\n/** @param {TemplateNode} node */\r\nexport function set_hydrate_node(node) {\r\n\tif (node === null) {\r\n\t\tw.hydration_mismatch();\r\n\t\tthrow HYDRATION_ERROR;\r\n\t}\r\n\r\n\treturn (hydrate_node = node);\r\n}\r\n\r\nexport function hydrate_next() {\r\n\treturn set_hydrate_node(/** @type {TemplateNode} */ (get_next_sibling(hydrate_node)));\r\n}\r\n\r\n/** @param {TemplateNode} node */\r\nexport function reset(node) {\r\n\tif (!hydrating) return;\r\n\r\n\t// If the node has remaining siblings, something has gone wrong\r\n\tif (get_next_sibling(hydrate_node) !== null) {\r\n\t\tw.hydration_mismatch();\r\n\t\tthrow HYDRATION_ERROR;\r\n\t}\r\n\r\n\thydrate_node = node;\r\n}\r\n\r\n/**\r\n * @param {HTMLTemplateElement} template\r\n */\r\nexport function hydrate_template(template) {\r\n\tif (hydrating) {\r\n\t\t// @ts-expect-error TemplateNode doesn't include DocumentFragment, but it's actually fine\r\n\t\thydrate_node = template.content;\r\n\t}\r\n}\r\n\r\nexport function next(count = 1) {\r\n\tif (hydrating) {\r\n\t\tvar i = count;\r\n\t\tvar node = hydrate_node;\r\n\r\n\t\twhile (i--) {\r\n\t\t\tnode = /** @type {TemplateNode} */ (get_next_sibling(node));\r\n\t\t}\r\n\r\n\t\thydrate_node = node;\r\n\t}\r\n}\r\n\r\n/**\r\n * Removes all nodes starting at `hydrate_node` up until the next hydration end comment\r\n */\r\nexport function remove_nodes() {\r\n\tvar depth = 0;\r\n\tvar node = hydrate_node;\r\n\r\n\twhile (true) {\r\n\t\tif (node.nodeType === COMMENT_NODE) {\r\n\t\t\tvar data = /** @type {Comment} */ (node).data;\r\n\r\n\t\t\tif (data === HYDRATION_END) {\r\n\t\t\t\tif (depth === 0) return node;\r\n\t\t\t\tdepth -= 1;\r\n\t\t\t} else if (data === HYDRATION_START || data === HYDRATION_START_ELSE) {\r\n\t\t\t\tdepth += 1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar next = /** @type {TemplateNode} */ (get_next_sibling(node));\r\n\t\tnode.remove();\r\n\t\tnode = next;\r\n\t}\r\n}\r\n\r\n/**\r\n *\r\n * @param {TemplateNode} node\r\n */\r\nexport function read_hydration_instruction(node) {\r\n\tif (!node || node.nodeType !== COMMENT_NODE) {\r\n\t\tw.hydration_mismatch();\r\n\t\tthrow HYDRATION_ERROR;\r\n\t}\r\n\r\n\treturn /** @type {Comment} */ (node).data;\r\n}\r\n", "/** @import { Equals } from '#client' */\r\n\r\n/** @type {Equals} */\r\nexport function equals(value) {\r\n\treturn value === this.v;\r\n}\r\n\r\n/**\r\n * @param {unknown} a\r\n * @param {unknown} b\r\n * @returns {boolean}\r\n */\r\nexport function safe_not_equal(a, b) {\r\n\treturn a != a\r\n\t\t? b == b\r\n\t\t: a !== b || (a !== null && typeof a === 'object') || typeof a === 'function';\r\n}\r\n\r\n/**\r\n * @param {unknown} a\r\n * @param {unknown} b\r\n * @returns {boolean}\r\n */\r\nexport function not_equal(a, b) {\r\n\treturn a !== b;\r\n}\r\n\r\n/** @type {Equals} */\r\nexport function safe_equals(value) {\r\n\treturn !safe_not_equal(value, this.v);\r\n}\r\n", "export let async_mode_flag = false;\r\nexport let legacy_mode_flag = false;\r\nexport let tracing_mode_flag = false;\r\n\r\nexport function enable_async_mode_flag() {\r\n\tasync_mode_flag = true;\r\n}\r\n\r\n/** ONLY USE THIS DURING TESTING */\r\nexport function disable_async_mode_flag() {\r\n\tasync_mode_flag = false;\r\n}\r\n\r\nexport function enable_legacy_mode_flag() {\r\n\tlegacy_mode_flag = true;\r\n}\r\n\r\nexport function enable_tracing_mode_flag() {\r\n\ttracing_mode_flag = true;\r\n}\r\n", "/** @import { Derived, Reaction, Value } from '#client' */\r\nimport { UNINITIALIZED } from '../../../constants.js';\r\nimport { snapshot } from '../../shared/clone.js';\r\nimport { define_property } from '../../shared/utils.js';\r\nimport { DERIVED, ASYNC, PROXY_PATH_SYMBOL, STATE_SYMBOL } from '#client/constants';\r\nimport { effect_tracking } from '../reactivity/effects.js';\r\nimport { active_reaction, untrack } from '../runtime.js';\r\n\r\n/**\r\n * @typedef {{\r\n *   traces: Error[];\r\n * }} TraceEntry\r\n */\r\n\r\n/** @type {{ reaction: Reaction | null, entries: Map<Value, TraceEntry> } | null} */\r\nexport let tracing_expressions = null;\r\n\r\n/**\r\n * @param {Value} signal\r\n * @param {TraceEntry} [entry]\r\n */\r\nfunction log_entry(signal, entry) {\r\n\tconst value = signal.v;\r\n\r\n\tif (value === UNINITIALIZED) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst type = get_type(signal);\r\n\tconst current_reaction = /** @type {Reaction} */ (active_reaction);\r\n\tconst dirty = signal.wv > current_reaction.wv || current_reaction.wv === 0;\r\n\tconst style = dirty\r\n\t\t? 'color: CornflowerBlue; font-weight: bold'\r\n\t\t: 'color: grey; font-weight: normal';\r\n\r\n\t// eslint-disable-next-line no-console\r\n\tconsole.groupCollapsed(\r\n\t\tsignal.label ? `%c${type}%c ${signal.label}` : `%c${type}%c`,\r\n\t\tstyle,\r\n\t\tdirty ? 'font-weight: normal' : style,\r\n\t\ttypeof value === 'object' && value !== null && STATE_SYMBOL in value\r\n\t\t\t? snapshot(value, true)\r\n\t\t\t: value\r\n\t);\r\n\r\n\tif (type === '$derived') {\r\n\t\tconst deps = new Set(/** @type {Derived} */ (signal).deps);\r\n\t\tfor (const dep of deps) {\r\n\t\t\tlog_entry(dep);\r\n\t\t}\r\n\t}\r\n\r\n\tif (signal.created) {\r\n\t\t// eslint-disable-next-line no-console\r\n\t\tconsole.log(signal.created);\r\n\t}\r\n\r\n\tif (dirty && signal.updated) {\r\n\t\tfor (const updated of signal.updated.values()) {\r\n\t\t\t// eslint-disable-next-line no-console\r\n\t\t\tconsole.log(updated.error);\r\n\t\t}\r\n\t}\r\n\r\n\tif (entry) {\r\n\t\tfor (var trace of entry.traces) {\r\n\t\t\t// eslint-disable-next-line no-console\r\n\t\t\tconsole.log(trace);\r\n\t\t}\r\n\t}\r\n\r\n\t// eslint-disable-next-line no-console\r\n\tconsole.groupEnd();\r\n}\r\n\r\n/**\r\n * @param {Value} signal\r\n * @returns {'$state' | '$derived' | 'store'}\r\n */\r\nfunction get_type(signal) {\r\n\tif ((signal.f & (DERIVED | ASYNC)) !== 0) return '$derived';\r\n\treturn signal.label?.startsWith('$') ? 'store' : '$state';\r\n}\r\n\r\n/**\r\n * @template T\r\n * @param {() => string} label\r\n * @param {() => T} fn\r\n */\r\nexport function trace(label, fn) {\r\n\tvar previously_tracing_expressions = tracing_expressions;\r\n\r\n\ttry {\r\n\t\ttracing_expressions = { entries: new Map(), reaction: active_reaction };\r\n\r\n\t\tvar start = performance.now();\r\n\t\tvar value = fn();\r\n\t\tvar time = (performance.now() - start).toFixed(2);\r\n\r\n\t\tvar prefix = untrack(label);\r\n\r\n\t\tif (!effect_tracking()) {\r\n\t\t\t// eslint-disable-next-line no-console\r\n\t\t\tconsole.log(`${prefix} %cran outside of an effect (${time}ms)`, 'color: grey');\r\n\t\t} else if (tracing_expressions.entries.size === 0) {\r\n\t\t\t// eslint-disable-next-line no-console\r\n\t\t\tconsole.log(`${prefix} %cno reactive dependencies (${time}ms)`, 'color: grey');\r\n\t\t} else {\r\n\t\t\t// eslint-disable-next-line no-console\r\n\t\t\tconsole.group(`${prefix} %c(${time}ms)`, 'color: grey');\r\n\r\n\t\t\tvar entries = tracing_expressions.entries;\r\n\r\n\t\t\tuntrack(() => {\r\n\t\t\t\tfor (const [signal, traces] of entries) {\r\n\t\t\t\t\tlog_entry(signal, traces);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\ttracing_expressions = null;\r\n\r\n\t\t\t// eslint-disable-next-line no-console\r\n\t\t\tconsole.groupEnd();\r\n\t\t}\r\n\r\n\t\treturn value;\r\n\t} finally {\r\n\t\ttracing_expressions = previously_tracing_expressions;\r\n\t}\r\n}\r\n\r\n/**\r\n * @param {string} label\r\n * @returns {Error & { stack: string } | null}\r\n */\r\nexport function get_stack(label) {\r\n\tlet error = Error();\r\n\tconst stack = error.stack;\r\n\r\n\tif (!stack) return null;\r\n\r\n\tconst lines = stack.split('\\n');\r\n\tconst new_lines = ['\\n'];\r\n\r\n\tfor (let i = 0; i < lines.length; i++) {\r\n\t\tconst line = lines[i];\r\n\r\n\t\tif (line === 'Error') {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tif (line.includes('validate_each_keys')) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tif (line.includes('svelte/src/internal')) {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tnew_lines.push(line);\r\n\t}\r\n\r\n\tif (new_lines.length === 1) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\tdefine_property(error, 'stack', {\r\n\t\tvalue: new_lines.join('\\n')\r\n\t});\r\n\r\n\tdefine_property(error, 'name', {\r\n\t\t// 'Error' suffix is required for stack traces to be rendered properly\r\n\t\tvalue: `${label}Error`\r\n\t});\r\n\r\n\treturn /** @type {Error & { stack: string }} */ (error);\r\n}\r\n\r\n/**\r\n * @param {Value} source\r\n * @param {string} label\r\n */\r\nexport function tag(source, label) {\r\n\tsource.label = label;\r\n\ttag_proxy(source.v, label);\r\n\r\n\treturn source;\r\n}\r\n\r\n/**\r\n * @param {unknown} value\r\n * @param {string} label\r\n */\r\nexport function tag_proxy(value, label) {\r\n\t// @ts-expect-error\r\n\tvalue?.[PROXY_PATH_SYMBOL]?.(label);\r\n\treturn value;\r\n}\r\n\r\n/**\r\n * @param {unknown} value\r\n */\r\nexport function label(value) {\r\n\tif (typeof value === 'symbol') return `Symbol(${value.description})`;\r\n\tif (typeof value === 'function') return '<function>';\r\n\tif (typeof value === 'object' && value) return '<object>';\r\n\treturn String(value);\r\n}\r\n", "/** @import { ComponentContext, DevStackEntry, Effect } from '#client' */\r\nimport { DEV } from 'esm-env';\r\nimport * as e from './errors.js';\r\nimport { active_effect, active_reaction } from './runtime.js';\r\nimport { create_user_effect } from './reactivity/effects.js';\r\nimport { async_mode_flag, legacy_mode_flag } from '../flags/index.js';\r\nimport { FILENAME } from '../../constants.js';\r\nimport { BRANCH_EFFECT, EFFECT_RAN } from './constants.js';\r\n\r\n/** @type {ComponentContext | null} */\r\nexport let component_context = null;\r\n\r\n/** @param {ComponentContext | null} context */\r\nexport function set_component_context(context) {\r\n\tcomponent_context = context;\r\n}\r\n\r\n/** @type {DevStackEntry | null} */\r\nexport let dev_stack = null;\r\n\r\n/** @param {DevStackEntry | null} stack */\r\nexport function set_dev_stack(stack) {\r\n\tdev_stack = stack;\r\n}\r\n\r\n/**\r\n * Execute a callback with a new dev stack entry\r\n * @param {() => any} callback - Function to execute\r\n * @param {DevStackEntry['type']} type - Type of block/component\r\n * @param {any} component - Component function\r\n * @param {number} line - Line number\r\n * @param {number} column - Column number\r\n * @param {Record<string, any>} [additional] - Any additional properties to add to the dev stack entry\r\n * @returns {any}\r\n */\r\nexport function add_svelte_meta(callback, type, component, line, column, additional) {\r\n\tconst parent = dev_stack;\r\n\r\n\tdev_stack = {\r\n\t\ttype,\r\n\t\tfile: component[FILENAME],\r\n\t\tline,\r\n\t\tcolumn,\r\n\t\tparent,\r\n\t\t...additional\r\n\t};\r\n\r\n\ttry {\r\n\t\treturn callback();\r\n\t} finally {\r\n\t\tdev_stack = parent;\r\n\t}\r\n}\r\n\r\n/**\r\n * The current component function. Different from current component context:\r\n * ```html\r\n * <!-- App.svelte -->\r\n * <Foo>\r\n *   <Bar /> <!-- context == Foo.svelte, function == App.svelte -->\r\n * </Foo>\r\n * ```\r\n * @type {ComponentContext['function']}\r\n */\r\nexport let dev_current_component_function = null;\r\n\r\n/** @param {ComponentContext['function']} fn */\r\nexport function set_dev_current_component_function(fn) {\r\n\tdev_current_component_function = fn;\r\n}\r\n\r\n/**\r\n * Retrieves the context that belongs to the closest parent component with the specified `key`.\r\n * Must be called during component initialisation.\r\n *\r\n * @template T\r\n * @param {any} key\r\n * @returns {T}\r\n */\r\nexport function getContext(key) {\r\n\tconst context_map = get_or_init_context_map('getContext');\r\n\tconst result = /** @type {T} */ (context_map.get(key));\r\n\treturn result;\r\n}\r\n\r\n/**\r\n * Associates an arbitrary `context` object with the current component and the specified `key`\r\n * and returns that object. The context is then available to children of the component\r\n * (including slotted content) with `getContext`.\r\n *\r\n * Like lifecycle functions, this must be called during component initialisation.\r\n *\r\n * @template T\r\n * @param {any} key\r\n * @param {T} context\r\n * @returns {T}\r\n */\r\nexport function setContext(key, context) {\r\n\tconst context_map = get_or_init_context_map('setContext');\r\n\r\n\tif (async_mode_flag) {\r\n\t\tvar flags = /** @type {Effect} */ (active_effect).f;\r\n\t\tvar valid = !active_reaction && (flags & BRANCH_EFFECT) !== 0 && (flags & EFFECT_RAN) === 0;\r\n\r\n\t\tif (!valid) {\r\n\t\t\te.set_context_after_init();\r\n\t\t}\r\n\t}\r\n\r\n\tcontext_map.set(key, context);\r\n\treturn context;\r\n}\r\n\r\n/**\r\n * Checks whether a given `key` has been set in the context of a parent component.\r\n * Must be called during component initialisation.\r\n *\r\n * @param {any} key\r\n * @returns {boolean}\r\n */\r\nexport function hasContext(key) {\r\n\tconst context_map = get_or_init_context_map('hasContext');\r\n\treturn context_map.has(key);\r\n}\r\n\r\n/**\r\n * Retrieves the whole context map that belongs to the closest parent component.\r\n * Must be called during component initialisation. Useful, for example, if you\r\n * programmatically create a component and want to pass the existing context to it.\r\n *\r\n * @template {Map<any, any>} [T=Map<any, any>]\r\n * @returns {T}\r\n */\r\nexport function getAllContexts() {\r\n\tconst context_map = get_or_init_context_map('getAllContexts');\r\n\treturn /** @type {T} */ (context_map);\r\n}\r\n\r\n/**\r\n * @param {Record<string, unknown>} props\r\n * @param {any} runes\r\n * @param {Function} [fn]\r\n * @returns {void}\r\n */\r\nexport function push(props, runes = false, fn) {\r\n\tcomponent_context = {\r\n\t\tp: component_context,\r\n\t\tc: null,\r\n\t\te: null,\r\n\t\ts: props,\r\n\t\tx: null,\r\n\t\tl: legacy_mode_flag && !runes ? { s: null, u: null, $: [] } : null\r\n\t};\r\n\r\n\tif (DEV) {\r\n\t\t// component function\r\n\t\tcomponent_context.function = fn;\r\n\t\tdev_current_component_function = fn;\r\n\t}\r\n}\r\n\r\n/**\r\n * @template {Record<string, any>} T\r\n * @param {T} [component]\r\n * @returns {T}\r\n */\r\nexport function pop(component) {\r\n\tvar context = /** @type {ComponentContext} */ (component_context);\r\n\tvar effects = context.e;\r\n\r\n\tif (effects !== null) {\r\n\t\tcontext.e = null;\r\n\r\n\t\tfor (var fn of effects) {\r\n\t\t\tcreate_user_effect(fn);\r\n\t\t}\r\n\t}\r\n\r\n\tif (component !== undefined) {\r\n\t\tcontext.x = component;\r\n\t}\r\n\r\n\tcomponent_context = context.p;\r\n\r\n\tif (DEV) {\r\n\t\tdev_current_component_function = component_context?.function ?? null;\r\n\t}\r\n\r\n\treturn component ?? /** @type {T} */ ({});\r\n}\r\n\r\n/** @returns {boolean} */\r\nexport function is_runes() {\r\n\treturn !legacy_mode_flag || (component_context !== null && component_context.l === null);\r\n}\r\n\r\n/**\r\n * @param {string} name\r\n * @returns {Map<unknown, unknown>}\r\n */\r\nfunction get_or_init_context_map(name) {\r\n\tif (component_context === null) {\r\n\t\te.lifecycle_outside_component(name);\r\n\t}\r\n\r\n\treturn (component_context.c ??= new Map(get_parent_context(component_context) || undefined));\r\n}\r\n\r\n/**\r\n * @param {ComponentContext} component_context\r\n * @returns {Map<unknown, unknown> | null}\r\n */\r\nfunction get_parent_context(component_context) {\r\n\tlet parent = component_context.p;\r\n\twhile (parent !== null) {\r\n\t\tconst context_map = parent.c;\r\n\t\tif (context_map !== null) {\r\n\t\t\treturn context_map;\r\n\t\t}\r\n\t\tparent = parent.p;\r\n\t}\r\n\treturn null;\r\n}\r\n", "/** @import { Derived, Effect } from '#client' */\r\n/** @import { Boundary } from './dom/blocks/boundary.js' */\r\nimport { DEV } from 'esm-env';\r\nimport { FILENAME } from '../../constants.js';\r\nimport { is_firefox } from './dom/operations.js';\r\nimport { ERROR_VALUE, BOUNDARY_EFFECT, EFFECT_RAN } from './constants.js';\r\nimport { define_property, get_descriptor } from '../shared/utils.js';\r\nimport { active_effect, active_reaction } from './runtime.js';\r\n\r\nconst adjustments = new WeakMap();\r\n\r\n/**\r\n * @param {unknown} error\r\n */\r\nexport function handle_error(error) {\r\n\tvar effect = active_effect;\r\n\r\n\t// for unowned deriveds, don't throw until we read the value\r\n\tif (effect === null) {\r\n\t\t/** @type {Derived} */ (active_reaction).f |= ERROR_VALUE;\r\n\t\treturn error;\r\n\t}\r\n\r\n\tif (DEV && error instanceof Error && !adjustments.has(error)) {\r\n\t\tadjustments.set(error, get_adjustments(error, effect));\r\n\t}\r\n\r\n\tif ((effect.f & EFFECT_RAN) === 0) {\r\n\t\t// if the error occurred while creating this subtree, we let it\r\n\t\t// bubble up until it hits a boundary that can handle it\r\n\t\tif ((effect.f & BOUNDARY_EFFECT) === 0) {\r\n\t\t\tif (!effect.parent && error instanceof Error) {\r\n\t\t\t\tapply_adjustments(error);\r\n\t\t\t}\r\n\r\n\t\t\tthrow error;\r\n\t\t}\r\n\r\n\t\t/** @type {Boundary} */ (effect.b).error(error);\r\n\t} else {\r\n\t\t// otherwise we bubble up the effect tree ourselves\r\n\t\tinvoke_error_boundary(error, effect);\r\n\t}\r\n}\r\n\r\n/**\r\n * @param {unknown} error\r\n * @param {Effect | null} effect\r\n */\r\nexport function invoke_error_boundary(error, effect) {\r\n\twhile (effect !== null) {\r\n\t\tif ((effect.f & BOUNDARY_EFFECT) !== 0) {\r\n\t\t\ttry {\r\n\t\t\t\t/** @type {Boundary} */ (effect.b).error(error);\r\n\t\t\t\treturn;\r\n\t\t\t} catch (e) {\r\n\t\t\t\terror = e;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\teffect = effect.parent;\r\n\t}\r\n\r\n\tif (error instanceof Error) {\r\n\t\tapply_adjustments(error);\r\n\t}\r\n\r\n\tthrow error;\r\n}\r\n\r\n/**\r\n * Add useful information to the error message/stack in development\r\n * @param {Error} error\r\n * @param {Effect} effect\r\n */\r\nfunction get_adjustments(error, effect) {\r\n\tconst message_descriptor = get_descriptor(error, 'message');\r\n\r\n\t// if the message was already changed and it's not configurable we can't change it\r\n\t// or it will throw a different error swallowing the original error\r\n\tif (message_descriptor && !message_descriptor.configurable) return;\r\n\r\n\tvar indent = is_firefox ? '  ' : '\\t';\r\n\tvar component_stack = `\\n${indent}in ${effect.fn?.name || '<unknown>'}`;\r\n\tvar context = effect.ctx;\r\n\r\n\twhile (context !== null) {\r\n\t\tcomponent_stack += `\\n${indent}in ${context.function?.[FILENAME].split('/').pop()}`;\r\n\t\tcontext = context.p;\r\n\t}\r\n\r\n\treturn {\r\n\t\tmessage: error.message + `\\n${component_stack}\\n`,\r\n\t\tstack: error.stack\r\n\t\t\t?.split('\\n')\r\n\t\t\t.filter((line) => !line.includes('svelte/src/internal'))\r\n\t\t\t.join('\\n')\r\n\t};\r\n}\r\n\r\n/**\r\n * @param {Error} error\r\n */\r\nfunction apply_adjustments(error) {\r\n\tconst adjusted = adjustments.get(error);\r\n\r\n\tif (adjusted) {\r\n\t\tdefine_property(error, 'message', {\r\n\t\t\tvalue: adjusted.message\r\n\t\t});\r\n\r\n\t\tdefine_property(error, 'stack', {\r\n\t\t\tvalue: adjusted.stack\r\n\t\t});\r\n\t}\r\n}\r\n", "import { run_all } from '../../shared/utils.js';\r\n\r\n// Fallback for when requestIdleCallback is not available\r\nconst request_idle_callback =\r\n\ttypeof requestIdleCallback === 'undefined'\r\n\t\t? (/** @type {() => void} */ cb) => setTimeout(cb, 1)\r\n\t\t: requestIdleCallback;\r\n\r\n/** @type {Array<() => void>} */\r\nlet micro_tasks = [];\r\n\r\n/** @type {Array<() => void>} */\r\nlet idle_tasks = [];\r\n\r\nfunction run_micro_tasks() {\r\n\tvar tasks = micro_tasks;\r\n\tmicro_tasks = [];\r\n\trun_all(tasks);\r\n}\r\n\r\nfunction run_idle_tasks() {\r\n\tvar tasks = idle_tasks;\r\n\tidle_tasks = [];\r\n\trun_all(tasks);\r\n}\r\n\r\n/**\r\n * @param {() => void} fn\r\n */\r\nexport function queue_micro_task(fn) {\r\n\tif (micro_tasks.length === 0) {\r\n\t\tqueueMicrotask(run_micro_tasks);\r\n\t}\r\n\r\n\tmicro_tasks.push(fn);\r\n}\r\n\r\n/**\r\n * @param {() => void} fn\r\n */\r\nexport function queue_idle_task(fn) {\r\n\tif (idle_tasks.length === 0) {\r\n\t\trequest_idle_callback(run_idle_tasks);\r\n\t}\r\n\r\n\tidle_tasks.push(fn);\r\n}\r\n\r\n/**\r\n * Synchronously run any queued tasks.\r\n */\r\nexport function flush_tasks() {\r\n\tif (micro_tasks.length > 0) {\r\n\t\trun_micro_tasks();\r\n\t}\r\n\r\n\tif (idle_tasks.length > 0) {\r\n\t\trun_idle_tasks();\r\n\t}\r\n}\r\n", "import { get, tick, untrack } from '../internal/client/runtime.js';\r\nimport { effect_tracking, render_effect } from '../internal/client/reactivity/effects.js';\r\nimport { source, increment } from '../internal/client/reactivity/sources.js';\r\nimport { tag } from '../internal/client/dev/tracing.js';\r\nimport { DEV } from 'esm-env';\r\nimport { queue_micro_task } from '../internal/client/dom/task.js';\r\n\r\n/**\r\n * Returns a `subscribe` function that integrates external event-based systems with Svelte's reactivity.\r\n * It's particularly useful for integrating with web APIs like `MediaQuery`, `IntersectionObserver`, or `WebSocket`.\r\n *\r\n * If `subscribe` is called inside an effect (including indirectly, for example inside a getter),\r\n * the `start` callback will be called with an `update` function. Whenever `update` is called, the effect re-runs.\r\n *\r\n * If `start` returns a cleanup function, it will be called when the effect is destroyed.\r\n *\r\n * If `subscribe` is called in multiple effects, `start` will only be called once as long as the effects\r\n * are active, and the returned teardown function will only be called when all effects are destroyed.\r\n *\r\n * It's best understood with an example. Here's an implementation of [`MediaQuery`](https://svelte.dev/docs/svelte/svelte-reactivity#MediaQuery):\r\n *\r\n * ```js\r\n * import { createSubscriber } from 'svelte/reactivity';\r\n * import { on } from 'svelte/events';\r\n *\r\n * export class MediaQuery {\r\n * \t#query;\r\n * \t#subscribe;\r\n *\r\n * \tconstructor(query) {\r\n * \t\tthis.#query = window.matchMedia(`(${query})`);\r\n *\r\n * \t\tthis.#subscribe = createSubscriber((update) => {\r\n * \t\t\t// when the `change` event occurs, re-run any effects that read `this.current`\r\n * \t\t\tconst off = on(this.#query, 'change', update);\r\n *\r\n * \t\t\t// stop listening when all the effects are destroyed\r\n * \t\t\treturn () => off();\r\n * \t\t});\r\n * \t}\r\n *\r\n * \tget current() {\r\n * \t\t// This makes the getter reactive, if read in an effect\r\n * \t\tthis.#subscribe();\r\n *\r\n * \t\t// Return the current state of the query, whether or not we're in an effect\r\n * \t\treturn this.#query.matches;\r\n * \t}\r\n * }\r\n * ```\r\n * @param {(update: () => void) => (() => void) | void} start\r\n * @since 5.7.0\r\n */\r\nexport function createSubscriber(start) {\r\n\tlet subscribers = 0;\r\n\tlet version = source(0);\r\n\t/** @type {(() => void) | void} */\r\n\tlet stop;\r\n\r\n\tif (DEV) {\r\n\t\ttag(version, 'createSubscriber version');\r\n\t}\r\n\r\n\treturn () => {\r\n\t\tif (effect_tracking()) {\r\n\t\t\tget(version);\r\n\r\n\t\t\trender_effect(() => {\r\n\t\t\t\tif (subscribers === 0) {\r\n\t\t\t\t\tstop = untrack(() => start(() => increment(version)));\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsubscribers += 1;\r\n\r\n\t\t\t\treturn () => {\r\n\t\t\t\t\tqueue_micro_task(() => {\r\n\t\t\t\t\t\t// Only count down after a microtask, else we would reach 0 before our own render effect reruns,\r\n\t\t\t\t\t\t// but reach 1 again when the tick callback of the prior teardown runs. That would mean we\r\n\t\t\t\t\t\t// re-subcribe unnecessarily and create a memory leak because the old subscription is never cleaned up.\r\n\t\t\t\t\t\tsubscribers -= 1;\r\n\r\n\t\t\t\t\t\tif (subscribers === 0) {\r\n\t\t\t\t\t\t\tstop?.();\r\n\t\t\t\t\t\t\tstop = undefined;\r\n\t\t\t\t\t\t\t// Increment the version to ensure any dependent deriveds are marked dirty when the subscription is picked up again later.\r\n\t\t\t\t\t\t\t// If we didn't do this then the comparison of write versions would determine that the derived has a later version than\r\n\t\t\t\t\t\t\t// the subscriber, and it would not be re-run.\r\n\t\t\t\t\t\t\tincrement(version);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t};\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n}\r\n", "/** @import { Effect, Source, TemplateNode, } from '#client' */\r\nimport {\r\n\tBOUNDARY_EFFECT,\r\n\tEFFECT_PRESERVED,\r\n\tEFFECT_RAN,\r\n\tEFFECT_TRANSPARENT\r\n} from '#client/constants';\r\nimport { component_context, set_component_context } from '../../context.js';\r\nimport { handle_error, invoke_error_boundary } from '../../error-handling.js';\r\nimport { block, branch, destroy_effect, pause_effect } from '../../reactivity/effects.js';\r\nimport {\r\n\tactive_effect,\r\n\tactive_reaction,\r\n\tget,\r\n\tset_active_effect,\r\n\tset_active_reaction\r\n} from '../../runtime.js';\r\nimport {\r\n\thydrate_next,\r\n\thydrate_node,\r\n\thydrating,\r\n\tnext,\r\n\tremove_nodes,\r\n\tset_hydrate_node\r\n} from '../hydration.js';\r\nimport { get_next_sibling } from '../operations.js';\r\nimport { queue_micro_task } from '../task.js';\r\nimport * as e from '../../errors.js';\r\nimport * as w from '../../warnings.js';\r\nimport { DEV } from 'esm-env';\r\nimport { Batch, effect_pending_updates } from '../../reactivity/batch.js';\r\nimport { internal_set, source } from '../../reactivity/sources.js';\r\nimport { tag } from '../../dev/tracing.js';\r\nimport { createSubscriber } from '../../../../reactivity/create-subscriber.js';\r\n\r\n/**\r\n * @typedef {{\r\n * \t onerror?: (error: unknown, reset: () => void) => void;\r\n *   failed?: (anchor: Node, error: () => unknown, reset: () => () => void) => void;\r\n *   pending?: (anchor: Node) => void;\r\n * }} BoundaryProps\r\n */\r\n\r\nvar flags = EFFECT_TRANSPARENT | EFFECT_PRESERVED | BOUNDARY_EFFECT;\r\n\r\n/**\r\n * @param {TemplateNode} node\r\n * @param {BoundaryProps} props\r\n * @param {((anchor: Node) => void)} children\r\n * @returns {void}\r\n */\r\nexport function boundary(node, props, children) {\r\n\tnew Boundary(node, props, children);\r\n}\r\n\r\nexport class Boundary {\r\n\tpending = false;\r\n\r\n\t/** @type {Boundary | null} */\r\n\tparent;\r\n\r\n\t/** @type {TemplateNode} */\r\n\t#anchor;\r\n\r\n\t/** @type {TemplateNode} */\r\n\t#hydrate_open;\r\n\r\n\t/** @type {BoundaryProps} */\r\n\t#props;\r\n\r\n\t/** @type {((anchor: Node) => void)} */\r\n\t#children;\r\n\r\n\t/** @type {Effect} */\r\n\t#effect;\r\n\r\n\t/** @type {Effect | null} */\r\n\t#main_effect = null;\r\n\r\n\t/** @type {Effect | null} */\r\n\t#pending_effect = null;\r\n\r\n\t/** @type {Effect | null} */\r\n\t#failed_effect = null;\r\n\r\n\t/** @type {DocumentFragment | null} */\r\n\t#offscreen_fragment = null;\r\n\r\n\t#pending_count = 0;\r\n\t#is_creating_fallback = false;\r\n\r\n\t/**\r\n\t * A source containing the number of pending async deriveds/expressions.\r\n\t * Only created if `$effect.pending()` is used inside the boundary,\r\n\t * otherwise updating the source results in needless `Batch.ensure()`\r\n\t * calls followed by no-op flushes\r\n\t * @type {Source<number> | null}\r\n\t */\r\n\t#effect_pending = null;\r\n\r\n\t#effect_pending_update = () => {\r\n\t\tif (this.#effect_pending) {\r\n\t\t\tinternal_set(this.#effect_pending, this.#pending_count);\r\n\t\t}\r\n\t};\r\n\r\n\t#effect_pending_subscriber = createSubscriber(() => {\r\n\t\tthis.#effect_pending = source(this.#pending_count);\r\n\r\n\t\tif (DEV) {\r\n\t\t\ttag(this.#effect_pending, '$effect.pending()');\r\n\t\t}\r\n\r\n\t\treturn () => {\r\n\t\t\tthis.#effect_pending = null;\r\n\t\t};\r\n\t});\r\n\r\n\t/**\r\n\t * @param {TemplateNode} node\r\n\t * @param {BoundaryProps} props\r\n\t * @param {((anchor: Node) => void)} children\r\n\t */\r\n\tconstructor(node, props, children) {\r\n\t\tthis.#anchor = node;\r\n\t\tthis.#props = props;\r\n\t\tthis.#children = children;\r\n\r\n\t\tthis.#hydrate_open = hydrate_node;\r\n\r\n\t\tthis.parent = /** @type {Effect} */ (active_effect).b;\r\n\r\n\t\tthis.pending = !!this.#props.pending;\r\n\r\n\t\tthis.#effect = block(() => {\r\n\t\t\t/** @type {Effect} */ (active_effect).b = this;\r\n\r\n\t\t\tif (hydrating) {\r\n\t\t\t\thydrate_next();\r\n\t\t\t}\r\n\r\n\t\t\tconst pending = this.#props.pending;\r\n\r\n\t\t\tif (hydrating && pending) {\r\n\t\t\t\tthis.#pending_effect = branch(() => pending(this.#anchor));\r\n\r\n\t\t\t\t// future work: when we have some form of async SSR, we will\r\n\t\t\t\t// need to use hydration boundary comments to report whether\r\n\t\t\t\t// the pending or main block was rendered for a given\r\n\t\t\t\t// boundary, and hydrate accordingly\r\n\t\t\t\tBatch.enqueue(() => {\r\n\t\t\t\t\tthis.#main_effect = this.#run(() => {\r\n\t\t\t\t\t\tBatch.ensure();\r\n\t\t\t\t\t\treturn branch(() => this.#children(this.#anchor));\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tif (this.#pending_count > 0) {\r\n\t\t\t\t\t\tthis.#show_pending_snippet();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tpause_effect(/** @type {Effect} */ (this.#pending_effect), () => {\r\n\t\t\t\t\t\t\tthis.#pending_effect = null;\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tthis.pending = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tthis.#main_effect = branch(() => children(this.#anchor));\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\tthis.error(error);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.#pending_count > 0) {\r\n\t\t\t\t\tthis.#show_pending_snippet();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.pending = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}, flags);\r\n\r\n\t\tif (hydrating) {\r\n\t\t\tthis.#anchor = hydrate_node;\r\n\t\t}\r\n\t}\r\n\r\n\thas_pending_snippet() {\r\n\t\treturn !!this.#props.pending;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {() => Effect | null} fn\r\n\t */\r\n\t#run(fn) {\r\n\t\tvar previous_effect = active_effect;\r\n\t\tvar previous_reaction = active_reaction;\r\n\t\tvar previous_ctx = component_context;\r\n\r\n\t\tset_active_effect(this.#effect);\r\n\t\tset_active_reaction(this.#effect);\r\n\t\tset_component_context(this.#effect.ctx);\r\n\r\n\t\ttry {\r\n\t\t\treturn fn();\r\n\t\t} catch (e) {\r\n\t\t\thandle_error(e);\r\n\t\t\treturn null;\r\n\t\t} finally {\r\n\t\t\tset_active_effect(previous_effect);\r\n\t\t\tset_active_reaction(previous_reaction);\r\n\t\t\tset_component_context(previous_ctx);\r\n\t\t}\r\n\t}\r\n\r\n\t#show_pending_snippet() {\r\n\t\tconst pending = /** @type {(anchor: Node) => void} */ (this.#props.pending);\r\n\r\n\t\tif (this.#main_effect !== null) {\r\n\t\t\tthis.#offscreen_fragment = document.createDocumentFragment();\r\n\t\t\tmove_effect(this.#main_effect, this.#offscreen_fragment);\r\n\t\t}\r\n\r\n\t\tif (this.#pending_effect === null) {\r\n\t\t\tthis.#pending_effect = branch(() => pending(this.#anchor));\r\n\t\t}\r\n\t}\r\n\r\n\t/** @param {1 | -1} d */\r\n\t#update_pending_count(d) {\r\n\t\tthis.#pending_count += d;\r\n\r\n\t\tif (this.#pending_count === 0) {\r\n\t\t\tthis.pending = false;\r\n\r\n\t\t\tif (this.#pending_effect) {\r\n\t\t\t\tpause_effect(this.#pending_effect, () => {\r\n\t\t\t\t\tthis.#pending_effect = null;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this.#offscreen_fragment) {\r\n\t\t\t\tthis.#anchor.before(this.#offscreen_fragment);\r\n\t\t\t\tthis.#offscreen_fragment = null;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/** @param {1 | -1} d */\r\n\tupdate_pending_count(d) {\r\n\t\tif (this.has_pending_snippet()) {\r\n\t\t\tthis.#update_pending_count(d);\r\n\t\t} else if (this.parent) {\r\n\t\t\tthis.parent.#update_pending_count(d);\r\n\t\t}\r\n\r\n\t\teffect_pending_updates.add(this.#effect_pending_update);\r\n\t}\r\n\r\n\tget_effect_pending() {\r\n\t\tthis.#effect_pending_subscriber();\r\n\t\treturn get(/** @type {Source<number>} */ (this.#effect_pending));\r\n\t}\r\n\r\n\t/** @param {unknown} error */\r\n\terror(error) {\r\n\t\tvar onerror = this.#props.onerror;\r\n\t\tlet failed = this.#props.failed;\r\n\r\n\t\tif (this.#main_effect) {\r\n\t\t\tdestroy_effect(this.#main_effect);\r\n\t\t\tthis.#main_effect = null;\r\n\t\t}\r\n\r\n\t\tif (this.#pending_effect) {\r\n\t\t\tdestroy_effect(this.#pending_effect);\r\n\t\t\tthis.#pending_effect = null;\r\n\t\t}\r\n\r\n\t\tif (this.#failed_effect) {\r\n\t\t\tdestroy_effect(this.#failed_effect);\r\n\t\t\tthis.#failed_effect = null;\r\n\t\t}\r\n\r\n\t\tif (hydrating) {\r\n\t\t\tset_hydrate_node(this.#hydrate_open);\r\n\t\t\tnext();\r\n\t\t\tset_hydrate_node(remove_nodes());\r\n\t\t}\r\n\r\n\t\tvar did_reset = false;\r\n\t\tvar calling_on_error = false;\r\n\r\n\t\tconst reset = () => {\r\n\t\t\tif (did_reset) {\r\n\t\t\t\tw.svelte_boundary_reset_noop();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tdid_reset = true;\r\n\r\n\t\t\tif (calling_on_error) {\r\n\t\t\t\te.svelte_boundary_reset_onerror();\r\n\t\t\t}\r\n\r\n\t\t\tthis.#pending_count = 0;\r\n\r\n\t\t\tif (this.#failed_effect !== null) {\r\n\t\t\t\tpause_effect(this.#failed_effect, () => {\r\n\t\t\t\t\tthis.#failed_effect = null;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis.pending = true;\r\n\r\n\t\t\tthis.#main_effect = this.#run(() => {\r\n\t\t\t\tthis.#is_creating_fallback = false;\r\n\t\t\t\treturn branch(() => this.#children(this.#anchor));\r\n\t\t\t});\r\n\r\n\t\t\tif (this.#pending_count > 0) {\r\n\t\t\t\tthis.#show_pending_snippet();\r\n\t\t\t} else {\r\n\t\t\t\tthis.pending = false;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// If we have nothing to capture the error, or if we hit an error while\r\n\t\t// rendering the fallback, re-throw for another boundary to handle\r\n\t\tif (this.#is_creating_fallback || (!onerror && !failed)) {\r\n\t\t\tthrow error;\r\n\t\t}\r\n\r\n\t\tvar previous_reaction = active_reaction;\r\n\r\n\t\ttry {\r\n\t\t\tset_active_reaction(null);\r\n\t\t\tcalling_on_error = true;\r\n\t\t\tonerror?.(error, reset);\r\n\t\t\tcalling_on_error = false;\r\n\t\t} catch (error) {\r\n\t\t\tinvoke_error_boundary(error, this.#effect && this.#effect.parent);\r\n\t\t} finally {\r\n\t\t\tset_active_reaction(previous_reaction);\r\n\t\t}\r\n\r\n\t\tif (failed) {\r\n\t\t\tqueue_micro_task(() => {\r\n\t\t\t\tthis.#failed_effect = this.#run(() => {\r\n\t\t\t\t\tthis.#is_creating_fallback = true;\r\n\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\treturn branch(() => {\r\n\t\t\t\t\t\t\tfailed(\r\n\t\t\t\t\t\t\t\tthis.#anchor,\r\n\t\t\t\t\t\t\t\t() => error,\r\n\t\t\t\t\t\t\t\t() => reset\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} catch (error) {\r\n\t\t\t\t\t\tinvoke_error_boundary(error, /** @type {Effect} */ (this.#effect.parent));\r\n\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t} finally {\r\n\t\t\t\t\t\tthis.#is_creating_fallback = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n *\r\n * @param {Effect} effect\r\n * @param {DocumentFragment} fragment\r\n */\r\nfunction move_effect(effect, fragment) {\r\n\tvar node = effect.nodes_start;\r\n\tvar end = effect.nodes_end;\r\n\r\n\twhile (node !== null) {\r\n\t\t/** @type {TemplateNode | null} */\r\n\t\tvar next = node === end ? null : /** @type {TemplateNode} */ (get_next_sibling(node));\r\n\r\n\t\tfragment.append(node);\r\n\t\tnode = next;\r\n\t}\r\n}\r\n\r\nexport function get_pending_boundary() {\r\n\tvar boundary = /** @type {Effect} */ (active_effect).b;\r\n\r\n\twhile (boundary !== null && !boundary.has_pending_snippet()) {\r\n\t\tboundary = boundary.parent;\r\n\t}\r\n\r\n\tif (boundary === null) {\r\n\t\te.await_outside_boundary();\r\n\t}\r\n\r\n\treturn boundary;\r\n}\r\n\r\nexport function pending() {\r\n\tif (active_effect === null) {\r\n\t\te.effect_pending_outside_reaction();\r\n\t}\r\n\r\n\tvar boundary = active_effect.b;\r\n\r\n\tif (boundary === null) {\r\n\t\treturn 0; // TODO eventually we will need this to be global\r\n\t}\r\n\r\n\treturn boundary.get_effect_pending();\r\n}\r\n", "/** @import { Derived, Effect, Source } from '#client' */\r\n/** @import { Batch } from './batch.js'; */\r\nimport { DEV } from 'esm-env';\r\nimport {\r\n\tERROR_VALUE,\r\n\tCLEAN,\r\n\tDERIVED,\r\n\tDIRTY,\r\n\tEFFECT_PRESERVED,\r\n\tMAYBE_DIRTY,\r\n\tSTALE_REACTION,\r\n\tUNOWNED,\r\n\tASYNC\r\n} from '#client/constants';\r\nimport {\r\n\tactive_reaction,\r\n\tactive_effect,\r\n\tset_signal_status,\r\n\tskip_reaction,\r\n\tupdate_reaction,\r\n\tincrement_write_version,\r\n\tset_active_effect,\r\n\tpush_reaction_value,\r\n\tis_destroying_effect\r\n} from '../runtime.js';\r\nimport { equals, safe_equals } from './equality.js';\r\nimport * as e from '../errors.js';\r\nimport * as w from '../warnings.js';\r\nimport { async_effect, destroy_effect } from './effects.js';\r\nimport { inspect_effects, internal_set, set_inspect_effects, source } from './sources.js';\r\nimport { get_stack } from '../dev/tracing.js';\r\nimport { tracing_mode_flag } from '../../flags/index.js';\r\nimport { Boundary } from '../dom/blocks/boundary.js';\r\nimport { component_context } from '../context.js';\r\nimport { UNINITIALIZED } from '../../../constants.js';\r\nimport { batch_deriveds, current_batch } from './batch.js';\r\nimport { unset_context } from './async.js';\r\n\r\n/** @type {Effect | null} */\r\nexport let current_async_effect = null;\r\n\r\n/** @param {Effect | null} v */\r\nexport function set_from_async_derived(v) {\r\n\tcurrent_async_effect = v;\r\n}\r\n\r\nexport const recent_async_deriveds = new Set();\r\n\r\n/**\r\n * @template V\r\n * @param {() => V} fn\r\n * @returns {Derived<V>}\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function derived(fn) {\r\n\tvar flags = DERIVED | DIRTY;\r\n\tvar parent_derived =\r\n\t\tactive_reaction !== null && (active_reaction.f & DERIVED) !== 0\r\n\t\t\t? /** @type {Derived} */ (active_reaction)\r\n\t\t\t: null;\r\n\r\n\tif (active_effect === null || (parent_derived !== null && (parent_derived.f & UNOWNED) !== 0)) {\r\n\t\tflags |= UNOWNED;\r\n\t} else {\r\n\t\t// Since deriveds are evaluated lazily, any effects created inside them are\r\n\t\t// created too late to ensure that the parent effect is added to the tree\r\n\t\tactive_effect.f |= EFFECT_PRESERVED;\r\n\t}\r\n\r\n\t/** @type {Derived<V>} */\r\n\tconst signal = {\r\n\t\tctx: component_context,\r\n\t\tdeps: null,\r\n\t\teffects: null,\r\n\t\tequals,\r\n\t\tf: flags,\r\n\t\tfn,\r\n\t\treactions: null,\r\n\t\trv: 0,\r\n\t\tv: /** @type {V} */ (UNINITIALIZED),\r\n\t\twv: 0,\r\n\t\tparent: parent_derived ?? active_effect,\r\n\t\tac: null\r\n\t};\r\n\r\n\tif (DEV && tracing_mode_flag) {\r\n\t\tsignal.created = get_stack('CreatedAt');\r\n\t}\r\n\r\n\treturn signal;\r\n}\r\n\r\n/**\r\n * @template V\r\n * @param {() => V | Promise<V>} fn\r\n * @param {string} [location] If provided, print a warning if the value is not read immediately after update\r\n * @returns {Promise<Source<V>>}\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function async_derived(fn, location) {\r\n\tlet parent = /** @type {Effect | null} */ (active_effect);\r\n\r\n\tif (parent === null) {\r\n\t\te.async_derived_orphan();\r\n\t}\r\n\r\n\tvar boundary = /** @type {Boundary} */ (parent.b);\r\n\r\n\tvar promise = /** @type {Promise<V>} */ (/** @type {unknown} */ (undefined));\r\n\tvar signal = source(/** @type {V} */ (UNINITIALIZED));\r\n\r\n\t/** @type {Promise<V> | null} */\r\n\tvar prev = null;\r\n\r\n\t// only suspend in async deriveds created on initialisation\r\n\tvar should_suspend = !active_reaction;\r\n\r\n\tasync_effect(() => {\r\n\t\tif (DEV) current_async_effect = active_effect;\r\n\r\n\t\ttry {\r\n\t\t\tvar p = fn();\r\n\t\t\t// Make sure to always access the then property to read any signals\r\n\t\t\t// it might access, so that we track them as dependencies.\r\n\t\t\tif (prev) Promise.resolve(p).catch(() => {}); // avoid unhandled rejection\r\n\t\t} catch (error) {\r\n\t\t\tp = Promise.reject(error);\r\n\t\t}\r\n\r\n\t\tif (DEV) current_async_effect = null;\r\n\r\n\t\tvar r = () => p;\r\n\t\tpromise = prev?.then(r, r) ?? Promise.resolve(p);\r\n\r\n\t\tprev = promise;\r\n\r\n\t\tvar batch = /** @type {Batch} */ (current_batch);\r\n\t\tvar pending = boundary.pending;\r\n\r\n\t\tif (should_suspend) {\r\n\t\t\tboundary.update_pending_count(1);\r\n\t\t\tif (!pending) batch.increment();\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * @param {any} value\r\n\t\t * @param {unknown} error\r\n\t\t */\r\n\t\tconst handler = (value, error = undefined) => {\r\n\t\t\tprev = null;\r\n\r\n\t\t\tcurrent_async_effect = null;\r\n\r\n\t\t\tif (!pending) batch.activate();\r\n\r\n\t\t\tif (error) {\r\n\t\t\t\tif (error !== STALE_REACTION) {\r\n\t\t\t\t\tsignal.f |= ERROR_VALUE;\r\n\r\n\t\t\t\t\t// @ts-expect-error the error is the wrong type, but we don't care\r\n\t\t\t\t\tinternal_set(signal, error);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif ((signal.f & ERROR_VALUE) !== 0) {\r\n\t\t\t\t\tsignal.f ^= ERROR_VALUE;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tinternal_set(signal, value);\r\n\r\n\t\t\t\tif (DEV && location !== undefined) {\r\n\t\t\t\t\trecent_async_deriveds.add(signal);\r\n\r\n\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\tif (recent_async_deriveds.has(signal)) {\r\n\t\t\t\t\t\t\tw.await_waterfall(/** @type {string} */ (signal.label), location);\r\n\t\t\t\t\t\t\trecent_async_deriveds.delete(signal);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (should_suspend) {\r\n\t\t\t\tboundary.update_pending_count(-1);\r\n\t\t\t\tif (!pending) batch.decrement();\r\n\t\t\t}\r\n\r\n\t\t\tunset_context();\r\n\t\t};\r\n\r\n\t\tpromise.then(handler, (e) => handler(null, e || 'unknown'));\r\n\r\n\t\tif (batch) {\r\n\t\t\treturn () => {\r\n\t\t\t\tqueueMicrotask(() => batch.neuter());\r\n\t\t\t};\r\n\t\t}\r\n\t});\r\n\r\n\tif (DEV) {\r\n\t\t// add a flag that lets this be printed as a derived\r\n\t\t// when using `$inspect.trace()`\r\n\t\tsignal.f |= ASYNC;\r\n\t}\r\n\r\n\treturn new Promise((fulfil) => {\r\n\t\t/** @param {Promise<V>} p */\r\n\t\tfunction next(p) {\r\n\t\t\tfunction go() {\r\n\t\t\t\tif (p === promise) {\r\n\t\t\t\t\tfulfil(signal);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// if the effect re-runs before the initial promise\r\n\t\t\t\t\t// resolves, delay resolution until we have a value\r\n\t\t\t\t\tnext(promise);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tp.then(go, go);\r\n\t\t}\r\n\r\n\t\tnext(promise);\r\n\t});\r\n}\r\n\r\n/**\r\n * @template V\r\n * @param {() => V} fn\r\n * @returns {Derived<V>}\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function user_derived(fn) {\r\n\tconst d = derived(fn);\r\n\r\n\tpush_reaction_value(d);\r\n\r\n\treturn d;\r\n}\r\n\r\n/**\r\n * @template V\r\n * @param {() => V} fn\r\n * @returns {Derived<V>}\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function derived_safe_equal(fn) {\r\n\tconst signal = derived(fn);\r\n\tsignal.equals = safe_equals;\r\n\treturn signal;\r\n}\r\n\r\n/**\r\n * @param {Derived} derived\r\n * @returns {void}\r\n */\r\nexport function destroy_derived_effects(derived) {\r\n\tvar effects = derived.effects;\r\n\r\n\tif (effects !== null) {\r\n\t\tderived.effects = null;\r\n\r\n\t\tfor (var i = 0; i < effects.length; i += 1) {\r\n\t\t\tdestroy_effect(/** @type {Effect} */ (effects[i]));\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * The currently updating deriveds, used to detect infinite recursion\r\n * in dev mode and provide a nicer error than 'too much recursion'\r\n * @type {Derived[]}\r\n */\r\nlet stack = [];\r\n\r\n/**\r\n * @param {Derived} derived\r\n * @returns {Effect | null}\r\n */\r\nfunction get_derived_parent_effect(derived) {\r\n\tvar parent = derived.parent;\r\n\twhile (parent !== null) {\r\n\t\tif ((parent.f & DERIVED) === 0) {\r\n\t\t\treturn /** @type {Effect} */ (parent);\r\n\t\t}\r\n\t\tparent = parent.parent;\r\n\t}\r\n\treturn null;\r\n}\r\n\r\n/**\r\n * @template T\r\n * @param {Derived} derived\r\n * @returns {T}\r\n */\r\nexport function execute_derived(derived) {\r\n\tvar value;\r\n\tvar prev_active_effect = active_effect;\r\n\r\n\tset_active_effect(get_derived_parent_effect(derived));\r\n\r\n\tif (DEV) {\r\n\t\tlet prev_inspect_effects = inspect_effects;\r\n\t\tset_inspect_effects(new Set());\r\n\t\ttry {\r\n\t\t\tif (stack.includes(derived)) {\r\n\t\t\t\te.derived_references_self();\r\n\t\t\t}\r\n\r\n\t\t\tstack.push(derived);\r\n\r\n\t\t\tdestroy_derived_effects(derived);\r\n\t\t\tvalue = update_reaction(derived);\r\n\t\t} finally {\r\n\t\t\tset_active_effect(prev_active_effect);\r\n\t\t\tset_inspect_effects(prev_inspect_effects);\r\n\t\t\tstack.pop();\r\n\t\t}\r\n\t} else {\r\n\t\ttry {\r\n\t\t\tdestroy_derived_effects(derived);\r\n\t\t\tvalue = update_reaction(derived);\r\n\t\t} finally {\r\n\t\t\tset_active_effect(prev_active_effect);\r\n\t\t}\r\n\t}\r\n\r\n\treturn value;\r\n}\r\n\r\n/**\r\n * @param {Derived} derived\r\n * @returns {void}\r\n */\r\nexport function update_derived(derived) {\r\n\tvar value = execute_derived(derived);\r\n\r\n\tif (!derived.equals(value)) {\r\n\t\tderived.v = value;\r\n\t\tderived.wv = increment_write_version();\r\n\t}\r\n\r\n\t// don't mark derived clean if we're reading it inside a\r\n\t// cleanup function, or it will cache a stale value\r\n\tif (is_destroying_effect) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tif (batch_deriveds !== null) {\r\n\t\tbatch_deriveds.set(derived, derived.v);\r\n\t} else {\r\n\t\tvar status =\r\n\t\t\t(skip_reaction || (derived.f & UNOWNED) !== 0) && derived.deps !== null ? MAYBE_DIRTY : CLEAN;\r\n\r\n\t\tset_signal_status(derived, status);\r\n\t}\r\n}\r\n", "/** @import { Derived, Effect, Source } from '#client' */\r\nimport {\r\n\tBLOCK_EFFECT,\r\n\tBRANCH_EFFECT,\r\n\tCLEAN,\r\n\tDESTROYED,\r\n\tDIRTY,\r\n\tEFFECT,\r\n\tASYNC,\r\n\tINERT,\r\n\tRENDER_EFFECT,\r\n\tROOT_EFFECT,\r\n\tUSER_EFFECT,\r\n\tMAYBE_DIRTY\r\n} from '#client/constants';\r\nimport { async_mode_flag } from '../../flags/index.js';\r\nimport { deferred, define_property } from '../../shared/utils.js';\r\nimport { get_pending_boundary } from '../dom/blocks/boundary.js';\r\nimport {\r\n\tactive_effect,\r\n\tis_dirty,\r\n\tis_updating_effect,\r\n\tset_is_updating_effect,\r\n\tset_signal_status,\r\n\tupdate_effect\r\n} from '../runtime.js';\r\nimport * as e from '../errors.js';\r\nimport { flush_tasks } from '../dom/task.js';\r\nimport { DEV } from 'esm-env';\r\nimport { invoke_error_boundary } from '../error-handling.js';\r\nimport { old_values } from './sources.js';\r\nimport { unlink_effect } from './effects.js';\r\nimport { unset_context } from './async.js';\r\n\r\n/** @type {Set<Batch>} */\r\nconst batches = new Set();\r\n\r\n/** @type {Batch | null} */\r\nexport let current_batch = null;\r\n\r\n/**\r\n * This is needed to avoid overwriting inputs in non-async mode\r\n * TODO 6.0 remove this, as non-async mode will go away\r\n * @type {Batch | null}\r\n */\r\nexport let previous_batch = null;\r\n\r\n/**\r\n * When time travelling, we re-evaluate deriveds based on the temporary\r\n * values of their dependencies rather than their actual values, and cache\r\n * the results in this map rather than on the deriveds themselves\r\n * @type {Map<Derived, any> | null}\r\n */\r\nexport let batch_deriveds = null;\r\n\r\n/** @type {Set<() => void>} */\r\nexport let effect_pending_updates = new Set();\r\n\r\n/** @type {Array<() => void>} */\r\nlet tasks = [];\r\n\r\nfunction dequeue() {\r\n\tconst task = /** @type {() => void} */ (tasks.shift());\r\n\r\n\tif (tasks.length > 0) {\r\n\t\tqueueMicrotask(dequeue);\r\n\t}\r\n\r\n\ttask();\r\n}\r\n\r\n/** @type {Effect[]} */\r\nlet queued_root_effects = [];\r\n\r\n/** @type {Effect | null} */\r\nlet last_scheduled_effect = null;\r\n\r\nlet is_flushing = false;\r\nlet is_flushing_sync = false;\r\n\r\nexport class Batch {\r\n\t/**\r\n\t * The current values of any sources that are updated in this batch\r\n\t * They keys of this map are identical to `this.#previous`\r\n\t * @type {Map<Source, any>}\r\n\t */\r\n\tcurrent = new Map();\r\n\r\n\t/**\r\n\t * The values of any sources that are updated in this batch _before_ those updates took place.\r\n\t * They keys of this map are identical to `this.#current`\r\n\t * @type {Map<Source, any>}\r\n\t */\r\n\t#previous = new Map();\r\n\r\n\t/**\r\n\t * When the batch is committed (and the DOM is updated), we need to remove old branches\r\n\t * and append new ones by calling the functions added inside (if/each/key/etc) blocks\r\n\t * @type {Set<() => void>}\r\n\t */\r\n\t#callbacks = new Set();\r\n\r\n\t/**\r\n\t * The number of async effects that are currently in flight\r\n\t */\r\n\t#pending = 0;\r\n\r\n\t/**\r\n\t * A deferred that resolves when the batch is committed, used with `settled()`\r\n\t * TODO replace with Promise.withResolvers once supported widely enough\r\n\t * @type {{ promise: Promise<void>, resolve: (value?: any) => void, reject: (reason: unknown) => void } | null}\r\n\t */\r\n\t#deferred = null;\r\n\r\n\t/**\r\n\t * True if an async effect inside this batch resolved and\r\n\t * its parent branch was already deleted\r\n\t */\r\n\t#neutered = false;\r\n\r\n\t/**\r\n\t * Async effects (created inside `async_derived`) encountered during processing.\r\n\t * These run after the rest of the batch has updated, since they should\r\n\t * always have the latest values\r\n\t * @type {Effect[]}\r\n\t */\r\n\t#async_effects = [];\r\n\r\n\t/**\r\n\t * The same as `#async_effects`, but for effects inside a newly-created\r\n\t * `<svelte:boundary>` — these do not prevent the batch from committing\r\n\t * @type {Effect[]}\r\n\t */\r\n\t#boundary_async_effects = [];\r\n\r\n\t/**\r\n\t * Template effects and `$effect.pre` effects, which run when\r\n\t * a batch is committed\r\n\t * @type {Effect[]}\r\n\t */\r\n\t#render_effects = [];\r\n\r\n\t/**\r\n\t * The same as `#render_effects`, but for `$effect` (which runs after)\r\n\t * @type {Effect[]}\r\n\t */\r\n\t#effects = [];\r\n\r\n\t/**\r\n\t * Block effects, which may need to re-run on subsequent flushes\r\n\t * in order to update internal sources (e.g. each block items)\r\n\t * @type {Effect[]}\r\n\t */\r\n\t#block_effects = [];\r\n\r\n\t/**\r\n\t * Deferred effects (which run after async work has completed) that are DIRTY\r\n\t * @type {Effect[]}\r\n\t */\r\n\t#dirty_effects = [];\r\n\r\n\t/**\r\n\t * Deferred effects that are MAYBE_DIRTY\r\n\t * @type {Effect[]}\r\n\t */\r\n\t#maybe_dirty_effects = [];\r\n\r\n\t/**\r\n\t * A set of branches that still exist, but will be destroyed when this batch\r\n\t * is committed — we skip over these during `process`\r\n\t * @type {Set<Effect>}\r\n\t */\r\n\tskipped_effects = new Set();\r\n\r\n\t/**\r\n\t *\r\n\t * @param {Effect[]} root_effects\r\n\t */\r\n\tprocess(root_effects) {\r\n\t\tqueued_root_effects = [];\r\n\r\n\t\tprevious_batch = null;\r\n\r\n\t\t/** @type {Map<Source, { v: unknown, wv: number }> | null} */\r\n\t\tvar current_values = null;\r\n\r\n\t\t// if there are multiple batches, we are 'time travelling' —\r\n\t\t// we need to undo the changes belonging to any batch\r\n\t\t// other than the current one\r\n\t\tif (batches.size > 1) {\r\n\t\t\tcurrent_values = new Map();\r\n\t\t\tbatch_deriveds = new Map();\r\n\r\n\t\t\tfor (const [source, current] of this.current) {\r\n\t\t\t\tcurrent_values.set(source, { v: source.v, wv: source.wv });\r\n\t\t\t\tsource.v = current;\r\n\t\t\t}\r\n\r\n\t\t\tfor (const batch of batches) {\r\n\t\t\t\tif (batch === this) continue;\r\n\r\n\t\t\t\tfor (const [source, previous] of batch.#previous) {\r\n\t\t\t\t\tif (!current_values.has(source)) {\r\n\t\t\t\t\t\tcurrent_values.set(source, { v: source.v, wv: source.wv });\r\n\t\t\t\t\t\tsource.v = previous;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (const root of root_effects) {\r\n\t\t\tthis.#traverse_effect_tree(root);\r\n\t\t}\r\n\r\n\t\t// if we didn't start any new async work, and no async work\r\n\t\t// is outstanding from a previous flush, commit\r\n\t\tif (this.#async_effects.length === 0 && this.#pending === 0) {\r\n\t\t\tthis.#commit();\r\n\r\n\t\t\tvar render_effects = this.#render_effects;\r\n\t\t\tvar effects = this.#effects;\r\n\r\n\t\t\tthis.#render_effects = [];\r\n\t\t\tthis.#effects = [];\r\n\t\t\tthis.#block_effects = [];\r\n\r\n\t\t\t// If sources are written to, then work needs to happen in a separate batch, else prior sources would be mixed with\r\n\t\t\t// newly updated sources, which could lead to infinite loops when effects run over and over again.\r\n\t\t\tprevious_batch = current_batch;\r\n\t\t\tcurrent_batch = null;\r\n\r\n\t\t\tflush_queued_effects(render_effects);\r\n\t\t\tflush_queued_effects(effects);\r\n\r\n\t\t\t// Reinstate the current batch if there was no new one created, as `process()` runs in a loop in `flush_effects()`.\r\n\t\t\t// That method expects `current_batch` to be set, and could run the loop again if effects result in new effects\r\n\t\t\t// being scheduled but without writes happening in which case no new batch is created.\r\n\t\t\tif (current_batch === null) {\r\n\t\t\t\tcurrent_batch = this;\r\n\t\t\t} else {\r\n\t\t\t\tbatches.delete(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis.#deferred?.resolve();\r\n\t\t} else {\r\n\t\t\tthis.#defer_effects(this.#render_effects);\r\n\t\t\tthis.#defer_effects(this.#effects);\r\n\t\t\tthis.#defer_effects(this.#block_effects);\r\n\t\t}\r\n\r\n\t\tif (current_values) {\r\n\t\t\tfor (const [source, { v, wv }] of current_values) {\r\n\t\t\t\t// reset the source to the current value (unless\r\n\t\t\t\t// it got a newer value as a result of effects running)\r\n\t\t\t\tif (source.wv <= wv) {\r\n\t\t\t\t\tsource.v = v;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tbatch_deriveds = null;\r\n\t\t}\r\n\r\n\t\tfor (const effect of this.#async_effects) {\r\n\t\t\tupdate_effect(effect);\r\n\t\t}\r\n\r\n\t\tfor (const effect of this.#boundary_async_effects) {\r\n\t\t\tupdate_effect(effect);\r\n\t\t}\r\n\r\n\t\tthis.#async_effects = [];\r\n\t\tthis.#boundary_async_effects = [];\r\n\t}\r\n\r\n\t/**\r\n\t * Traverse the effect tree, executing effects or stashing\r\n\t * them for later execution as appropriate\r\n\t * @param {Effect} root\r\n\t */\r\n\t#traverse_effect_tree(root) {\r\n\t\troot.f ^= CLEAN;\r\n\r\n\t\tvar effect = root.first;\r\n\r\n\t\twhile (effect !== null) {\r\n\t\t\tvar flags = effect.f;\r\n\t\t\tvar is_branch = (flags & (BRANCH_EFFECT | ROOT_EFFECT)) !== 0;\r\n\t\t\tvar is_skippable_branch = is_branch && (flags & CLEAN) !== 0;\r\n\r\n\t\t\tvar skip = is_skippable_branch || (flags & INERT) !== 0 || this.skipped_effects.has(effect);\r\n\r\n\t\t\tif (!skip && effect.fn !== null) {\r\n\t\t\t\tif (is_branch) {\r\n\t\t\t\t\teffect.f ^= CLEAN;\r\n\t\t\t\t} else if ((flags & EFFECT) !== 0) {\r\n\t\t\t\t\tthis.#effects.push(effect);\r\n\t\t\t\t} else if (async_mode_flag && (flags & RENDER_EFFECT) !== 0) {\r\n\t\t\t\t\tthis.#render_effects.push(effect);\r\n\t\t\t\t} else if ((flags & CLEAN) === 0) {\r\n\t\t\t\t\tif ((flags & ASYNC) !== 0) {\r\n\t\t\t\t\t\tvar effects = effect.b?.pending ? this.#boundary_async_effects : this.#async_effects;\r\n\t\t\t\t\t\teffects.push(effect);\r\n\t\t\t\t\t} else if (is_dirty(effect)) {\r\n\t\t\t\t\t\tif ((effect.f & BLOCK_EFFECT) !== 0) this.#block_effects.push(effect);\r\n\t\t\t\t\t\tupdate_effect(effect);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar child = effect.first;\r\n\r\n\t\t\t\tif (child !== null) {\r\n\t\t\t\t\teffect = child;\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar parent = effect.parent;\r\n\t\t\teffect = effect.next;\r\n\r\n\t\t\twhile (effect === null && parent !== null) {\r\n\t\t\t\teffect = parent.next;\r\n\t\t\t\tparent = parent.parent;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {Effect[]} effects\r\n\t */\r\n\t#defer_effects(effects) {\r\n\t\tfor (const e of effects) {\r\n\t\t\tconst target = (e.f & DIRTY) !== 0 ? this.#dirty_effects : this.#maybe_dirty_effects;\r\n\t\t\ttarget.push(e);\r\n\r\n\t\t\t// mark as clean so they get scheduled if they depend on pending async state\r\n\t\t\tset_signal_status(e, CLEAN);\r\n\t\t}\r\n\r\n\t\teffects.length = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Associate a change to a given source with the current\r\n\t * batch, noting its previous and current values\r\n\t * @param {Source} source\r\n\t * @param {any} value\r\n\t */\r\n\tcapture(source, value) {\r\n\t\tif (!this.#previous.has(source)) {\r\n\t\t\tthis.#previous.set(source, value);\r\n\t\t}\r\n\r\n\t\tthis.current.set(source, source.v);\r\n\t}\r\n\r\n\tactivate() {\r\n\t\tcurrent_batch = this;\r\n\t}\r\n\r\n\tdeactivate() {\r\n\t\tcurrent_batch = null;\r\n\t\tprevious_batch = null;\r\n\r\n\t\tfor (const update of effect_pending_updates) {\r\n\t\t\teffect_pending_updates.delete(update);\r\n\t\t\tupdate();\r\n\r\n\t\t\tif (current_batch !== null) {\r\n\t\t\t\t// only do one at a time\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tneuter() {\r\n\t\tthis.#neutered = true;\r\n\t}\r\n\r\n\tflush() {\r\n\t\tif (queued_root_effects.length > 0) {\r\n\t\t\tflush_effects();\r\n\t\t} else {\r\n\t\t\tthis.#commit();\r\n\t\t}\r\n\r\n\t\tif (current_batch !== this) {\r\n\t\t\t// this can happen if a `flushSync` occurred during `flush_effects()`,\r\n\t\t\t// which is permitted in legacy mode despite being a terrible idea\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (this.#pending === 0) {\r\n\t\t\tbatches.delete(this);\r\n\t\t}\r\n\r\n\t\tthis.deactivate();\r\n\t}\r\n\r\n\t/**\r\n\t * Append and remove branches to/from the DOM\r\n\t */\r\n\t#commit() {\r\n\t\tif (!this.#neutered) {\r\n\t\t\tfor (const fn of this.#callbacks) {\r\n\t\t\t\tfn();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.#callbacks.clear();\r\n\t}\r\n\r\n\tincrement() {\r\n\t\tthis.#pending += 1;\r\n\t}\r\n\r\n\tdecrement() {\r\n\t\tthis.#pending -= 1;\r\n\r\n\t\tif (this.#pending === 0) {\r\n\t\t\tfor (const e of this.#dirty_effects) {\r\n\t\t\t\tset_signal_status(e, DIRTY);\r\n\t\t\t\tschedule_effect(e);\r\n\t\t\t}\r\n\r\n\t\t\tfor (const e of this.#maybe_dirty_effects) {\r\n\t\t\t\tset_signal_status(e, MAYBE_DIRTY);\r\n\t\t\t\tschedule_effect(e);\r\n\t\t\t}\r\n\r\n\t\t\tthis.#render_effects = [];\r\n\t\t\tthis.#effects = [];\r\n\r\n\t\t\tthis.flush();\r\n\t\t} else {\r\n\t\t\tthis.deactivate();\r\n\t\t}\r\n\t}\r\n\r\n\t/** @param {() => void} fn */\r\n\tadd_callback(fn) {\r\n\t\tthis.#callbacks.add(fn);\r\n\t}\r\n\r\n\tsettled() {\r\n\t\treturn (this.#deferred ??= deferred()).promise;\r\n\t}\r\n\r\n\tstatic ensure() {\r\n\t\tif (current_batch === null) {\r\n\t\t\tconst batch = (current_batch = new Batch());\r\n\t\t\tbatches.add(current_batch);\r\n\r\n\t\t\tif (!is_flushing_sync) {\r\n\t\t\t\tBatch.enqueue(() => {\r\n\t\t\t\t\tif (current_batch !== batch) {\r\n\t\t\t\t\t\t// a flushSync happened in the meantime\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbatch.flush();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn current_batch;\r\n\t}\r\n\r\n\t/** @param {() => void} task */\r\n\tstatic enqueue(task) {\r\n\t\tif (tasks.length === 0) {\r\n\t\t\tqueueMicrotask(dequeue);\r\n\t\t}\r\n\r\n\t\ttasks.unshift(task);\r\n\t}\r\n}\r\n\r\n/**\r\n * Synchronously flush any pending updates.\r\n * Returns void if no callback is provided, otherwise returns the result of calling the callback.\r\n * @template [T=void]\r\n * @param {(() => T) | undefined} [fn]\r\n * @returns {T}\r\n */\r\nexport function flushSync(fn) {\r\n\tif (async_mode_flag && active_effect !== null) {\r\n\t\te.flush_sync_in_effect();\r\n\t}\r\n\r\n\tvar was_flushing_sync = is_flushing_sync;\r\n\tis_flushing_sync = true;\r\n\r\n\ttry {\r\n\t\tvar result;\r\n\r\n\t\tif (fn) {\r\n\t\t\tflush_effects();\r\n\t\t\tresult = fn();\r\n\t\t}\r\n\r\n\t\twhile (true) {\r\n\t\t\tflush_tasks();\r\n\r\n\t\t\tif (queued_root_effects.length === 0) {\r\n\t\t\t\tcurrent_batch?.flush();\r\n\r\n\t\t\t\t// we need to check again, in case we just updated an `$effect.pending()`\r\n\t\t\t\tif (queued_root_effects.length === 0) {\r\n\t\t\t\t\t// this would be reset in `flush_effects()` but since we are early returning here,\r\n\t\t\t\t\t// we need to reset it here as well in case the first time there's 0 queued root effects\r\n\t\t\t\t\tlast_scheduled_effect = null;\r\n\r\n\t\t\t\t\treturn /** @type {T} */ (result);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tflush_effects();\r\n\t\t}\r\n\t} finally {\r\n\t\tis_flushing_sync = was_flushing_sync;\r\n\t}\r\n}\r\n\r\nfunction flush_effects() {\r\n\tvar was_updating_effect = is_updating_effect;\r\n\tis_flushing = true;\r\n\r\n\ttry {\r\n\t\tvar flush_count = 0;\r\n\t\tset_is_updating_effect(true);\r\n\r\n\t\twhile (queued_root_effects.length > 0) {\r\n\t\t\tvar batch = Batch.ensure();\r\n\r\n\t\t\tif (flush_count++ > 1000) {\r\n\t\t\t\tif (DEV) {\r\n\t\t\t\t\tvar updates = new Map();\r\n\r\n\t\t\t\t\tfor (const source of batch.current.keys()) {\r\n\t\t\t\t\t\tfor (const [stack, update] of source.updated ?? []) {\r\n\t\t\t\t\t\t\tvar entry = updates.get(stack);\r\n\r\n\t\t\t\t\t\t\tif (!entry) {\r\n\t\t\t\t\t\t\t\tentry = { error: update.error, count: 0 };\r\n\t\t\t\t\t\t\t\tupdates.set(stack, entry);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tentry.count += update.count;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfor (const update of updates.values()) {\r\n\t\t\t\t\t\t// eslint-disable-next-line no-console\r\n\t\t\t\t\t\tconsole.error(update.error);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tinfinite_loop_guard();\r\n\t\t\t}\r\n\r\n\t\t\tbatch.process(queued_root_effects);\r\n\t\t\told_values.clear();\r\n\t\t}\r\n\t} finally {\r\n\t\tis_flushing = false;\r\n\t\tset_is_updating_effect(was_updating_effect);\r\n\r\n\t\tlast_scheduled_effect = null;\r\n\t}\r\n}\r\n\r\nfunction infinite_loop_guard() {\r\n\ttry {\r\n\t\te.effect_update_depth_exceeded();\r\n\t} catch (error) {\r\n\t\tif (DEV) {\r\n\t\t\t// stack contains no useful information, replace it\r\n\t\t\tdefine_property(error, 'stack', { value: '' });\r\n\t\t}\r\n\r\n\t\t// Best effort: invoke the boundary nearest the most recent\r\n\t\t// effect and hope that it's relevant to the infinite loop\r\n\t\tinvoke_error_boundary(error, last_scheduled_effect);\r\n\t}\r\n}\r\n\r\n/** @type {Effect[] | null} */\r\nexport let eager_block_effects = null;\r\n\r\n/**\r\n * @param {Array<Effect>} effects\r\n * @returns {void}\r\n */\r\nfunction flush_queued_effects(effects) {\r\n\tvar length = effects.length;\r\n\tif (length === 0) return;\r\n\r\n\tvar i = 0;\r\n\r\n\twhile (i < length) {\r\n\t\tvar effect = effects[i++];\r\n\r\n\t\tif ((effect.f & (DESTROYED | INERT)) === 0 && is_dirty(effect)) {\r\n\t\t\teager_block_effects = [];\r\n\r\n\t\t\tupdate_effect(effect);\r\n\r\n\t\t\t// Effects with no dependencies or teardown do not get added to the effect tree.\r\n\t\t\t// Deferred effects (e.g. `$effect(...)`) _are_ added to the tree because we\r\n\t\t\t// don't know if we need to keep them until they are executed. Doing the check\r\n\t\t\t// here (rather than in `update_effect`) allows us to skip the work for\r\n\t\t\t// immediate effects.\r\n\t\t\tif (effect.deps === null && effect.first === null && effect.nodes_start === null) {\r\n\t\t\t\t// if there's no teardown or abort controller we completely unlink\r\n\t\t\t\t// the effect from the graph\r\n\t\t\t\tif (effect.teardown === null && effect.ac === null) {\r\n\t\t\t\t\t// remove this effect from the graph\r\n\t\t\t\t\tunlink_effect(effect);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// keep the effect in the graph, but free up some memory\r\n\t\t\t\t\teffect.fn = null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (eager_block_effects.length > 0) {\r\n\t\t\t\t// TODO this feels incorrect! it gets the tests passing\r\n\t\t\t\told_values.clear();\r\n\r\n\t\t\t\tfor (const e of eager_block_effects) {\r\n\t\t\t\t\tupdate_effect(e);\r\n\t\t\t\t}\r\n\r\n\t\t\t\teager_block_effects = [];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\teager_block_effects = null;\r\n}\r\n\r\n/**\r\n * @param {Effect} signal\r\n * @returns {void}\r\n */\r\nexport function schedule_effect(signal) {\r\n\tvar effect = (last_scheduled_effect = signal);\r\n\r\n\twhile (effect.parent !== null) {\r\n\t\teffect = effect.parent;\r\n\t\tvar flags = effect.f;\r\n\r\n\t\t// if the effect is being scheduled because a parent (each/await/etc) block\r\n\t\t// updated an internal source, bail out or we'll cause a second flush\r\n\t\tif (is_flushing && effect === active_effect && (flags & BLOCK_EFFECT) !== 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif ((flags & (ROOT_EFFECT | BRANCH_EFFECT)) !== 0) {\r\n\t\t\tif ((flags & CLEAN) === 0) return;\r\n\t\t\teffect.f ^= CLEAN;\r\n\t\t}\r\n\t}\r\n\r\n\tqueued_root_effects.push(effect);\r\n}\r\n\r\nexport function suspend() {\r\n\tvar boundary = get_pending_boundary();\r\n\tvar batch = /** @type {Batch} */ (current_batch);\r\n\tvar pending = boundary.pending;\r\n\r\n\tboundary.update_pending_count(1);\r\n\tif (!pending) batch.increment();\r\n\r\n\treturn function unsuspend() {\r\n\t\tboundary.update_pending_count(-1);\r\n\r\n\t\tif (!pending) {\r\n\t\t\tbatch.activate();\r\n\t\t\tbatch.decrement();\r\n\t\t} else {\r\n\t\t\tbatch.deactivate();\r\n\t\t}\r\n\r\n\t\tunset_context();\r\n\t};\r\n}\r\n\r\n/**\r\n * Forcibly remove all current batches, to prevent cross-talk between tests\r\n */\r\nexport function clear() {\r\n\tbatches.clear();\r\n}\r\n", "/** @import { Derived, Effect, Source, Value } from '#client' */\r\nimport { DEV } from 'esm-env';\r\nimport {\r\n\tactive_reaction,\r\n\tactive_effect,\r\n\tuntracked_writes,\r\n\tget,\r\n\tset_untracked_writes,\r\n\tset_signal_status,\r\n\tuntrack,\r\n\tincrement_write_version,\r\n\tupdate_effect,\r\n\tcurrent_sources,\r\n\tis_dirty,\r\n\tuntracking,\r\n\tis_destroying_effect,\r\n\tpush_reaction_value\r\n} from '../runtime.js';\r\nimport { equals, safe_equals } from './equality.js';\r\nimport {\r\n\tCLEAN,\r\n\tDERIVED,\r\n\tDIRTY,\r\n\tBRANCH_EFFECT,\r\n\tINSPECT_EFFECT,\r\n\tUNOWNED,\r\n\tMAYBE_DIRTY,\r\n\tBLOCK_EFFECT,\r\n\tROOT_EFFECT,\r\n\tASYNC\r\n} from '#client/constants';\r\nimport * as e from '../errors.js';\r\nimport { legacy_mode_flag, tracing_mode_flag } from '../../flags/index.js';\r\nimport { get_stack, tag_proxy } from '../dev/tracing.js';\r\nimport { component_context, is_runes } from '../context.js';\r\nimport { Batch, eager_block_effects, schedule_effect } from './batch.js';\r\nimport { proxy } from '../proxy.js';\r\nimport { execute_derived } from './deriveds.js';\r\n\r\n/** @type {Set<any>} */\r\nexport let inspect_effects = new Set();\r\n\r\n/** @type {Map<Source, any>} */\r\nexport const old_values = new Map();\r\n\r\n/**\r\n * @param {Set<any>} v\r\n */\r\nexport function set_inspect_effects(v) {\r\n\tinspect_effects = v;\r\n}\r\n\r\nlet inspect_effects_deferred = false;\r\n\r\nexport function set_inspect_effects_deferred() {\r\n\tinspect_effects_deferred = true;\r\n}\r\n\r\n/**\r\n * @template V\r\n * @param {V} v\r\n * @param {Error | null} [stack]\r\n * @returns {Source<V>}\r\n */\r\n// TODO rename this to `state` throughout the codebase\r\nexport function source(v, stack) {\r\n\t/** @type {Value} */\r\n\tvar signal = {\r\n\t\tf: 0, // TODO ideally we could skip this altogether, but it causes type errors\r\n\t\tv,\r\n\t\treactions: null,\r\n\t\tequals,\r\n\t\trv: 0,\r\n\t\twv: 0\r\n\t};\r\n\r\n\tif (DEV && tracing_mode_flag) {\r\n\t\tsignal.created = stack ?? get_stack('CreatedAt');\r\n\t\tsignal.updated = null;\r\n\t\tsignal.set_during_effect = false;\r\n\t\tsignal.trace = null;\r\n\t}\r\n\r\n\treturn signal;\r\n}\r\n\r\n/**\r\n * @template V\r\n * @param {V} v\r\n * @param {Error | null} [stack]\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function state(v, stack) {\r\n\tconst s = source(v, stack);\r\n\r\n\tpush_reaction_value(s);\r\n\r\n\treturn s;\r\n}\r\n\r\n/**\r\n * @template V\r\n * @param {V} initial_value\r\n * @param {boolean} [immutable]\r\n * @returns {Source<V>}\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function mutable_source(initial_value, immutable = false, trackable = true) {\r\n\tconst s = source(initial_value);\r\n\tif (!immutable) {\r\n\t\ts.equals = safe_equals;\r\n\t}\r\n\r\n\t// bind the signal to the component context, in case we need to\r\n\t// track updates to trigger beforeUpdate/afterUpdate callbacks\r\n\tif (legacy_mode_flag && trackable && component_context !== null && component_context.l !== null) {\r\n\t\t(component_context.l.s ??= []).push(s);\r\n\t}\r\n\r\n\treturn s;\r\n}\r\n\r\n/**\r\n * @template V\r\n * @param {Value<V>} source\r\n * @param {V} value\r\n */\r\nexport function mutate(source, value) {\r\n\tset(\r\n\t\tsource,\r\n\t\tuntrack(() => get(source))\r\n\t);\r\n\treturn value;\r\n}\r\n\r\n/**\r\n * @template V\r\n * @param {Source<V>} source\r\n * @param {V} value\r\n * @param {boolean} [should_proxy]\r\n * @returns {V}\r\n */\r\nexport function set(source, value, should_proxy = false) {\r\n\tif (\r\n\t\tactive_reaction !== null &&\r\n\t\t// since we are untracking the function inside `$inspect.with` we need to add this check\r\n\t\t// to ensure we error if state is set inside an inspect effect\r\n\t\t(!untracking || (active_reaction.f & INSPECT_EFFECT) !== 0) &&\r\n\t\tis_runes() &&\r\n\t\t(active_reaction.f & (DERIVED | BLOCK_EFFECT | ASYNC | INSPECT_EFFECT)) !== 0 &&\r\n\t\t!current_sources?.includes(source)\r\n\t) {\r\n\t\te.state_unsafe_mutation();\r\n\t}\r\n\r\n\tlet new_value = should_proxy ? proxy(value) : value;\r\n\r\n\tif (DEV) {\r\n\t\ttag_proxy(new_value, /** @type {string} */ (source.label));\r\n\t}\r\n\r\n\treturn internal_set(source, new_value);\r\n}\r\n\r\n/**\r\n * @template V\r\n * @param {Source<V>} source\r\n * @param {V} value\r\n * @returns {V}\r\n */\r\nexport function internal_set(source, value) {\r\n\tif (!source.equals(value)) {\r\n\t\tvar old_value = source.v;\r\n\r\n\t\tif (is_destroying_effect) {\r\n\t\t\told_values.set(source, value);\r\n\t\t} else {\r\n\t\t\told_values.set(source, old_value);\r\n\t\t}\r\n\r\n\t\tsource.v = value;\r\n\r\n\t\tvar batch = Batch.ensure();\r\n\t\tbatch.capture(source, old_value);\r\n\r\n\t\tif (DEV) {\r\n\t\t\tif (tracing_mode_flag || active_effect !== null) {\r\n\t\t\t\tconst error = get_stack('UpdatedAt');\r\n\r\n\t\t\t\tif (error !== null) {\r\n\t\t\t\t\tsource.updated ??= new Map();\r\n\t\t\t\t\tlet entry = source.updated.get(error.stack);\r\n\r\n\t\t\t\t\tif (!entry) {\r\n\t\t\t\t\t\tentry = { error, count: 0 };\r\n\t\t\t\t\t\tsource.updated.set(error.stack, entry);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tentry.count++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (active_effect !== null) {\r\n\t\t\t\tsource.set_during_effect = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif ((source.f & DERIVED) !== 0) {\r\n\t\t\t// if we are assigning to a dirty derived we set it to clean/maybe dirty but we also eagerly execute it to track the dependencies\r\n\t\t\tif ((source.f & DIRTY) !== 0) {\r\n\t\t\t\texecute_derived(/** @type {Derived} */ (source));\r\n\t\t\t}\r\n\t\t\tset_signal_status(source, (source.f & UNOWNED) === 0 ? CLEAN : MAYBE_DIRTY);\r\n\t\t}\r\n\r\n\t\tsource.wv = increment_write_version();\r\n\r\n\t\tmark_reactions(source, DIRTY);\r\n\r\n\t\t// It's possible that the current reaction might not have up-to-date dependencies\r\n\t\t// whilst it's actively running. So in the case of ensuring it registers the reaction\r\n\t\t// properly for itself, we need to ensure the current effect actually gets\r\n\t\t// scheduled. i.e: `$effect(() => x++)`\r\n\t\tif (\r\n\t\t\tis_runes() &&\r\n\t\t\tactive_effect !== null &&\r\n\t\t\t(active_effect.f & CLEAN) !== 0 &&\r\n\t\t\t(active_effect.f & (BRANCH_EFFECT | ROOT_EFFECT)) === 0\r\n\t\t) {\r\n\t\t\tif (untracked_writes === null) {\r\n\t\t\t\tset_untracked_writes([source]);\r\n\t\t\t} else {\r\n\t\t\t\tuntracked_writes.push(source);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (DEV && inspect_effects.size > 0 && !inspect_effects_deferred) {\r\n\t\t\tflush_inspect_effects();\r\n\t\t}\r\n\t}\r\n\r\n\treturn value;\r\n}\r\n\r\nexport function flush_inspect_effects() {\r\n\tinspect_effects_deferred = false;\r\n\r\n\tconst inspects = Array.from(inspect_effects);\r\n\r\n\tfor (const effect of inspects) {\r\n\t\t// Mark clean inspect-effects as maybe dirty and then check their dirtiness\r\n\t\t// instead of just updating the effects - this way we avoid overfiring.\r\n\t\tif ((effect.f & CLEAN) !== 0) {\r\n\t\t\tset_signal_status(effect, MAYBE_DIRTY);\r\n\t\t}\r\n\r\n\t\tif (is_dirty(effect)) {\r\n\t\t\tupdate_effect(effect);\r\n\t\t}\r\n\t}\r\n\r\n\tinspect_effects.clear();\r\n}\r\n\r\n/**\r\n * @template {number | bigint} T\r\n * @param {Source<T>} source\r\n * @param {1 | -1} [d]\r\n * @returns {T}\r\n */\r\nexport function update(source, d = 1) {\r\n\tvar value = get(source);\r\n\tvar result = d === 1 ? value++ : value--;\r\n\r\n\tset(source, value);\r\n\r\n\t// @ts-expect-error\r\n\treturn result;\r\n}\r\n\r\n/**\r\n * @template {number | bigint} T\r\n * @param {Source<T>} source\r\n * @param {1 | -1} [d]\r\n * @returns {T}\r\n */\r\nexport function update_pre(source, d = 1) {\r\n\tvar value = get(source);\r\n\r\n\t// @ts-expect-error\r\n\treturn set(source, d === 1 ? ++value : --value);\r\n}\r\n\r\n/**\r\n * Silently (without using `get`) increment a source\r\n * @param {Source<number>} source\r\n */\r\nexport function increment(source) {\r\n\tset(source, source.v + 1);\r\n}\r\n\r\n/**\r\n * @param {Value} signal\r\n * @param {number} status should be DIRTY or MAYBE_DIRTY\r\n * @returns {void}\r\n */\r\nfunction mark_reactions(signal, status) {\r\n\tvar reactions = signal.reactions;\r\n\tif (reactions === null) return;\r\n\r\n\tvar runes = is_runes();\r\n\tvar length = reactions.length;\r\n\r\n\tfor (var i = 0; i < length; i++) {\r\n\t\tvar reaction = reactions[i];\r\n\t\tvar flags = reaction.f;\r\n\r\n\t\t// In legacy mode, skip the current effect to prevent infinite loops\r\n\t\tif (!runes && reaction === active_effect) continue;\r\n\r\n\t\t// Inspect effects need to run immediately, so that the stack trace makes sense\r\n\t\tif (DEV && (flags & INSPECT_EFFECT) !== 0) {\r\n\t\t\tinspect_effects.add(reaction);\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\tvar not_dirty = (flags & DIRTY) === 0;\r\n\r\n\t\t// don't set a DIRTY reaction to MAYBE_DIRTY\r\n\t\tif (not_dirty) {\r\n\t\t\tset_signal_status(reaction, status);\r\n\t\t}\r\n\r\n\t\tif ((flags & DERIVED) !== 0) {\r\n\t\t\tmark_reactions(/** @type {Derived} */ (reaction), MAYBE_DIRTY);\r\n\t\t} else if (not_dirty) {\r\n\t\t\tif ((flags & BLOCK_EFFECT) !== 0) {\r\n\t\t\t\tif (eager_block_effects !== null) {\r\n\t\t\t\t\teager_block_effects.push(/** @type {Effect} */ (reaction));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tschedule_effect(/** @type {Effect} */ (reaction));\r\n\t\t}\r\n\t}\r\n}\r\n", "/** @import { Source } from '#client' */\r\nimport { DEV } from 'esm-env';\r\nimport {\r\n\tget,\r\n\tactive_effect,\r\n\tupdate_version,\r\n\tactive_reaction,\r\n\tset_update_version,\r\n\tset_active_reaction\r\n} from './runtime.js';\r\nimport {\r\n\tarray_prototype,\r\n\tget_descriptor,\r\n\tget_prototype_of,\r\n\tis_array,\r\n\tobject_prototype\r\n} from '../shared/utils.js';\r\nimport {\r\n\tstate as source,\r\n\tset,\r\n\tincrement,\r\n\tflush_inspect_effects,\r\n\tset_inspect_effects_deferred\r\n} from './reactivity/sources.js';\r\nimport { PROXY_PATH_SYMBOL, STATE_SYMBOL } from '#client/constants';\r\nimport { UNINITIALIZED } from '../../constants.js';\r\nimport * as e from './errors.js';\r\nimport { get_stack, tag } from './dev/tracing.js';\r\nimport { tracing_mode_flag } from '../flags/index.js';\r\n\r\n// TODO move all regexes into shared module?\r\nconst regex_is_valid_identifier = /^[a-zA-Z_$][a-zA-Z_$0-9]*$/;\r\n\r\n/**\r\n * @template T\r\n * @param {T} value\r\n * @returns {T}\r\n */\r\nexport function proxy(value) {\r\n\t// if non-proxyable, or is already a proxy, return `value`\r\n\tif (typeof value !== 'object' || value === null || STATE_SYMBOL in value) {\r\n\t\treturn value;\r\n\t}\r\n\r\n\tconst prototype = get_prototype_of(value);\r\n\r\n\tif (prototype !== object_prototype && prototype !== array_prototype) {\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/** @type {Map<any, Source<any>>} */\r\n\tvar sources = new Map();\r\n\tvar is_proxied_array = is_array(value);\r\n\tvar version = source(0);\r\n\r\n\tvar stack = DEV && tracing_mode_flag ? get_stack('CreatedAt') : null;\r\n\tvar parent_version = update_version;\r\n\r\n\t/**\r\n\t * Executes the proxy in the context of the reaction it was originally created in, if any\r\n\t * @template T\r\n\t * @param {() => T} fn\r\n\t */\r\n\tvar with_parent = (fn) => {\r\n\t\tif (update_version === parent_version) {\r\n\t\t\treturn fn();\r\n\t\t}\r\n\r\n\t\t// child source is being created after the initial proxy —\r\n\t\t// prevent it from being associated with the current reaction\r\n\t\tvar reaction = active_reaction;\r\n\t\tvar version = update_version;\r\n\r\n\t\tset_active_reaction(null);\r\n\t\tset_update_version(parent_version);\r\n\r\n\t\tvar result = fn();\r\n\r\n\t\tset_active_reaction(reaction);\r\n\t\tset_update_version(version);\r\n\r\n\t\treturn result;\r\n\t};\r\n\r\n\tif (is_proxied_array) {\r\n\t\t// We need to create the length source eagerly to ensure that\r\n\t\t// mutations to the array are properly synced with our proxy\r\n\t\tsources.set('length', source(/** @type {any[]} */ (value).length, stack));\r\n\t\tif (DEV) {\r\n\t\t\tvalue = /** @type {any} */ (inspectable_array(/** @type {any[]} */ (value)));\r\n\t\t}\r\n\t}\r\n\r\n\t/** Used in dev for $inspect.trace() */\r\n\tvar path = '';\r\n\tlet updating = false;\r\n\t/** @param {string} new_path */\r\n\tfunction update_path(new_path) {\r\n\t\tif (updating) return;\r\n\t\tupdating = true;\r\n\t\tpath = new_path;\r\n\r\n\t\ttag(version, `${path} version`);\r\n\r\n\t\t// rename all child sources and child proxies\r\n\t\tfor (const [prop, source] of sources) {\r\n\t\t\ttag(source, get_label(path, prop));\r\n\t\t}\r\n\t\tupdating = false;\r\n\t}\r\n\r\n\treturn new Proxy(/** @type {any} */ (value), {\r\n\t\tdefineProperty(_, prop, descriptor) {\r\n\t\t\tif (\r\n\t\t\t\t!('value' in descriptor) ||\r\n\t\t\t\tdescriptor.configurable === false ||\r\n\t\t\t\tdescriptor.enumerable === false ||\r\n\t\t\t\tdescriptor.writable === false\r\n\t\t\t) {\r\n\t\t\t\t// we disallow non-basic descriptors, because unless they are applied to the\r\n\t\t\t\t// target object — which we avoid, so that state can be forked — we will run\r\n\t\t\t\t// afoul of the various invariants\r\n\t\t\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/getOwnPropertyDescriptor#invariants\r\n\t\t\t\te.state_descriptors_fixed();\r\n\t\t\t}\r\n\t\t\tvar s = sources.get(prop);\r\n\t\t\tif (s === undefined) {\r\n\t\t\t\ts = with_parent(() => {\r\n\t\t\t\t\tvar s = source(descriptor.value, stack);\r\n\t\t\t\t\tsources.set(prop, s);\r\n\t\t\t\t\tif (DEV && typeof prop === 'string') {\r\n\t\t\t\t\t\ttag(s, get_label(path, prop));\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn s;\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tset(s, descriptor.value, true);\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t},\r\n\r\n\t\tdeleteProperty(target, prop) {\r\n\t\t\tvar s = sources.get(prop);\r\n\r\n\t\t\tif (s === undefined) {\r\n\t\t\t\tif (prop in target) {\r\n\t\t\t\t\tconst s = with_parent(() => source(UNINITIALIZED, stack));\r\n\t\t\t\t\tsources.set(prop, s);\r\n\t\t\t\t\tincrement(version);\r\n\r\n\t\t\t\t\tif (DEV) {\r\n\t\t\t\t\t\ttag(s, get_label(path, prop));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tset(s, UNINITIALIZED);\r\n\t\t\t\tincrement(version);\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t},\r\n\r\n\t\tget(target, prop, receiver) {\r\n\t\t\tif (prop === STATE_SYMBOL) {\r\n\t\t\t\treturn value;\r\n\t\t\t}\r\n\r\n\t\t\tif (DEV && prop === PROXY_PATH_SYMBOL) {\r\n\t\t\t\treturn update_path;\r\n\t\t\t}\r\n\r\n\t\t\tvar s = sources.get(prop);\r\n\t\t\tvar exists = prop in target;\r\n\r\n\t\t\t// create a source, but only if it's an own property and not a prototype property\r\n\t\t\tif (s === undefined && (!exists || get_descriptor(target, prop)?.writable)) {\r\n\t\t\t\ts = with_parent(() => {\r\n\t\t\t\t\tvar p = proxy(exists ? target[prop] : UNINITIALIZED);\r\n\t\t\t\t\tvar s = source(p, stack);\r\n\r\n\t\t\t\t\tif (DEV) {\r\n\t\t\t\t\t\ttag(s, get_label(path, prop));\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn s;\r\n\t\t\t\t});\r\n\r\n\t\t\t\tsources.set(prop, s);\r\n\t\t\t}\r\n\r\n\t\t\tif (s !== undefined) {\r\n\t\t\t\tvar v = get(s);\r\n\t\t\t\treturn v === UNINITIALIZED ? undefined : v;\r\n\t\t\t}\r\n\r\n\t\t\treturn Reflect.get(target, prop, receiver);\r\n\t\t},\r\n\r\n\t\tgetOwnPropertyDescriptor(target, prop) {\r\n\t\t\tvar descriptor = Reflect.getOwnPropertyDescriptor(target, prop);\r\n\r\n\t\t\tif (descriptor && 'value' in descriptor) {\r\n\t\t\t\tvar s = sources.get(prop);\r\n\t\t\t\tif (s) descriptor.value = get(s);\r\n\t\t\t} else if (descriptor === undefined) {\r\n\t\t\t\tvar source = sources.get(prop);\r\n\t\t\t\tvar value = source?.v;\r\n\r\n\t\t\t\tif (source !== undefined && value !== UNINITIALIZED) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tenumerable: true,\r\n\t\t\t\t\t\tconfigurable: true,\r\n\t\t\t\t\t\tvalue,\r\n\t\t\t\t\t\twritable: true\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn descriptor;\r\n\t\t},\r\n\r\n\t\thas(target, prop) {\r\n\t\t\tif (prop === STATE_SYMBOL) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\tvar s = sources.get(prop);\r\n\t\t\tvar has = (s !== undefined && s.v !== UNINITIALIZED) || Reflect.has(target, prop);\r\n\r\n\t\t\tif (\r\n\t\t\t\ts !== undefined ||\r\n\t\t\t\t(active_effect !== null && (!has || get_descriptor(target, prop)?.writable))\r\n\t\t\t) {\r\n\t\t\t\tif (s === undefined) {\r\n\t\t\t\t\ts = with_parent(() => {\r\n\t\t\t\t\t\tvar p = has ? proxy(target[prop]) : UNINITIALIZED;\r\n\t\t\t\t\t\tvar s = source(p, stack);\r\n\r\n\t\t\t\t\t\tif (DEV) {\r\n\t\t\t\t\t\t\ttag(s, get_label(path, prop));\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn s;\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tsources.set(prop, s);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar value = get(s);\r\n\t\t\t\tif (value === UNINITIALIZED) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn has;\r\n\t\t},\r\n\r\n\t\tset(target, prop, value, receiver) {\r\n\t\t\tvar s = sources.get(prop);\r\n\t\t\tvar has = prop in target;\r\n\r\n\t\t\t// variable.length = value -> clear all signals with index >= value\r\n\t\t\tif (is_proxied_array && prop === 'length') {\r\n\t\t\t\tfor (var i = value; i < /** @type {Source<number>} */ (s).v; i += 1) {\r\n\t\t\t\t\tvar other_s = sources.get(i + '');\r\n\t\t\t\t\tif (other_s !== undefined) {\r\n\t\t\t\t\t\tset(other_s, UNINITIALIZED);\r\n\t\t\t\t\t} else if (i in target) {\r\n\t\t\t\t\t\t// If the item exists in the original, we need to create a uninitialized source,\r\n\t\t\t\t\t\t// else a later read of the property would result in a source being created with\r\n\t\t\t\t\t\t// the value of the original item at that index.\r\n\t\t\t\t\t\tother_s = with_parent(() => source(UNINITIALIZED, stack));\r\n\t\t\t\t\t\tsources.set(i + '', other_s);\r\n\r\n\t\t\t\t\t\tif (DEV) {\r\n\t\t\t\t\t\t\ttag(other_s, get_label(path, i));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// If we haven't yet created a source for this property, we need to ensure\r\n\t\t\t// we do so otherwise if we read it later, then the write won't be tracked and\r\n\t\t\t// the heuristics of effects will be different vs if we had read the proxied\r\n\t\t\t// object property before writing to that property.\r\n\t\t\tif (s === undefined) {\r\n\t\t\t\tif (!has || get_descriptor(target, prop)?.writable) {\r\n\t\t\t\t\ts = with_parent(() => source(undefined, stack));\r\n\r\n\t\t\t\t\tif (DEV) {\r\n\t\t\t\t\t\ttag(s, get_label(path, prop));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tset(s, proxy(value));\r\n\r\n\t\t\t\t\tsources.set(prop, s);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\thas = s.v !== UNINITIALIZED;\r\n\r\n\t\t\t\tvar p = with_parent(() => proxy(value));\r\n\t\t\t\tset(s, p);\r\n\t\t\t}\r\n\r\n\t\t\tvar descriptor = Reflect.getOwnPropertyDescriptor(target, prop);\r\n\r\n\t\t\t// Set the new value before updating any signals so that any listeners get the new value\r\n\t\t\tif (descriptor?.set) {\r\n\t\t\t\tdescriptor.set.call(receiver, value);\r\n\t\t\t}\r\n\r\n\t\t\tif (!has) {\r\n\t\t\t\t// If we have mutated an array directly, we might need to\r\n\t\t\t\t// signal that length has also changed. Do it before updating metadata\r\n\t\t\t\t// to ensure that iterating over the array as a result of a metadata update\r\n\t\t\t\t// will not cause the length to be out of sync.\r\n\t\t\t\tif (is_proxied_array && typeof prop === 'string') {\r\n\t\t\t\t\tvar ls = /** @type {Source<number>} */ (sources.get('length'));\r\n\t\t\t\t\tvar n = Number(prop);\r\n\r\n\t\t\t\t\tif (Number.isInteger(n) && n >= ls.v) {\r\n\t\t\t\t\t\tset(ls, n + 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tincrement(version);\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t},\r\n\r\n\t\townKeys(target) {\r\n\t\t\tget(version);\r\n\r\n\t\t\tvar own_keys = Reflect.ownKeys(target).filter((key) => {\r\n\t\t\t\tvar source = sources.get(key);\r\n\t\t\t\treturn source === undefined || source.v !== UNINITIALIZED;\r\n\t\t\t});\r\n\r\n\t\t\tfor (var [key, source] of sources) {\r\n\t\t\t\tif (source.v !== UNINITIALIZED && !(key in target)) {\r\n\t\t\t\t\town_keys.push(key);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn own_keys;\r\n\t\t},\r\n\r\n\t\tsetPrototypeOf() {\r\n\t\t\te.state_prototype_fixed();\r\n\t\t}\r\n\t});\r\n}\r\n\r\n/**\r\n * @param {string} path\r\n * @param {string | symbol} prop\r\n */\r\nfunction get_label(path, prop) {\r\n\tif (typeof prop === 'symbol') return `${path}[Symbol(${prop.description ?? ''})]`;\r\n\tif (regex_is_valid_identifier.test(prop)) return `${path}.${prop}`;\r\n\treturn /^\\d+$/.test(prop) ? `${path}[${prop}]` : `${path}['${prop}']`;\r\n}\r\n\r\n/**\r\n * @param {any} value\r\n */\r\nexport function get_proxied_value(value) {\r\n\ttry {\r\n\t\tif (value !== null && typeof value === 'object' && STATE_SYMBOL in value) {\r\n\t\t\treturn value[STATE_SYMBOL];\r\n\t\t}\r\n\t} catch {\r\n\t\t// the above if check can throw an error if the value in question\r\n\t\t// is the contentWindow of an iframe on another domain, in which\r\n\t\t// case we want to just return the value (because it's definitely\r\n\t\t// not a proxied value) so we don't break any JavaScript interacting\r\n\t\t// with that iframe (such as various payment companies client side\r\n\t\t// JavaScript libraries interacting with their iframes on the same\r\n\t\t// domain)\r\n\t}\r\n\r\n\treturn value;\r\n}\r\n\r\n/**\r\n * @param {any} a\r\n * @param {any} b\r\n */\r\nexport function is(a, b) {\r\n\treturn Object.is(get_proxied_value(a), get_proxied_value(b));\r\n}\r\n\r\nconst ARRAY_MUTATING_METHODS = new Set([\r\n\t'copyWithin',\r\n\t'fill',\r\n\t'pop',\r\n\t'push',\r\n\t'reverse',\r\n\t'shift',\r\n\t'sort',\r\n\t'splice',\r\n\t'unshift'\r\n]);\r\n\r\n/**\r\n * Wrap array mutating methods so $inspect is triggered only once and\r\n * to prevent logging an array in intermediate state (e.g. with an empty slot)\r\n * @param {any[]} array\r\n */\r\nfunction inspectable_array(array) {\r\n\treturn new Proxy(array, {\r\n\t\tget(target, prop, receiver) {\r\n\t\t\tvar value = Reflect.get(target, prop, receiver);\r\n\t\t\tif (!ARRAY_MUTATING_METHODS.has(/** @type {string} */ (prop))) {\r\n\t\t\t\treturn value;\r\n\t\t\t}\r\n\r\n\t\t\t/**\r\n\t\t\t * @this {any[]}\r\n\t\t\t * @param {any[]} args\r\n\t\t\t */\r\n\t\t\treturn function (...args) {\r\n\t\t\t\tset_inspect_effects_deferred();\r\n\t\t\t\tvar result = value.apply(this, args);\r\n\t\t\t\tflush_inspect_effects();\r\n\t\t\t\treturn result;\r\n\t\t\t};\r\n\t\t}\r\n\t});\r\n}\r\n", "import * as w from '../warnings.js';\r\nimport { get_proxied_value } from '../proxy.js';\r\n\r\nexport function init_array_prototype_warnings() {\r\n\tconst array_prototype = Array.prototype;\r\n\t// The REPL ends up here over and over, and this prevents it from adding more and more patches\r\n\t// of the same kind to the prototype, which would slow down everything over time.\r\n\t// @ts-expect-error\r\n\tconst cleanup = Array.__svelte_cleanup;\r\n\tif (cleanup) {\r\n\t\tcleanup();\r\n\t}\r\n\r\n\tconst { indexOf, lastIndexOf, includes } = array_prototype;\r\n\r\n\tarray_prototype.indexOf = function (item, from_index) {\r\n\t\tconst index = indexOf.call(this, item, from_index);\r\n\r\n\t\tif (index === -1) {\r\n\t\t\tfor (let i = from_index ?? 0; i < this.length; i += 1) {\r\n\t\t\t\tif (get_proxied_value(this[i]) === item) {\r\n\t\t\t\t\tw.state_proxy_equality_mismatch('array.indexOf(...)');\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn index;\r\n\t};\r\n\r\n\tarray_prototype.lastIndexOf = function (item, from_index) {\r\n\t\t// we need to specify this.length - 1 because it's probably using something like\r\n\t\t// `arguments` inside so passing undefined is different from not passing anything\r\n\t\tconst index = lastIndexOf.call(this, item, from_index ?? this.length - 1);\r\n\r\n\t\tif (index === -1) {\r\n\t\t\tfor (let i = 0; i <= (from_index ?? this.length - 1); i += 1) {\r\n\t\t\t\tif (get_proxied_value(this[i]) === item) {\r\n\t\t\t\t\tw.state_proxy_equality_mismatch('array.lastIndexOf(...)');\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn index;\r\n\t};\r\n\r\n\tarray_prototype.includes = function (item, from_index) {\r\n\t\tconst has = includes.call(this, item, from_index);\r\n\r\n\t\tif (!has) {\r\n\t\t\tfor (let i = 0; i < this.length; i += 1) {\r\n\t\t\t\tif (get_proxied_value(this[i]) === item) {\r\n\t\t\t\t\tw.state_proxy_equality_mismatch('array.includes(...)');\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn has;\r\n\t};\r\n\r\n\t// @ts-expect-error\r\n\tArray.__svelte_cleanup = () => {\r\n\t\tarray_prototype.indexOf = indexOf;\r\n\t\tarray_prototype.lastIndexOf = lastIndexOf;\r\n\t\tarray_prototype.includes = includes;\r\n\t};\r\n}\r\n\r\n/**\r\n * @param {any} a\r\n * @param {any} b\r\n * @param {boolean} equal\r\n * @returns {boolean}\r\n */\r\nexport function strict_equals(a, b, equal = true) {\r\n\t// try-catch needed because this tries to read properties of `a` and `b`,\r\n\t// which could be disallowed for example in a secure context\r\n\ttry {\r\n\t\tif ((a === b) !== (get_proxied_value(a) === get_proxied_value(b))) {\r\n\t\t\tw.state_proxy_equality_mismatch(equal ? '===' : '!==');\r\n\t\t}\r\n\t} catch {}\r\n\r\n\treturn (a === b) === equal;\r\n}\r\n\r\n/**\r\n * @param {any} a\r\n * @param {any} b\r\n * @param {boolean} equal\r\n * @returns {boolean}\r\n */\r\nexport function equals(a, b, equal = true) {\r\n\tif ((a == b) !== (get_proxied_value(a) == get_proxied_value(b))) {\r\n\t\tw.state_proxy_equality_mismatch(equal ? '==' : '!=');\r\n\t}\r\n\r\n\treturn (a == b) === equal;\r\n}\r\n", "/** @import { Effect, TemplateNode } from '#client' */\r\nimport { hydrate_node, hydrating, set_hydrate_node } from './hydration.js';\r\nimport { DEV } from 'esm-env';\r\nimport { init_array_prototype_warnings } from '../dev/equality.js';\r\nimport { get_descriptor, is_extensible } from '../../shared/utils.js';\r\nimport { active_effect } from '../runtime.js';\r\nimport { async_mode_flag } from '../../flags/index.js';\r\nimport { TEXT_NODE, EFFECT_RAN } from '#client/constants';\r\nimport { eager_block_effects } from '../reactivity/batch.js';\r\n\r\n// export these for reference in the compiled code, making global name deduplication unnecessary\r\n/** @type {Window} */\r\nexport var $window;\r\n\r\n/** @type {Document} */\r\nexport var $document;\r\n\r\n/** @type {boolean} */\r\nexport var is_firefox;\r\n\r\n/** @type {() => Node | null} */\r\nvar first_child_getter;\r\n/** @type {() => Node | null} */\r\nvar next_sibling_getter;\r\n\r\n/**\r\n * Initialize these lazily to avoid issues when using the runtime in a server context\r\n * where these globals are not available while avoiding a separate server entry point\r\n */\r\nexport function init_operations() {\r\n\tif ($window !== undefined) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t$window = window;\r\n\t$document = document;\r\n\tis_firefox = /Firefox/.test(navigator.userAgent);\r\n\r\n\tvar element_prototype = Element.prototype;\r\n\tvar node_prototype = Node.prototype;\r\n\tvar text_prototype = Text.prototype;\r\n\r\n\t// @ts-ignore\r\n\tfirst_child_getter = get_descriptor(node_prototype, 'firstChild').get;\r\n\t// @ts-ignore\r\n\tnext_sibling_getter = get_descriptor(node_prototype, 'nextSibling').get;\r\n\r\n\tif (is_extensible(element_prototype)) {\r\n\t\t// the following assignments improve perf of lookups on DOM nodes\r\n\t\t// @ts-expect-error\r\n\t\telement_prototype.__click = undefined;\r\n\t\t// @ts-expect-error\r\n\t\telement_prototype.__className = undefined;\r\n\t\t// @ts-expect-error\r\n\t\telement_prototype.__attributes = null;\r\n\t\t// @ts-expect-error\r\n\t\telement_prototype.__style = undefined;\r\n\t\t// @ts-expect-error\r\n\t\telement_prototype.__e = undefined;\r\n\t}\r\n\r\n\tif (is_extensible(text_prototype)) {\r\n\t\t// @ts-expect-error\r\n\t\ttext_prototype.__t = undefined;\r\n\t}\r\n\r\n\tif (DEV) {\r\n\t\t// @ts-expect-error\r\n\t\telement_prototype.__svelte_meta = null;\r\n\r\n\t\tinit_array_prototype_warnings();\r\n\t}\r\n}\r\n\r\n/**\r\n * @param {string} value\r\n * @returns {Text}\r\n */\r\nexport function create_text(value = '') {\r\n\treturn document.createTextNode(value);\r\n}\r\n\r\n/**\r\n * @template {Node} N\r\n * @param {N} node\r\n * @returns {Node | null}\r\n */\r\n/*@__NO_SIDE_EFFECTS__*/\r\nexport function get_first_child(node) {\r\n\treturn first_child_getter.call(node);\r\n}\r\n\r\n/**\r\n * @template {Node} N\r\n * @param {N} node\r\n * @returns {Node | null}\r\n */\r\n/*@__NO_SIDE_EFFECTS__*/\r\nexport function get_next_sibling(node) {\r\n\treturn next_sibling_getter.call(node);\r\n}\r\n\r\n/**\r\n * Don't mark this as side-effect-free, hydration needs to walk all nodes\r\n * @template {Node} N\r\n * @param {N} node\r\n * @param {boolean} is_text\r\n * @returns {Node | null}\r\n */\r\nexport function child(node, is_text) {\r\n\tif (!hydrating) {\r\n\t\treturn get_first_child(node);\r\n\t}\r\n\r\n\tvar child = /** @type {TemplateNode} */ (get_first_child(hydrate_node));\r\n\r\n\t// Child can be null if we have an element with a single child, like `<p>{text}</p>`, where `text` is empty\r\n\tif (child === null) {\r\n\t\tchild = hydrate_node.appendChild(create_text());\r\n\t} else if (is_text && child.nodeType !== TEXT_NODE) {\r\n\t\tvar text = create_text();\r\n\t\tchild?.before(text);\r\n\t\tset_hydrate_node(text);\r\n\t\treturn text;\r\n\t}\r\n\r\n\tset_hydrate_node(child);\r\n\treturn child;\r\n}\r\n\r\n/**\r\n * Don't mark this as side-effect-free, hydration needs to walk all nodes\r\n * @param {DocumentFragment | TemplateNode[]} fragment\r\n * @param {boolean} is_text\r\n * @returns {Node | null}\r\n */\r\nexport function first_child(fragment, is_text) {\r\n\tif (!hydrating) {\r\n\t\t// when not hydrating, `fragment` is a `DocumentFragment` (the result of calling `open_frag`)\r\n\t\tvar first = /** @type {DocumentFragment} */ (get_first_child(/** @type {Node} */ (fragment)));\r\n\r\n\t\t// TODO prevent user comments with the empty string when preserveComments is true\r\n\t\tif (first instanceof Comment && first.data === '') return get_next_sibling(first);\r\n\r\n\t\treturn first;\r\n\t}\r\n\r\n\t// if an {expression} is empty during SSR, there might be no\r\n\t// text node to hydrate — we must therefore create one\r\n\tif (is_text && hydrate_node?.nodeType !== TEXT_NODE) {\r\n\t\tvar text = create_text();\r\n\r\n\t\thydrate_node?.before(text);\r\n\t\tset_hydrate_node(text);\r\n\t\treturn text;\r\n\t}\r\n\r\n\treturn hydrate_node;\r\n}\r\n\r\n/**\r\n * Don't mark this as side-effect-free, hydration needs to walk all nodes\r\n * @param {TemplateNode} node\r\n * @param {number} count\r\n * @param {boolean} is_text\r\n * @returns {Node | null}\r\n */\r\nexport function sibling(node, count = 1, is_text = false) {\r\n\tlet next_sibling = hydrating ? hydrate_node : node;\r\n\tvar last_sibling;\r\n\r\n\twhile (count--) {\r\n\t\tlast_sibling = next_sibling;\r\n\t\tnext_sibling = /** @type {TemplateNode} */ (get_next_sibling(next_sibling));\r\n\t}\r\n\r\n\tif (!hydrating) {\r\n\t\treturn next_sibling;\r\n\t}\r\n\r\n\t// if a sibling {expression} is empty during SSR, there might be no\r\n\t// text node to hydrate — we must therefore create one\r\n\tif (is_text && next_sibling?.nodeType !== TEXT_NODE) {\r\n\t\tvar text = create_text();\r\n\t\t// If the next sibling is `null` and we're handling text then it's because\r\n\t\t// the SSR content was empty for the text, so we need to generate a new text\r\n\t\t// node and insert it after the last sibling\r\n\t\tif (next_sibling === null) {\r\n\t\t\tlast_sibling?.after(text);\r\n\t\t} else {\r\n\t\t\tnext_sibling.before(text);\r\n\t\t}\r\n\t\tset_hydrate_node(text);\r\n\t\treturn text;\r\n\t}\r\n\r\n\tset_hydrate_node(next_sibling);\r\n\treturn /** @type {TemplateNode} */ (next_sibling);\r\n}\r\n\r\n/**\r\n * @template {Node} N\r\n * @param {N} node\r\n * @returns {void}\r\n */\r\nexport function clear_text_content(node) {\r\n\tnode.textContent = '';\r\n}\r\n\r\n/**\r\n * Returns `true` if we're updating the current block, for example `condition` in\r\n * an `{#if condition}` block just changed. In this case, the branch should be\r\n * appended (or removed) at the same time as other updates within the\r\n * current `<svelte:boundary>`\r\n */\r\nexport function should_defer_append() {\r\n\tif (!async_mode_flag) return false;\r\n\tif (eager_block_effects !== null) return false;\r\n\r\n\tvar flags = /** @type {Effect} */ (active_effect).f;\r\n\treturn (flags & EFFECT_RAN) !== 0;\r\n}\r\n\r\n/**\r\n *\r\n * @param {string} tag\r\n * @param {string} [namespace]\r\n * @param {string} [is]\r\n * @returns\r\n */\r\nexport function create_element(tag, namespace, is) {\r\n\tlet options = is ? { is } : undefined;\r\n\tif (namespace) {\r\n\t\treturn document.createElementNS(namespace, tag, options);\r\n\t}\r\n\treturn document.createElement(tag, options);\r\n}\r\n\r\nexport function create_fragment() {\r\n\treturn document.createDocumentFragment();\r\n}\r\n\r\n/**\r\n * @param {string} data\r\n * @returns\r\n */\r\nexport function create_comment(data = '') {\r\n\treturn document.createComment(data);\r\n}\r\n\r\n/**\r\n * @param {Element} element\r\n * @param {string} key\r\n * @param {string} value\r\n * @returns\r\n */\r\nexport function set_attribute(element, key, value = '') {\r\n\tif (key.startsWith('xlink:')) {\r\n\t\telement.setAttributeNS('http://www.w3.org/1999/xlink', key, value);\r\n\t\treturn;\r\n\t}\r\n\treturn element.setAttribute(key, value);\r\n}\r\n", "import { teardown } from '../../../reactivity/effects.js';\r\nimport {\r\n\tactive_effect,\r\n\tactive_reaction,\r\n\tset_active_effect,\r\n\tset_active_reaction\r\n} from '../../../runtime.js';\r\nimport { add_form_reset_listener } from '../misc.js';\r\n\r\n/**\r\n * Fires the handler once immediately (unless corresponding arg is set to `false`),\r\n * then listens to the given events until the render effect context is destroyed\r\n * @param {EventTarget} target\r\n * @param {Array<string>} events\r\n * @param {(event?: Event) => void} handler\r\n * @param {any} call_handler_immediately\r\n */\r\nexport function listen(target, events, handler, call_handler_immediately = true) {\r\n\tif (call_handler_immediately) {\r\n\t\thandler();\r\n\t}\r\n\r\n\tfor (var name of events) {\r\n\t\ttarget.addEventListener(name, handler);\r\n\t}\r\n\r\n\tteardown(() => {\r\n\t\tfor (var name of events) {\r\n\t\t\ttarget.removeEventListener(name, handler);\r\n\t\t}\r\n\t});\r\n}\r\n\r\n/**\r\n * @template T\r\n * @param {() => T} fn\r\n */\r\nexport function without_reactive_context(fn) {\r\n\tvar previous_reaction = active_reaction;\r\n\tvar previous_effect = active_effect;\r\n\tset_active_reaction(null);\r\n\tset_active_effect(null);\r\n\ttry {\r\n\t\treturn fn();\r\n\t} finally {\r\n\t\tset_active_reaction(previous_reaction);\r\n\t\tset_active_effect(previous_effect);\r\n\t}\r\n}\r\n\r\n/**\r\n * Listen to the given event, and then instantiate a global form reset listener if not already done,\r\n * to notify all bindings when the form is reset\r\n * @param {HTMLElement} element\r\n * @param {string} event\r\n * @param {(is_reset?: true) => void} handler\r\n * @param {(is_reset?: true) => void} [on_reset]\r\n */\r\nexport function listen_to_event_and_reset_event(element, event, handler, on_reset = handler) {\r\n\telement.addEventListener(event, () => without_reactive_context(handler));\r\n\t// @ts-expect-error\r\n\tconst prev = element.__on_r;\r\n\tif (prev) {\r\n\t\t// special case for checkbox that can have multiple binds (group & checked)\r\n\t\t// @ts-expect-error\r\n\t\telement.__on_r = () => {\r\n\t\t\tprev();\r\n\t\t\ton_reset(true);\r\n\t\t};\r\n\t} else {\r\n\t\t// @ts-expect-error\r\n\t\telement.__on_r = () => on_reset(true);\r\n\t}\r\n\r\n\tadd_form_reset_listener();\r\n}\r\n", "/** @import { ComponentContext, ComponentContextLegacy, Derived, Effect, TemplateNode, TransitionManager } from '#client' */\r\nimport {\r\n\tis_dirty,\r\n\tactive_effect,\r\n\tactive_reaction,\r\n\tupdate_effect,\r\n\tget,\r\n\tis_destroying_effect,\r\n\tremove_reactions,\r\n\tset_active_reaction,\r\n\tset_is_destroying_effect,\r\n\tset_signal_status,\r\n\tuntrack,\r\n\tuntracking\r\n} from '../runtime.js';\r\nimport {\r\n\tDIRTY,\r\n\tBRANCH_EFFECT,\r\n\tRENDER_EFFECT,\r\n\tEFFECT,\r\n\tDESTROYED,\r\n\tINERT,\r\n\tEFFECT_RAN,\r\n\tBLOCK_EFFECT,\r\n\tROOT_EFFECT,\r\n\tEFFECT_TRANSPARENT,\r\n\tDERIVED,\r\n\tUNOWNED,\r\n\tCLEAN,\r\n\tINSPECT_EFFECT,\r\n\tHEAD_EFFECT,\r\n\tMAYBE_DIRTY,\r\n\tEFFECT_PRESERVED,\r\n\tSTALE_REACTION,\r\n\tUSER_EFFECT,\r\n\tASYNC\r\n} from '#client/constants';\r\nimport * as e from '../errors.js';\r\nimport { DEV } from 'esm-env';\r\nimport { define_property } from '../../shared/utils.js';\r\nimport { get_next_sibling } from '../dom/operations.js';\r\nimport { component_context, dev_current_component_function, dev_stack } from '../context.js';\r\nimport { Batch, schedule_effect } from './batch.js';\r\nimport { flatten } from './async.js';\r\nimport { without_reactive_context } from '../dom/elements/bindings/shared.js';\r\n\r\n/**\r\n * @param {'$effect' | '$effect.pre' | '$inspect'} rune\r\n */\r\nexport function validate_effect(rune) {\r\n\tif (active_effect === null && active_reaction === null) {\r\n\t\te.effect_orphan(rune);\r\n\t}\r\n\r\n\tif (active_reaction !== null && (active_reaction.f & UNOWNED) !== 0 && active_effect === null) {\r\n\t\te.effect_in_unowned_derived();\r\n\t}\r\n\r\n\tif (is_destroying_effect) {\r\n\t\te.effect_in_teardown(rune);\r\n\t}\r\n}\r\n\r\n/**\r\n * @param {Effect} effect\r\n * @param {Effect} parent_effect\r\n */\r\nfunction push_effect(effect, parent_effect) {\r\n\tvar parent_last = parent_effect.last;\r\n\tif (parent_last === null) {\r\n\t\tparent_effect.last = parent_effect.first = effect;\r\n\t} else {\r\n\t\tparent_last.next = effect;\r\n\t\teffect.prev = parent_last;\r\n\t\tparent_effect.last = effect;\r\n\t}\r\n}\r\n\r\n/**\r\n * @param {number} type\r\n * @param {null | (() => void | (() => void))} fn\r\n * @param {boolean} sync\r\n * @param {boolean} push\r\n * @returns {Effect}\r\n */\r\nfunction create_effect(type, fn, sync, push = true) {\r\n\tvar parent = active_effect;\r\n\r\n\tif (DEV) {\r\n\t\t// Ensure the parent is never an inspect effect\r\n\t\twhile (parent !== null && (parent.f & INSPECT_EFFECT) !== 0) {\r\n\t\t\tparent = parent.parent;\r\n\t\t}\r\n\t}\r\n\r\n\tif (parent !== null && (parent.f & INERT) !== 0) {\r\n\t\ttype |= INERT;\r\n\t}\r\n\r\n\t/** @type {Effect} */\r\n\tvar effect = {\r\n\t\tctx: component_context,\r\n\t\tdeps: null,\r\n\t\tnodes_start: null,\r\n\t\tnodes_end: null,\r\n\t\tf: type | DIRTY,\r\n\t\tfirst: null,\r\n\t\tfn,\r\n\t\tlast: null,\r\n\t\tnext: null,\r\n\t\tparent,\r\n\t\tb: parent && parent.b,\r\n\t\tprev: null,\r\n\t\tteardown: null,\r\n\t\ttransitions: null,\r\n\t\twv: 0,\r\n\t\tac: null\r\n\t};\r\n\r\n\tif (DEV) {\r\n\t\teffect.component_function = dev_current_component_function;\r\n\t}\r\n\r\n\tif (sync) {\r\n\t\ttry {\r\n\t\t\tupdate_effect(effect);\r\n\t\t\teffect.f |= EFFECT_RAN;\r\n\t\t} catch (e) {\r\n\t\t\tdestroy_effect(effect);\r\n\t\t\tthrow e;\r\n\t\t}\r\n\t} else if (fn !== null) {\r\n\t\tschedule_effect(effect);\r\n\t}\r\n\r\n\tif (push) {\r\n\t\t/** @type {Effect | null} */\r\n\t\tvar e = effect;\r\n\r\n\t\t// if an effect has already ran and doesn't need to be kept in the tree\r\n\t\t// (because it won't re-run, has no DOM, and has no teardown etc)\r\n\t\t// then we skip it and go to its child (if any)\r\n\t\tif (\r\n\t\t\tsync &&\r\n\t\t\te.deps === null &&\r\n\t\t\te.teardown === null &&\r\n\t\t\te.nodes_start === null &&\r\n\t\t\te.first === e.last && // either `null`, or a singular child\r\n\t\t\t(e.f & EFFECT_PRESERVED) === 0\r\n\t\t) {\r\n\t\t\te = e.first;\r\n\t\t}\r\n\r\n\t\tif (e !== null) {\r\n\t\t\te.parent = parent;\r\n\r\n\t\t\tif (parent !== null) {\r\n\t\t\t\tpush_effect(e, parent);\r\n\t\t\t}\r\n\r\n\t\t\t// if we're in a derived, add the effect there too\r\n\t\t\tif (\r\n\t\t\t\tactive_reaction !== null &&\r\n\t\t\t\t(active_reaction.f & DERIVED) !== 0 &&\r\n\t\t\t\t(type & ROOT_EFFECT) === 0\r\n\t\t\t) {\r\n\t\t\t\tvar derived = /** @type {Derived} */ (active_reaction);\r\n\t\t\t\t(derived.effects ??= []).push(e);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn effect;\r\n}\r\n\r\n/**\r\n * Internal representation of `$effect.tracking()`\r\n * @returns {boolean}\r\n */\r\nexport function effect_tracking() {\r\n\treturn active_reaction !== null && !untracking;\r\n}\r\n\r\n/**\r\n * @param {() => void} fn\r\n */\r\nexport function teardown(fn) {\r\n\tconst effect = create_effect(RENDER_EFFECT, null, false);\r\n\tset_signal_status(effect, CLEAN);\r\n\teffect.teardown = fn;\r\n\treturn effect;\r\n}\r\n\r\n/**\r\n * Internal representation of `$effect(...)`\r\n * @param {() => void | (() => void)} fn\r\n */\r\nexport function user_effect(fn) {\r\n\tvalidate_effect('$effect');\r\n\r\n\tif (DEV) {\r\n\t\tdefine_property(fn, 'name', {\r\n\t\t\tvalue: '$effect'\r\n\t\t});\r\n\t}\r\n\r\n\t// Non-nested `$effect(...)` in a component should be deferred\r\n\t// until the component is mounted\r\n\tvar flags = /** @type {Effect} */ (active_effect).f;\r\n\tvar defer = !active_reaction && (flags & BRANCH_EFFECT) !== 0 && (flags & EFFECT_RAN) === 0;\r\n\r\n\tif (defer) {\r\n\t\t// Top-level `$effect(...)` in an unmounted component — defer until mount\r\n\t\tvar context = /** @type {ComponentContext} */ (component_context);\r\n\t\t(context.e ??= []).push(fn);\r\n\t} else {\r\n\t\t// Everything else — create immediately\r\n\t\treturn create_user_effect(fn);\r\n\t}\r\n}\r\n\r\n/**\r\n * @param {() => void | (() => void)} fn\r\n */\r\nexport function create_user_effect(fn) {\r\n\treturn create_effect(EFFECT | USER_EFFECT, fn, false);\r\n}\r\n\r\n/**\r\n * Internal representation of `$effect.pre(...)`\r\n * @param {() => void | (() => void)} fn\r\n * @returns {Effect}\r\n */\r\nexport function user_pre_effect(fn) {\r\n\tvalidate_effect('$effect.pre');\r\n\tif (DEV) {\r\n\t\tdefine_property(fn, 'name', {\r\n\t\t\tvalue: '$effect.pre'\r\n\t\t});\r\n\t}\r\n\treturn create_effect(RENDER_EFFECT | USER_EFFECT, fn, true);\r\n}\r\n\r\n/** @param {() => void | (() => void)} fn */\r\nexport function inspect_effect(fn) {\r\n\treturn create_effect(INSPECT_EFFECT, fn, true);\r\n}\r\n\r\n/**\r\n * Internal representation of `$effect.root(...)`\r\n * @param {() => void | (() => void)} fn\r\n * @returns {() => void}\r\n */\r\nexport function effect_root(fn) {\r\n\tBatch.ensure();\r\n\tconst effect = create_effect(ROOT_EFFECT | EFFECT_PRESERVED, fn, true);\r\n\r\n\treturn () => {\r\n\t\tdestroy_effect(effect);\r\n\t};\r\n}\r\n\r\n/**\r\n * An effect root whose children can transition out\r\n * @param {() => void} fn\r\n * @returns {(options?: { outro?: boolean }) => Promise<void>}\r\n */\r\nexport function component_root(fn) {\r\n\tBatch.ensure();\r\n\tconst effect = create_effect(ROOT_EFFECT | EFFECT_PRESERVED, fn, true);\r\n\r\n\treturn (options = {}) => {\r\n\t\treturn new Promise((fulfil) => {\r\n\t\t\tif (options.outro) {\r\n\t\t\t\tpause_effect(effect, () => {\r\n\t\t\t\t\tdestroy_effect(effect);\r\n\t\t\t\t\tfulfil(undefined);\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tdestroy_effect(effect);\r\n\t\t\t\tfulfil(undefined);\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n}\r\n\r\n/**\r\n * @param {() => void | (() => void)} fn\r\n * @returns {Effect}\r\n */\r\nexport function effect(fn) {\r\n\treturn create_effect(EFFECT, fn, false);\r\n}\r\n\r\n/**\r\n * Internal representation of `$: ..`\r\n * @param {() => any} deps\r\n * @param {() => void | (() => void)} fn\r\n */\r\nexport function legacy_pre_effect(deps, fn) {\r\n\tvar context = /** @type {ComponentContextLegacy} */ (component_context);\r\n\r\n\t/** @type {{ effect: null | Effect, ran: boolean, deps: () => any }} */\r\n\tvar token = { effect: null, ran: false, deps };\r\n\r\n\tcontext.l.$.push(token);\r\n\r\n\ttoken.effect = render_effect(() => {\r\n\t\tdeps();\r\n\r\n\t\t// If this legacy pre effect has already run before the end of the reset, then\r\n\t\t// bail out to emulate the same behavior.\r\n\t\tif (token.ran) return;\r\n\r\n\t\ttoken.ran = true;\r\n\t\tuntrack(fn);\r\n\t});\r\n}\r\n\r\nexport function legacy_pre_effect_reset() {\r\n\tvar context = /** @type {ComponentContextLegacy} */ (component_context);\r\n\r\n\trender_effect(() => {\r\n\t\t// Run dirty `$:` statements\r\n\t\tfor (var token of context.l.$) {\r\n\t\t\ttoken.deps();\r\n\r\n\t\t\tvar effect = token.effect;\r\n\r\n\t\t\t// If the effect is CLEAN, then make it MAYBE_DIRTY. This ensures we traverse through\r\n\t\t\t// the effects dependencies and correctly ensure each dependency is up-to-date.\r\n\t\t\tif ((effect.f & CLEAN) !== 0) {\r\n\t\t\t\tset_signal_status(effect, MAYBE_DIRTY);\r\n\t\t\t}\r\n\r\n\t\t\tif (is_dirty(effect)) {\r\n\t\t\t\tupdate_effect(effect);\r\n\t\t\t}\r\n\r\n\t\t\ttoken.ran = false;\r\n\t\t}\r\n\t});\r\n}\r\n\r\n/**\r\n * @param {() => void | (() => void)} fn\r\n * @returns {Effect}\r\n */\r\nexport function async_effect(fn) {\r\n\treturn create_effect(ASYNC | EFFECT_PRESERVED, fn, true);\r\n}\r\n\r\n/**\r\n * @param {() => void | (() => void)} fn\r\n * @returns {Effect}\r\n */\r\nexport function render_effect(fn, flags = 0) {\r\n\treturn create_effect(RENDER_EFFECT | flags, fn, true);\r\n}\r\n\r\n/**\r\n * @param {(...expressions: any) => void | (() => void)} fn\r\n * @param {Array<() => any>} sync\r\n * @param {Array<() => Promise<any>>} async\r\n */\r\nexport function template_effect(fn, sync = [], async = []) {\r\n\tflatten(sync, async, (values) => {\r\n\t\tcreate_effect(RENDER_EFFECT, () => fn(...values.map(get)), true);\r\n\t});\r\n}\r\n\r\n/**\r\n * @param {(() => void)} fn\r\n * @param {number} flags\r\n */\r\nexport function block(fn, flags = 0) {\r\n\tvar effect = create_effect(BLOCK_EFFECT | flags, fn, true);\r\n\tif (DEV) {\r\n\t\teffect.dev_stack = dev_stack;\r\n\t}\r\n\treturn effect;\r\n}\r\n\r\n/**\r\n * @param {(() => void)} fn\r\n * @param {boolean} [push]\r\n */\r\nexport function branch(fn, push = true) {\r\n\treturn create_effect(BRANCH_EFFECT | EFFECT_PRESERVED, fn, true, push);\r\n}\r\n\r\n/**\r\n * @param {Effect} effect\r\n */\r\nexport function execute_effect_teardown(effect) {\r\n\tvar teardown = effect.teardown;\r\n\tif (teardown !== null) {\r\n\t\tconst previously_destroying_effect = is_destroying_effect;\r\n\t\tconst previous_reaction = active_reaction;\r\n\t\tset_is_destroying_effect(true);\r\n\t\tset_active_reaction(null);\r\n\t\ttry {\r\n\t\t\tteardown.call(null);\r\n\t\t} finally {\r\n\t\t\tset_is_destroying_effect(previously_destroying_effect);\r\n\t\t\tset_active_reaction(previous_reaction);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @param {Effect} signal\r\n * @param {boolean} remove_dom\r\n * @returns {void}\r\n */\r\nexport function destroy_effect_children(signal, remove_dom = false) {\r\n\tvar effect = signal.first;\r\n\tsignal.first = signal.last = null;\r\n\r\n\twhile (effect !== null) {\r\n\t\tconst controller = effect.ac;\r\n\r\n\t\tif (controller !== null) {\r\n\t\t\twithout_reactive_context(() => {\r\n\t\t\t\tcontroller.abort(STALE_REACTION);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tvar next = effect.next;\r\n\r\n\t\tif ((effect.f & ROOT_EFFECT) !== 0) {\r\n\t\t\t// this is now an independent root\r\n\t\t\teffect.parent = null;\r\n\t\t} else {\r\n\t\t\tdestroy_effect(effect, remove_dom);\r\n\t\t}\r\n\r\n\t\teffect = next;\r\n\t}\r\n}\r\n\r\n/**\r\n * @param {Effect} signal\r\n * @returns {void}\r\n */\r\nexport function destroy_block_effect_children(signal) {\r\n\tvar effect = signal.first;\r\n\r\n\twhile (effect !== null) {\r\n\t\tvar next = effect.next;\r\n\t\tif ((effect.f & BRANCH_EFFECT) === 0) {\r\n\t\t\tdestroy_effect(effect);\r\n\t\t}\r\n\t\teffect = next;\r\n\t}\r\n}\r\n\r\n/**\r\n * @param {Effect} effect\r\n * @param {boolean} [remove_dom]\r\n * @returns {void}\r\n */\r\nexport function destroy_effect(effect, remove_dom = true) {\r\n\tvar removed = false;\r\n\r\n\tif (\r\n\t\t(remove_dom || (effect.f & HEAD_EFFECT) !== 0) &&\r\n\t\teffect.nodes_start !== null &&\r\n\t\teffect.nodes_end !== null\r\n\t) {\r\n\t\tremove_effect_dom(effect.nodes_start, /** @type {TemplateNode} */ (effect.nodes_end));\r\n\t\tremoved = true;\r\n\t}\r\n\r\n\tdestroy_effect_children(effect, remove_dom && !removed);\r\n\tremove_reactions(effect, 0);\r\n\tset_signal_status(effect, DESTROYED);\r\n\r\n\tvar transitions = effect.transitions;\r\n\r\n\tif (transitions !== null) {\r\n\t\tfor (const transition of transitions) {\r\n\t\t\ttransition.stop();\r\n\t\t}\r\n\t}\r\n\r\n\texecute_effect_teardown(effect);\r\n\r\n\tvar parent = effect.parent;\r\n\r\n\t// If the parent doesn't have any children, then skip this work altogether\r\n\tif (parent !== null && parent.first !== null) {\r\n\t\tunlink_effect(effect);\r\n\t}\r\n\r\n\tif (DEV) {\r\n\t\teffect.component_function = null;\r\n\t}\r\n\r\n\t// `first` and `child` are nulled out in destroy_effect_children\r\n\t// we don't null out `parent` so that error propagation can work correctly\r\n\teffect.next =\r\n\t\teffect.prev =\r\n\t\teffect.teardown =\r\n\t\teffect.ctx =\r\n\t\teffect.deps =\r\n\t\teffect.fn =\r\n\t\teffect.nodes_start =\r\n\t\teffect.nodes_end =\r\n\t\teffect.ac =\r\n\t\t\tnull;\r\n}\r\n\r\n/**\r\n *\r\n * @param {TemplateNode | null} node\r\n * @param {TemplateNode} end\r\n */\r\nexport function remove_effect_dom(node, end) {\r\n\twhile (node !== null) {\r\n\t\t/** @type {TemplateNode | null} */\r\n\t\tvar next = node === end ? null : /** @type {TemplateNode} */ (get_next_sibling(node));\r\n\r\n\t\tnode.remove();\r\n\t\tnode = next;\r\n\t}\r\n}\r\n\r\n/**\r\n * Detach an effect from the effect tree, freeing up memory and\r\n * reducing the amount of work that happens on subsequent traversals\r\n * @param {Effect} effect\r\n */\r\nexport function unlink_effect(effect) {\r\n\tvar parent = effect.parent;\r\n\tvar prev = effect.prev;\r\n\tvar next = effect.next;\r\n\r\n\tif (prev !== null) prev.next = next;\r\n\tif (next !== null) next.prev = prev;\r\n\r\n\tif (parent !== null) {\r\n\t\tif (parent.first === effect) parent.first = next;\r\n\t\tif (parent.last === effect) parent.last = prev;\r\n\t}\r\n}\r\n\r\n/**\r\n * When a block effect is removed, we don't immediately destroy it or yank it\r\n * out of the DOM, because it might have transitions. Instead, we 'pause' it.\r\n * It stays around (in memory, and in the DOM) until outro transitions have\r\n * completed, and if the state change is reversed then we _resume_ it.\r\n * A paused effect does not update, and the DOM subtree becomes inert.\r\n * @param {Effect} effect\r\n * @param {() => void} [callback]\r\n */\r\nexport function pause_effect(effect, callback) {\r\n\t/** @type {TransitionManager[]} */\r\n\tvar transitions = [];\r\n\r\n\tpause_children(effect, transitions, true);\r\n\r\n\trun_out_transitions(transitions, () => {\r\n\t\tdestroy_effect(effect);\r\n\t\tif (callback) callback();\r\n\t});\r\n}\r\n\r\n/**\r\n * @param {TransitionManager[]} transitions\r\n * @param {() => void} fn\r\n */\r\nexport function run_out_transitions(transitions, fn) {\r\n\tvar remaining = transitions.length;\r\n\tif (remaining > 0) {\r\n\t\tvar check = () => --remaining || fn();\r\n\t\tfor (var transition of transitions) {\r\n\t\t\ttransition.out(check);\r\n\t\t}\r\n\t} else {\r\n\t\tfn();\r\n\t}\r\n}\r\n\r\n/**\r\n * @param {Effect} effect\r\n * @param {TransitionManager[]} transitions\r\n * @param {boolean} local\r\n */\r\nexport function pause_children(effect, transitions, local) {\r\n\tif ((effect.f & INERT) !== 0) return;\r\n\teffect.f ^= INERT;\r\n\r\n\tif (effect.transitions !== null) {\r\n\t\tfor (const transition of effect.transitions) {\r\n\t\t\tif (transition.is_global || local) {\r\n\t\t\t\ttransitions.push(transition);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tvar child = effect.first;\r\n\r\n\twhile (child !== null) {\r\n\t\tvar sibling = child.next;\r\n\t\tvar transparent = (child.f & EFFECT_TRANSPARENT) !== 0 || (child.f & BRANCH_EFFECT) !== 0;\r\n\t\t// TODO we don't need to call pause_children recursively with a linked list in place\r\n\t\t// it's slightly more involved though as we have to account for `transparent` changing\r\n\t\t// through the tree.\r\n\t\tpause_children(child, transitions, transparent ? local : false);\r\n\t\tchild = sibling;\r\n\t}\r\n}\r\n\r\n/**\r\n * The opposite of `pause_effect`. We call this if (for example)\r\n * `x` becomes falsy then truthy: `{#if x}...{/if}`\r\n * @param {Effect} effect\r\n */\r\nexport function resume_effect(effect) {\r\n\tresume_children(effect, true);\r\n}\r\n\r\n/**\r\n * @param {Effect} effect\r\n * @param {boolean} local\r\n */\r\nfunction resume_children(effect, local) {\r\n\tif ((effect.f & INERT) === 0) return;\r\n\teffect.f ^= INERT;\r\n\r\n\t// If a dependency of this effect changed while it was paused,\r\n\t// schedule the effect to update. we don't use `is_dirty`\r\n\t// here because we don't want to eagerly recompute a derived like\r\n\t// `{#if foo}{foo.bar()}{/if}` if `foo` is now `undefined\r\n\tif ((effect.f & CLEAN) === 0) {\r\n\t\tset_signal_status(effect, DIRTY);\r\n\t\tschedule_effect(effect);\r\n\t}\r\n\r\n\tvar child = effect.first;\r\n\r\n\twhile (child !== null) {\r\n\t\tvar sibling = child.next;\r\n\t\tvar transparent = (child.f & EFFECT_TRANSPARENT) !== 0 || (child.f & BRANCH_EFFECT) !== 0;\r\n\t\t// TODO we don't need to call resume_children recursively with a linked list in place\r\n\t\t// it's slightly more involved though as we have to account for `transparent` changing\r\n\t\t// through the tree.\r\n\t\tresume_children(child, transparent ? local : false);\r\n\t\tchild = sibling;\r\n\t}\r\n\r\n\tif (effect.transitions !== null) {\r\n\t\tfor (const transition of effect.transitions) {\r\n\t\t\tif (transition.is_global || local) {\r\n\t\t\t\ttransition.in();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function aborted(effect = /** @type {Effect} */ (active_effect)) {\r\n\treturn (effect.f & DESTROYED) !== 0;\r\n}\r\n", "/** @import { Value } from '#client' */\r\nimport { internal_set } from './reactivity/sources.js';\r\nimport { untrack } from './runtime.js';\r\n\r\n/**\r\n * @type {Set<Value> | null}\r\n * @deprecated\r\n */\r\nexport let captured_signals = null;\r\n\r\n/**\r\n * Capture an array of all the signals that are read when `fn` is called\r\n * @template T\r\n * @param {() => T} fn\r\n */\r\nfunction capture_signals(fn) {\r\n\tvar previous_captured_signals = captured_signals;\r\n\r\n\ttry {\r\n\t\tcaptured_signals = new Set();\r\n\r\n\t\tuntrack(fn);\r\n\r\n\t\tif (previous_captured_signals !== null) {\r\n\t\t\tfor (var signal of captured_signals) {\r\n\t\t\t\tprevious_captured_signals.add(signal);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn captured_signals;\r\n\t} finally {\r\n\t\tcaptured_signals = previous_captured_signals;\r\n\t}\r\n}\r\n\r\n/**\r\n * Invokes a function and captures all signals that are read during the invocation,\r\n * then invalidates them.\r\n * @param {() => any} fn\r\n * @deprecated\r\n */\r\nexport function invalidate_inner_signals(fn) {\r\n\tfor (var signal of capture_signals(fn)) {\r\n\t\tinternal_set(signal, signal.v);\r\n\t}\r\n}\r\n", "/** @import { Derived, Effect, Reaction, Signal, Source, Value } from '#client' */\r\nimport { DEV } from 'esm-env';\r\nimport { get_descriptors, get_prototype_of, index_of } from '../shared/utils.js';\r\nimport {\r\n\tdestroy_block_effect_children,\r\n\tdestroy_effect_children,\r\n\texecute_effect_teardown\r\n} from './reactivity/effects.js';\r\nimport {\r\n\tDIRTY,\r\n\tMAYBE_DIRTY,\r\n\tCLEAN,\r\n\tDERIVED,\r\n\tUNOWNED,\r\n\tDESTROYED,\r\n\tBRANCH_EFFECT,\r\n\tSTATE_SYMBOL,\r\n\tBLOCK_EFFECT,\r\n\tROOT_EFFECT,\r\n\tDISCONNECTED,\r\n\tREACTION_IS_UPDATING,\r\n\tSTALE_REACTION,\r\n\tERROR_VALUE\r\n} from './constants.js';\r\nimport { old_values } from './reactivity/sources.js';\r\nimport {\r\n\tdestroy_derived_effects,\r\n\texecute_derived,\r\n\tcurrent_async_effect,\r\n\trecent_async_deriveds,\r\n\tupdate_derived\r\n} from './reactivity/deriveds.js';\r\nimport { async_mode_flag, tracing_mode_flag } from '../flags/index.js';\r\nimport { tracing_expressions, get_stack } from './dev/tracing.js';\r\nimport {\r\n\tcomponent_context,\r\n\tdev_current_component_function,\r\n\tdev_stack,\r\n\tis_runes,\r\n\tset_component_context,\r\n\tset_dev_current_component_function,\r\n\tset_dev_stack\r\n} from './context.js';\r\nimport * as w from './warnings.js';\r\nimport { Batch, batch_deriveds, flushSync, schedule_effect } from './reactivity/batch.js';\r\nimport { handle_error } from './error-handling.js';\r\nimport { UNINITIALIZED } from '../../constants.js';\r\nimport { captured_signals } from './legacy.js';\r\nimport { without_reactive_context } from './dom/elements/bindings/shared.js';\r\n\r\nexport let is_updating_effect = false;\r\n\r\n/** @param {boolean} value */\r\nexport function set_is_updating_effect(value) {\r\n\tis_updating_effect = value;\r\n}\r\n\r\nexport let is_destroying_effect = false;\r\n\r\n/** @param {boolean} value */\r\nexport function set_is_destroying_effect(value) {\r\n\tis_destroying_effect = value;\r\n}\r\n\r\n/** @type {null | Reaction} */\r\nexport let active_reaction = null;\r\n\r\nexport let untracking = false;\r\n\r\n/** @param {null | Reaction} reaction */\r\nexport function set_active_reaction(reaction) {\r\n\tactive_reaction = reaction;\r\n}\r\n\r\n/** @type {null | Effect} */\r\nexport let active_effect = null;\r\n\r\n/** @param {null | Effect} effect */\r\nexport function set_active_effect(effect) {\r\n\tactive_effect = effect;\r\n}\r\n\r\n/**\r\n * When sources are created within a reaction, reading and writing\r\n * them within that reaction should not cause a re-run\r\n * @type {null | Source[]}\r\n */\r\nexport let current_sources = null;\r\n\r\n/** @param {Value} value */\r\nexport function push_reaction_value(value) {\r\n\tif (active_reaction !== null && (!async_mode_flag || (active_reaction.f & DERIVED) !== 0)) {\r\n\t\tif (current_sources === null) {\r\n\t\t\tcurrent_sources = [value];\r\n\t\t} else {\r\n\t\t\tcurrent_sources.push(value);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * The dependencies of the reaction that is currently being executed. In many cases,\r\n * the dependencies are unchanged between runs, and so this will be `null` unless\r\n * and until a new dependency is accessed — we track this via `skipped_deps`\r\n * @type {null | Value[]}\r\n */\r\nlet new_deps = null;\r\n\r\nlet skipped_deps = 0;\r\n\r\n/**\r\n * Tracks writes that the effect it's executed in doesn't listen to yet,\r\n * so that the dependency can be added to the effect later on if it then reads it\r\n * @type {null | Source[]}\r\n */\r\nexport let untracked_writes = null;\r\n\r\n/** @param {null | Source[]} value */\r\nexport function set_untracked_writes(value) {\r\n\tuntracked_writes = value;\r\n}\r\n\r\n/**\r\n * @type {number} Used by sources and deriveds for handling updates.\r\n * Version starts from 1 so that unowned deriveds differentiate between a created effect and a run one for tracing\r\n **/\r\nexport let write_version = 1;\r\n\r\n/** @type {number} Used to version each read of a source of derived to avoid duplicating depedencies inside a reaction */\r\nlet read_version = 0;\r\n\r\nexport let update_version = read_version;\r\n\r\n/** @param {number} value */\r\nexport function set_update_version(value) {\r\n\tupdate_version = value;\r\n}\r\n\r\n// If we are working with a get() chain that has no active container,\r\n// to prevent memory leaks, we skip adding the reaction.\r\nexport let skip_reaction = false;\r\n\r\nexport function increment_write_version() {\r\n\treturn ++write_version;\r\n}\r\n\r\n/**\r\n * Determines whether a derived or effect is dirty.\r\n * If it is MAYBE_DIRTY, will set the status to CLEAN\r\n * @param {Reaction} reaction\r\n * @returns {boolean}\r\n */\r\nexport function is_dirty(reaction) {\r\n\tvar flags = reaction.f;\r\n\r\n\tif ((flags & DIRTY) !== 0) {\r\n\t\treturn true;\r\n\t}\r\n\r\n\tif ((flags & MAYBE_DIRTY) !== 0) {\r\n\t\tvar dependencies = reaction.deps;\r\n\t\tvar is_unowned = (flags & UNOWNED) !== 0;\r\n\r\n\t\tif (dependencies !== null) {\r\n\t\t\tvar i;\r\n\t\t\tvar dependency;\r\n\t\t\tvar is_disconnected = (flags & DISCONNECTED) !== 0;\r\n\t\t\tvar is_unowned_connected = is_unowned && active_effect !== null && !skip_reaction;\r\n\t\t\tvar length = dependencies.length;\r\n\r\n\t\t\t// If we are working with a disconnected or an unowned signal that is now connected (due to an active effect)\r\n\t\t\t// then we need to re-connect the reaction to the dependency, unless the effect has already been destroyed\r\n\t\t\t// (which can happen if the derived is read by an async derived)\r\n\t\t\tif (\r\n\t\t\t\t(is_disconnected || is_unowned_connected) &&\r\n\t\t\t\t(active_effect === null || (active_effect.f & DESTROYED) === 0)\r\n\t\t\t) {\r\n\t\t\t\tvar derived = /** @type {Derived} */ (reaction);\r\n\t\t\t\tvar parent = derived.parent;\r\n\r\n\t\t\t\tfor (i = 0; i < length; i++) {\r\n\t\t\t\t\tdependency = dependencies[i];\r\n\r\n\t\t\t\t\t// We always re-add all reactions (even duplicates) if the derived was\r\n\t\t\t\t\t// previously disconnected, however we don't if it was unowned as we\r\n\t\t\t\t\t// de-duplicate dependencies in that case\r\n\t\t\t\t\tif (is_disconnected || !dependency?.reactions?.includes(derived)) {\r\n\t\t\t\t\t\t(dependency.reactions ??= []).push(derived);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (is_disconnected) {\r\n\t\t\t\t\tderived.f ^= DISCONNECTED;\r\n\t\t\t\t}\r\n\t\t\t\t// If the unowned derived is now fully connected to the graph again (it's unowned and reconnected, has a parent\r\n\t\t\t\t// and the parent is not unowned), then we can mark it as connected again, removing the need for the unowned\r\n\t\t\t\t// flag\r\n\t\t\t\tif (is_unowned_connected && parent !== null && (parent.f & UNOWNED) === 0) {\r\n\t\t\t\t\tderived.f ^= UNOWNED;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (i = 0; i < length; i++) {\r\n\t\t\t\tdependency = dependencies[i];\r\n\r\n\t\t\t\tif (is_dirty(/** @type {Derived} */ (dependency))) {\r\n\t\t\t\t\tupdate_derived(/** @type {Derived} */ (dependency));\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (dependency.wv > reaction.wv) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Unowned signals should never be marked as clean unless they\r\n\t\t// are used within an active_effect without skip_reaction\r\n\t\tif (!is_unowned || (active_effect !== null && !skip_reaction)) {\r\n\t\t\tset_signal_status(reaction, CLEAN);\r\n\t\t}\r\n\t}\r\n\r\n\treturn false;\r\n}\r\n\r\n/**\r\n * @param {Value} signal\r\n * @param {Effect} effect\r\n * @param {boolean} [root]\r\n */\r\nfunction schedule_possible_effect_self_invalidation(signal, effect, root = true) {\r\n\tvar reactions = signal.reactions;\r\n\tif (reactions === null) return;\r\n\r\n\tif (!async_mode_flag && current_sources?.includes(signal)) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tfor (var i = 0; i < reactions.length; i++) {\r\n\t\tvar reaction = reactions[i];\r\n\r\n\t\tif ((reaction.f & DERIVED) !== 0) {\r\n\t\t\tschedule_possible_effect_self_invalidation(/** @type {Derived} */ (reaction), effect, false);\r\n\t\t} else if (effect === reaction) {\r\n\t\t\tif (root) {\r\n\t\t\t\tset_signal_status(reaction, DIRTY);\r\n\t\t\t} else if ((reaction.f & CLEAN) !== 0) {\r\n\t\t\t\tset_signal_status(reaction, MAYBE_DIRTY);\r\n\t\t\t}\r\n\t\t\tschedule_effect(/** @type {Effect} */ (reaction));\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/** @param {Reaction} reaction */\r\nexport function update_reaction(reaction) {\r\n\tvar previous_deps = new_deps;\r\n\tvar previous_skipped_deps = skipped_deps;\r\n\tvar previous_untracked_writes = untracked_writes;\r\n\tvar previous_reaction = active_reaction;\r\n\tvar previous_skip_reaction = skip_reaction;\r\n\tvar previous_sources = current_sources;\r\n\tvar previous_component_context = component_context;\r\n\tvar previous_untracking = untracking;\r\n\tvar previous_update_version = update_version;\r\n\r\n\tvar flags = reaction.f;\r\n\r\n\tnew_deps = /** @type {null | Value[]} */ (null);\r\n\tskipped_deps = 0;\r\n\tuntracked_writes = null;\r\n\tskip_reaction =\r\n\t\t(flags & UNOWNED) !== 0 && (untracking || !is_updating_effect || active_reaction === null);\r\n\tactive_reaction = (flags & (BRANCH_EFFECT | ROOT_EFFECT)) === 0 ? reaction : null;\r\n\r\n\tcurrent_sources = null;\r\n\tset_component_context(reaction.ctx);\r\n\tuntracking = false;\r\n\tupdate_version = ++read_version;\r\n\r\n\tif (reaction.ac !== null) {\r\n\t\twithout_reactive_context(() => {\r\n\t\t\t/** @type {AbortController} */ (reaction.ac).abort(STALE_REACTION);\r\n\t\t});\r\n\r\n\t\treaction.ac = null;\r\n\t}\r\n\r\n\ttry {\r\n\t\treaction.f |= REACTION_IS_UPDATING;\r\n\t\tvar fn = /** @type {Function} */ (reaction.fn);\r\n\t\tvar result = fn();\r\n\t\tvar deps = reaction.deps;\r\n\r\n\t\tif (new_deps !== null) {\r\n\t\t\tvar i;\r\n\r\n\t\t\tremove_reactions(reaction, skipped_deps);\r\n\r\n\t\t\tif (deps !== null && skipped_deps > 0) {\r\n\t\t\t\tdeps.length = skipped_deps + new_deps.length;\r\n\t\t\t\tfor (i = 0; i < new_deps.length; i++) {\r\n\t\t\t\t\tdeps[skipped_deps + i] = new_deps[i];\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\treaction.deps = deps = new_deps;\r\n\t\t\t}\r\n\r\n\t\t\tif (\r\n\t\t\t\t!skip_reaction ||\r\n\t\t\t\t// Deriveds that already have reactions can cleanup, so we still add them as reactions\r\n\t\t\t\t((flags & DERIVED) !== 0 &&\r\n\t\t\t\t\t/** @type {import('#client').Derived} */ (reaction).reactions !== null)\r\n\t\t\t) {\r\n\t\t\t\tfor (i = skipped_deps; i < deps.length; i++) {\r\n\t\t\t\t\t(deps[i].reactions ??= []).push(reaction);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if (deps !== null && skipped_deps < deps.length) {\r\n\t\t\tremove_reactions(reaction, skipped_deps);\r\n\t\t\tdeps.length = skipped_deps;\r\n\t\t}\r\n\r\n\t\t// If we're inside an effect and we have untracked writes, then we need to\r\n\t\t// ensure that if any of those untracked writes result in re-invalidation\r\n\t\t// of the current effect, then that happens accordingly\r\n\t\tif (\r\n\t\t\tis_runes() &&\r\n\t\t\tuntracked_writes !== null &&\r\n\t\t\t!untracking &&\r\n\t\t\tdeps !== null &&\r\n\t\t\t(reaction.f & (DERIVED | MAYBE_DIRTY | DIRTY)) === 0\r\n\t\t) {\r\n\t\t\tfor (i = 0; i < /** @type {Source[]} */ (untracked_writes).length; i++) {\r\n\t\t\t\tschedule_possible_effect_self_invalidation(\r\n\t\t\t\t\tuntracked_writes[i],\r\n\t\t\t\t\t/** @type {Effect} */ (reaction)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If we are returning to an previous reaction then\r\n\t\t// we need to increment the read version to ensure that\r\n\t\t// any dependencies in this reaction aren't marked with\r\n\t\t// the same version\r\n\t\tif (previous_reaction !== null && previous_reaction !== reaction) {\r\n\t\t\tread_version++;\r\n\r\n\t\t\tif (untracked_writes !== null) {\r\n\t\t\t\tif (previous_untracked_writes === null) {\r\n\t\t\t\t\tprevious_untracked_writes = untracked_writes;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tprevious_untracked_writes.push(.../** @type {Source[]} */ (untracked_writes));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif ((reaction.f & ERROR_VALUE) !== 0) {\r\n\t\t\treaction.f ^= ERROR_VALUE;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t} catch (error) {\r\n\t\treturn handle_error(error);\r\n\t} finally {\r\n\t\treaction.f ^= REACTION_IS_UPDATING;\r\n\t\tnew_deps = previous_deps;\r\n\t\tskipped_deps = previous_skipped_deps;\r\n\t\tuntracked_writes = previous_untracked_writes;\r\n\t\tactive_reaction = previous_reaction;\r\n\t\tskip_reaction = previous_skip_reaction;\r\n\t\tcurrent_sources = previous_sources;\r\n\t\tset_component_context(previous_component_context);\r\n\t\tuntracking = previous_untracking;\r\n\t\tupdate_version = previous_update_version;\r\n\t}\r\n}\r\n\r\n/**\r\n * @template V\r\n * @param {Reaction} signal\r\n * @param {Value<V>} dependency\r\n * @returns {void}\r\n */\r\nfunction remove_reaction(signal, dependency) {\r\n\tlet reactions = dependency.reactions;\r\n\tif (reactions !== null) {\r\n\t\tvar index = index_of.call(reactions, signal);\r\n\t\tif (index !== -1) {\r\n\t\t\tvar new_length = reactions.length - 1;\r\n\t\t\tif (new_length === 0) {\r\n\t\t\t\treactions = dependency.reactions = null;\r\n\t\t\t} else {\r\n\t\t\t\t// Swap with last element and then remove.\r\n\t\t\t\treactions[index] = reactions[new_length];\r\n\t\t\t\treactions.pop();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// If the derived has no reactions, then we can disconnect it from the graph,\r\n\t// allowing it to either reconnect in the future, or be GC'd by the VM.\r\n\tif (\r\n\t\treactions === null &&\r\n\t\t(dependency.f & DERIVED) !== 0 &&\r\n\t\t// Destroying a child effect while updating a parent effect can cause a dependency to appear\r\n\t\t// to be unused, when in fact it is used by the currently-updating parent. Checking `new_deps`\r\n\t\t// allows us to skip the expensive work of disconnecting and immediately reconnecting it\r\n\t\t(new_deps === null || !new_deps.includes(dependency))\r\n\t) {\r\n\t\tset_signal_status(dependency, MAYBE_DIRTY);\r\n\t\t// If we are working with a derived that is owned by an effect, then mark it as being\r\n\t\t// disconnected.\r\n\t\tif ((dependency.f & (UNOWNED | DISCONNECTED)) === 0) {\r\n\t\t\tdependency.f ^= DISCONNECTED;\r\n\t\t}\r\n\t\t// Disconnect any reactions owned by this reaction\r\n\t\tdestroy_derived_effects(/** @type {Derived} **/ (dependency));\r\n\t\tremove_reactions(/** @type {Derived} **/ (dependency), 0);\r\n\t}\r\n}\r\n\r\n/**\r\n * @param {Reaction} signal\r\n * @param {number} start_index\r\n * @returns {void}\r\n */\r\nexport function remove_reactions(signal, start_index) {\r\n\tvar dependencies = signal.deps;\r\n\tif (dependencies === null) return;\r\n\r\n\tfor (var i = start_index; i < dependencies.length; i++) {\r\n\t\tremove_reaction(signal, dependencies[i]);\r\n\t}\r\n}\r\n\r\n/**\r\n * @param {Effect} effect\r\n * @returns {void}\r\n */\r\nexport function update_effect(effect) {\r\n\tvar flags = effect.f;\r\n\r\n\tif ((flags & DESTROYED) !== 0) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tset_signal_status(effect, CLEAN);\r\n\r\n\tvar previous_effect = active_effect;\r\n\tvar was_updating_effect = is_updating_effect;\r\n\r\n\tactive_effect = effect;\r\n\tis_updating_effect = true;\r\n\r\n\tif (DEV) {\r\n\t\tvar previous_component_fn = dev_current_component_function;\r\n\t\tset_dev_current_component_function(effect.component_function);\r\n\t\tvar previous_stack = /** @type {any} */ (dev_stack);\r\n\t\t// only block effects have a dev stack, keep the current one otherwise\r\n\t\tset_dev_stack(effect.dev_stack ?? dev_stack);\r\n\t}\r\n\r\n\ttry {\r\n\t\tif ((flags & BLOCK_EFFECT) !== 0) {\r\n\t\t\tdestroy_block_effect_children(effect);\r\n\t\t} else {\r\n\t\t\tdestroy_effect_children(effect);\r\n\t\t}\r\n\r\n\t\texecute_effect_teardown(effect);\r\n\t\tvar teardown = update_reaction(effect);\r\n\t\teffect.teardown = typeof teardown === 'function' ? teardown : null;\r\n\t\teffect.wv = write_version;\r\n\r\n\t\t// In DEV, increment versions of any sources that were written to during the effect,\r\n\t\t// so that they are correctly marked as dirty when the effect re-runs\r\n\t\tif (DEV && tracing_mode_flag && (effect.f & DIRTY) !== 0 && effect.deps !== null) {\r\n\t\t\tfor (var dep of effect.deps) {\r\n\t\t\t\tif (dep.set_during_effect) {\r\n\t\t\t\t\tdep.wv = increment_write_version();\r\n\t\t\t\t\tdep.set_during_effect = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t} finally {\r\n\t\tis_updating_effect = was_updating_effect;\r\n\t\tactive_effect = previous_effect;\r\n\r\n\t\tif (DEV) {\r\n\t\t\tset_dev_current_component_function(previous_component_fn);\r\n\t\t\tset_dev_stack(previous_stack);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Returns a promise that resolves once any pending state changes have been applied.\r\n * @returns {Promise<void>}\r\n */\r\nexport async function tick() {\r\n\tif (async_mode_flag) {\r\n\t\treturn new Promise((f) => requestAnimationFrame(() => f()));\r\n\t}\r\n\r\n\tawait Promise.resolve();\r\n\r\n\t// By calling flushSync we guarantee that any pending state changes are applied after one tick.\r\n\t// TODO look into whether we can make flushing subsequent updates synchronously in the future.\r\n\tflushSync();\r\n}\r\n\r\n/**\r\n * Returns a promise that resolves once any state changes, and asynchronous work resulting from them,\r\n * have resolved and the DOM has been updated\r\n * @returns {Promise<void>}\r\n * @since 5.36\r\n */\r\nexport function settled() {\r\n\treturn Batch.ensure().settled();\r\n}\r\n\r\n/**\r\n * @template V\r\n * @param {Value<V>} signal\r\n * @returns {V}\r\n */\r\nexport function get(signal) {\r\n\tvar flags = signal.f;\r\n\tvar is_derived = (flags & DERIVED) !== 0;\r\n\r\n\tcaptured_signals?.add(signal);\r\n\r\n\t// Register the dependency on the current reaction signal.\r\n\tif (active_reaction !== null && !untracking) {\r\n\t\t// if we're in a derived that is being read inside an _async_ derived,\r\n\t\t// it's possible that the effect was already destroyed. In this case,\r\n\t\t// we don't add the dependency, because that would create a memory leak\r\n\t\tvar destroyed = active_effect !== null && (active_effect.f & DESTROYED) !== 0;\r\n\r\n\t\tif (!destroyed && !current_sources?.includes(signal)) {\r\n\t\t\tvar deps = active_reaction.deps;\r\n\r\n\t\t\tif ((active_reaction.f & REACTION_IS_UPDATING) !== 0) {\r\n\t\t\t\t// we're in the effect init/update cycle\r\n\t\t\t\tif (signal.rv < read_version) {\r\n\t\t\t\t\tsignal.rv = read_version;\r\n\r\n\t\t\t\t\t// If the signal is accessing the same dependencies in the same\r\n\t\t\t\t\t// order as it did last time, increment `skipped_deps`\r\n\t\t\t\t\t// rather than updating `new_deps`, which creates GC cost\r\n\t\t\t\t\tif (new_deps === null && deps !== null && deps[skipped_deps] === signal) {\r\n\t\t\t\t\t\tskipped_deps++;\r\n\t\t\t\t\t} else if (new_deps === null) {\r\n\t\t\t\t\t\tnew_deps = [signal];\r\n\t\t\t\t\t} else if (!skip_reaction || !new_deps.includes(signal)) {\r\n\t\t\t\t\t\t// Normally we can push duplicated dependencies to `new_deps`, but if we're inside\r\n\t\t\t\t\t\t// an unowned derived because skip_reaction is true, then we need to ensure that\r\n\t\t\t\t\t\t// we don't have duplicates\r\n\t\t\t\t\t\tnew_deps.push(signal);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// we're adding a dependency outside the init/update cycle\r\n\t\t\t\t// (i.e. after an `await`)\r\n\t\t\t\t(active_reaction.deps ??= []).push(signal);\r\n\r\n\t\t\t\tvar reactions = signal.reactions;\r\n\r\n\t\t\t\tif (reactions === null) {\r\n\t\t\t\t\tsignal.reactions = [active_reaction];\r\n\t\t\t\t} else if (!reactions.includes(active_reaction)) {\r\n\t\t\t\t\treactions.push(active_reaction);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t} else if (\r\n\t\tis_derived &&\r\n\t\t/** @type {Derived} */ (signal).deps === null &&\r\n\t\t/** @type {Derived} */ (signal).effects === null\r\n\t) {\r\n\t\tvar derived = /** @type {Derived} */ (signal);\r\n\t\tvar parent = derived.parent;\r\n\r\n\t\tif (parent !== null && (parent.f & UNOWNED) === 0) {\r\n\t\t\t// If the derived is owned by another derived then mark it as unowned\r\n\t\t\t// as the derived value might have been referenced in a different context\r\n\t\t\t// since and thus its parent might not be its true owner anymore\r\n\t\t\tderived.f ^= UNOWNED;\r\n\t\t}\r\n\t}\r\n\r\n\tif (DEV) {\r\n\t\tif (current_async_effect) {\r\n\t\t\tvar tracking = (current_async_effect.f & REACTION_IS_UPDATING) !== 0;\r\n\t\t\tvar was_read = current_async_effect.deps?.includes(signal);\r\n\r\n\t\t\tif (!tracking && !untracking && !was_read) {\r\n\t\t\t\tw.await_reactivity_loss(/** @type {string} */ (signal.label));\r\n\r\n\t\t\t\tvar trace = get_stack('TracedAt');\r\n\t\t\t\t// eslint-disable-next-line no-console\r\n\t\t\t\tif (trace) console.warn(trace);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\trecent_async_deriveds.delete(signal);\r\n\r\n\t\tif (\r\n\t\t\ttracing_mode_flag &&\r\n\t\t\t!untracking &&\r\n\t\t\ttracing_expressions !== null &&\r\n\t\t\tactive_reaction !== null &&\r\n\t\t\ttracing_expressions.reaction === active_reaction\r\n\t\t) {\r\n\t\t\t// Used when mapping state between special blocks like `each`\r\n\t\t\tif (signal.trace) {\r\n\t\t\t\tsignal.trace();\r\n\t\t\t} else {\r\n\t\t\t\ttrace = get_stack('TracedAt');\r\n\r\n\t\t\t\tif (trace) {\r\n\t\t\t\t\tvar entry = tracing_expressions.entries.get(signal);\r\n\r\n\t\t\t\t\tif (entry === undefined) {\r\n\t\t\t\t\t\tentry = { traces: [] };\r\n\t\t\t\t\t\ttracing_expressions.entries.set(signal, entry);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvar last = entry.traces[entry.traces.length - 1];\r\n\r\n\t\t\t\t\t// traces can be duplicated, e.g. by `snapshot` invoking both\r\n\t\t\t\t\t// both `getOwnPropertyDescriptor` and `get` traps at once\r\n\t\t\t\t\tif (trace.stack !== last?.stack) {\r\n\t\t\t\t\t\tentry.traces.push(trace);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tif (is_destroying_effect) {\r\n\t\tif (old_values.has(signal)) {\r\n\t\t\treturn old_values.get(signal);\r\n\t\t}\r\n\r\n\t\tif (is_derived) {\r\n\t\t\tderived = /** @type {Derived} */ (signal);\r\n\r\n\t\t\tvar value = derived.v;\r\n\r\n\t\t\t// if the derived is dirty and has reactions, or depends on the values that just changed, re-execute\r\n\t\t\t// (a derived can be maybe_dirty due to the effect destroy removing its last reaction)\r\n\t\t\tif (\r\n\t\t\t\t((derived.f & CLEAN) === 0 && derived.reactions !== null) ||\r\n\t\t\t\tdepends_on_old_values(derived)\r\n\t\t\t) {\r\n\t\t\t\tvalue = execute_derived(derived);\r\n\t\t\t}\r\n\r\n\t\t\told_values.set(derived, value);\r\n\r\n\t\t\treturn value;\r\n\t\t}\r\n\t} else if (is_derived) {\r\n\t\tderived = /** @type {Derived} */ (signal);\r\n\r\n\t\tif (batch_deriveds?.has(derived)) {\r\n\t\t\treturn batch_deriveds.get(derived);\r\n\t\t}\r\n\r\n\t\tif (is_dirty(derived)) {\r\n\t\t\tupdate_derived(derived);\r\n\t\t}\r\n\t}\r\n\r\n\tif ((signal.f & ERROR_VALUE) !== 0) {\r\n\t\tthrow signal.v;\r\n\t}\r\n\r\n\treturn signal.v;\r\n}\r\n\r\n/** @param {Derived} derived */\r\nfunction depends_on_old_values(derived) {\r\n\tif (derived.v === UNINITIALIZED) return true; // we don't know, so assume the worst\r\n\tif (derived.deps === null) return false;\r\n\r\n\tfor (const dep of derived.deps) {\r\n\t\tif (old_values.has(dep)) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tif ((dep.f & DERIVED) !== 0 && depends_on_old_values(/** @type {Derived} */ (dep))) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\treturn false;\r\n}\r\n\r\n/**\r\n * Like `get`, but checks for `undefined`. Used for `var` declarations because they can be accessed before being declared\r\n * @template V\r\n * @param {Value<V> | undefined} signal\r\n * @returns {V | undefined}\r\n */\r\nexport function safe_get(signal) {\r\n\treturn signal && get(signal);\r\n}\r\n\r\n/**\r\n * When used inside a [`$derived`](https://svelte.dev/docs/svelte/$derived) or [`$effect`](https://svelte.dev/docs/svelte/$effect),\r\n * any state read inside `fn` will not be treated as a dependency.\r\n *\r\n * ```ts\r\n * $effect(() => {\r\n *   // this will run when `data` changes, but not when `time` changes\r\n *   save(data, {\r\n *     timestamp: untrack(() => time)\r\n *   });\r\n * });\r\n * ```\r\n * @template T\r\n * @param {() => T} fn\r\n * @returns {T}\r\n */\r\nexport function untrack(fn) {\r\n\tvar previous_untracking = untracking;\r\n\ttry {\r\n\t\tuntracking = true;\r\n\t\treturn fn();\r\n\t} finally {\r\n\t\tuntracking = previous_untracking;\r\n\t}\r\n}\r\n\r\nconst STATUS_MASK = ~(DIRTY | MAYBE_DIRTY | CLEAN);\r\n\r\n/**\r\n * @param {Signal} signal\r\n * @param {number} status\r\n * @returns {void}\r\n */\r\nexport function set_signal_status(signal, status) {\r\n\tsignal.f = (signal.f & STATUS_MASK) | status;\r\n}\r\n\r\n/**\r\n * @param {Record<string, unknown>} obj\r\n * @param {string[]} keys\r\n * @returns {Record<string, unknown>}\r\n */\r\nexport function exclude_from_object(obj, keys) {\r\n\t/** @type {Record<string, unknown>} */\r\n\tvar result = {};\r\n\r\n\tfor (var key in obj) {\r\n\t\tif (!keys.includes(key)) {\r\n\t\t\tresult[key] = obj[key];\r\n\t\t}\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\n/**\r\n * Possibly traverse an object and read all its properties so that they're all reactive in case this is `$state`.\r\n * Does only check first level of an object for performance reasons (heuristic should be good for 99% of all cases).\r\n * @param {any} value\r\n * @returns {void}\r\n */\r\nexport function deep_read_state(value) {\r\n\tif (typeof value !== 'object' || !value || value instanceof EventTarget) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tif (STATE_SYMBOL in value) {\r\n\t\tdeep_read(value);\r\n\t} else if (!Array.isArray(value)) {\r\n\t\tfor (let key in value) {\r\n\t\t\tconst prop = value[key];\r\n\t\t\tif (typeof prop === 'object' && prop && STATE_SYMBOL in prop) {\r\n\t\t\t\tdeep_read(prop);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Deeply traverse an object and read all its properties\r\n * so that they're all reactive in case this is `$state`\r\n * @param {any} value\r\n * @param {Set<any>} visited\r\n * @returns {void}\r\n */\r\nexport function deep_read(value, visited = new Set()) {\r\n\tif (\r\n\t\ttypeof value === 'object' &&\r\n\t\tvalue !== null &&\r\n\t\t// We don't want to traverse DOM elements\r\n\t\t!(value instanceof EventTarget) &&\r\n\t\t!visited.has(value)\r\n\t) {\r\n\t\tvisited.add(value);\r\n\t\t// When working with a possible SvelteDate, this\r\n\t\t// will ensure we capture changes to it.\r\n\t\tif (value instanceof Date) {\r\n\t\t\tvalue.getTime();\r\n\t\t}\r\n\t\tfor (let key in value) {\r\n\t\t\ttry {\r\n\t\t\t\tdeep_read(value[key], visited);\r\n\t\t\t} catch (e) {\r\n\t\t\t\t// continue\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst proto = get_prototype_of(value);\r\n\t\tif (\r\n\t\t\tproto !== Object.prototype &&\r\n\t\t\tproto !== Array.prototype &&\r\n\t\t\tproto !== Map.prototype &&\r\n\t\t\tproto !== Set.prototype &&\r\n\t\t\tproto !== Date.prototype\r\n\t\t) {\r\n\t\t\tconst descriptors = get_descriptors(proto);\r\n\t\t\tfor (let key in descriptors) {\r\n\t\t\t\tconst get = descriptors[key].get;\r\n\t\t\t\tif (get) {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tget.call(value);\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\t// continue\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n", "const regex_return_characters = /\\r/g;\r\n\r\n/**\r\n * @param {string} str\r\n * @returns {string}\r\n */\r\nexport function hash(str) {\r\n\tstr = str.replace(regex_return_characters, '');\r\n\tlet hash = 5381;\r\n\tlet i = str.length;\r\n\r\n\twhile (i--) hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\r\n\treturn (hash >>> 0).toString(36);\r\n}\r\n\r\nconst VOID_ELEMENT_NAMES = [\r\n\t'area',\r\n\t'base',\r\n\t'br',\r\n\t'col',\r\n\t'command',\r\n\t'embed',\r\n\t'hr',\r\n\t'img',\r\n\t'input',\r\n\t'keygen',\r\n\t'link',\r\n\t'meta',\r\n\t'param',\r\n\t'source',\r\n\t'track',\r\n\t'wbr'\r\n];\r\n\r\n/**\r\n * Returns `true` if `name` is of a void element\r\n * @param {string} name\r\n */\r\nexport function is_void(name) {\r\n\treturn VOID_ELEMENT_NAMES.includes(name) || name.toLowerCase() === '!doctype';\r\n}\r\n\r\nconst RESERVED_WORDS = [\r\n\t'arguments',\r\n\t'await',\r\n\t'break',\r\n\t'case',\r\n\t'catch',\r\n\t'class',\r\n\t'const',\r\n\t'continue',\r\n\t'debugger',\r\n\t'default',\r\n\t'delete',\r\n\t'do',\r\n\t'else',\r\n\t'enum',\r\n\t'eval',\r\n\t'export',\r\n\t'extends',\r\n\t'false',\r\n\t'finally',\r\n\t'for',\r\n\t'function',\r\n\t'if',\r\n\t'implements',\r\n\t'import',\r\n\t'in',\r\n\t'instanceof',\r\n\t'interface',\r\n\t'let',\r\n\t'new',\r\n\t'null',\r\n\t'package',\r\n\t'private',\r\n\t'protected',\r\n\t'public',\r\n\t'return',\r\n\t'static',\r\n\t'super',\r\n\t'switch',\r\n\t'this',\r\n\t'throw',\r\n\t'true',\r\n\t'try',\r\n\t'typeof',\r\n\t'var',\r\n\t'void',\r\n\t'while',\r\n\t'with',\r\n\t'yield'\r\n];\r\n\r\n/**\r\n * Returns `true` if `word` is a reserved JavaScript keyword\r\n * @param {string} word\r\n */\r\nexport function is_reserved(word) {\r\n\treturn RESERVED_WORDS.includes(word);\r\n}\r\n\r\n/**\r\n * @param {string} name\r\n */\r\nexport function is_capture_event(name) {\r\n\treturn name.endsWith('capture') && name !== 'gotpointercapture' && name !== 'lostpointercapture';\r\n}\r\n\r\n/** List of Element events that will be delegated */\r\nconst DELEGATED_EVENTS = [\r\n\t'beforeinput',\r\n\t'click',\r\n\t'change',\r\n\t'dblclick',\r\n\t'contextmenu',\r\n\t'focusin',\r\n\t'focusout',\r\n\t'input',\r\n\t'keydown',\r\n\t'keyup',\r\n\t'mousedown',\r\n\t'mousemove',\r\n\t'mouseout',\r\n\t'mouseover',\r\n\t'mouseup',\r\n\t'pointerdown',\r\n\t'pointermove',\r\n\t'pointerout',\r\n\t'pointerover',\r\n\t'pointerup',\r\n\t'touchend',\r\n\t'touchmove',\r\n\t'touchstart'\r\n];\r\n\r\n/**\r\n * Returns `true` if `event_name` is a delegated event\r\n * @param {string} event_name\r\n */\r\nexport function is_delegated(event_name) {\r\n\treturn DELEGATED_EVENTS.includes(event_name);\r\n}\r\n\r\n/**\r\n * Attributes that are boolean, i.e. they are present or not present.\r\n */\r\nconst DOM_BOOLEAN_ATTRIBUTES = [\r\n\t'allowfullscreen',\r\n\t'async',\r\n\t'autofocus',\r\n\t'autoplay',\r\n\t'checked',\r\n\t'controls',\r\n\t'default',\r\n\t'disabled',\r\n\t'formnovalidate',\r\n\t'hidden',\r\n\t'indeterminate',\r\n\t'inert',\r\n\t'ismap',\r\n\t'loop',\r\n\t'multiple',\r\n\t'muted',\r\n\t'nomodule',\r\n\t'novalidate',\r\n\t'open',\r\n\t'playsinline',\r\n\t'readonly',\r\n\t'required',\r\n\t'reversed',\r\n\t'seamless',\r\n\t'selected',\r\n\t'webkitdirectory',\r\n\t'defer',\r\n\t'disablepictureinpicture',\r\n\t'disableremoteplayback'\r\n];\r\n\r\n/**\r\n * Returns `true` if `name` is a boolean attribute\r\n * @param {string} name\r\n */\r\nexport function is_boolean_attribute(name) {\r\n\treturn DOM_BOOLEAN_ATTRIBUTES.includes(name);\r\n}\r\n\r\n/**\r\n * @type {Record<string, string>}\r\n * List of attribute names that should be aliased to their property names\r\n * because they behave differently between setting them as an attribute and\r\n * setting them as a property.\r\n */\r\nconst ATTRIBUTE_ALIASES = {\r\n\t// no `class: 'className'` because we handle that separately\r\n\tformnovalidate: 'formNoValidate',\r\n\tismap: 'isMap',\r\n\tnomodule: 'noModule',\r\n\tplaysinline: 'playsInline',\r\n\treadonly: 'readOnly',\r\n\tdefaultvalue: 'defaultValue',\r\n\tdefaultchecked: 'defaultChecked',\r\n\tsrcobject: 'srcObject',\r\n\tnovalidate: 'noValidate',\r\n\tallowfullscreen: 'allowFullscreen',\r\n\tdisablepictureinpicture: 'disablePictureInPicture',\r\n\tdisableremoteplayback: 'disableRemotePlayback'\r\n};\r\n\r\n/**\r\n * @param {string} name\r\n */\r\nexport function normalize_attribute(name) {\r\n\tname = name.toLowerCase();\r\n\treturn ATTRIBUTE_ALIASES[name] ?? name;\r\n}\r\n\r\nconst DOM_PROPERTIES = [\r\n\t...DOM_BOOLEAN_ATTRIBUTES,\r\n\t'formNoValidate',\r\n\t'isMap',\r\n\t'noModule',\r\n\t'playsInline',\r\n\t'readOnly',\r\n\t'value',\r\n\t'volume',\r\n\t'defaultValue',\r\n\t'defaultChecked',\r\n\t'srcObject',\r\n\t'noValidate',\r\n\t'allowFullscreen',\r\n\t'disablePictureInPicture',\r\n\t'disableRemotePlayback'\r\n];\r\n\r\n/**\r\n * @param {string} name\r\n */\r\nexport function is_dom_property(name) {\r\n\treturn DOM_PROPERTIES.includes(name);\r\n}\r\n\r\nconst NON_STATIC_PROPERTIES = ['autofocus', 'muted', 'defaultValue', 'defaultChecked'];\r\n\r\n/**\r\n * Returns `true` if the given attribute cannot be set through the template\r\n * string, i.e. needs some kind of JavaScript handling to work.\r\n * @param {string} name\r\n */\r\nexport function cannot_be_set_statically(name) {\r\n\treturn NON_STATIC_PROPERTIES.includes(name);\r\n}\r\n\r\n/**\r\n * Subset of delegated events which should be passive by default.\r\n * These two are already passive via browser defaults on window, document and body.\r\n * But since\r\n * - we're delegating them\r\n * - they happen often\r\n * - they apply to mobile which is generally less performant\r\n * we're marking them as passive by default for other elements, too.\r\n */\r\nconst PASSIVE_EVENTS = ['touchstart', 'touchmove'];\r\n\r\n/**\r\n * Returns `true` if `name` is a passive event\r\n * @param {string} name\r\n */\r\nexport function is_passive_event(name) {\r\n\treturn PASSIVE_EVENTS.includes(name);\r\n}\r\n\r\nconst CONTENT_EDITABLE_BINDINGS = ['textContent', 'innerHTML', 'innerText'];\r\n\r\n/** @param {string} name */\r\nexport function is_content_editable_binding(name) {\r\n\treturn CONTENT_EDITABLE_BINDINGS.includes(name);\r\n}\r\n\r\nconst LOAD_ERROR_ELEMENTS = [\r\n\t'body',\r\n\t'embed',\r\n\t'iframe',\r\n\t'img',\r\n\t'link',\r\n\t'object',\r\n\t'script',\r\n\t'style',\r\n\t'track'\r\n];\r\n\r\n/**\r\n * Returns `true` if the element emits `load` and `error` events\r\n * @param {string} name\r\n */\r\nexport function is_load_error_element(name) {\r\n\treturn LOAD_ERROR_ELEMENTS.includes(name);\r\n}\r\n\r\nconst SVG_ELEMENTS = [\r\n\t'altGlyph',\r\n\t'altGlyphDef',\r\n\t'altGlyphItem',\r\n\t'animate',\r\n\t'animateColor',\r\n\t'animateMotion',\r\n\t'animateTransform',\r\n\t'circle',\r\n\t'clipPath',\r\n\t'color-profile',\r\n\t'cursor',\r\n\t'defs',\r\n\t'desc',\r\n\t'discard',\r\n\t'ellipse',\r\n\t'feBlend',\r\n\t'feColorMatrix',\r\n\t'feComponentTransfer',\r\n\t'feComposite',\r\n\t'feConvolveMatrix',\r\n\t'feDiffuseLighting',\r\n\t'feDisplacementMap',\r\n\t'feDistantLight',\r\n\t'feDropShadow',\r\n\t'feFlood',\r\n\t'feFuncA',\r\n\t'feFuncB',\r\n\t'feFuncG',\r\n\t'feFuncR',\r\n\t'feGaussianBlur',\r\n\t'feImage',\r\n\t'feMerge',\r\n\t'feMergeNode',\r\n\t'feMorphology',\r\n\t'feOffset',\r\n\t'fePointLight',\r\n\t'feSpecularLighting',\r\n\t'feSpotLight',\r\n\t'feTile',\r\n\t'feTurbulence',\r\n\t'filter',\r\n\t'font',\r\n\t'font-face',\r\n\t'font-face-format',\r\n\t'font-face-name',\r\n\t'font-face-src',\r\n\t'font-face-uri',\r\n\t'foreignObject',\r\n\t'g',\r\n\t'glyph',\r\n\t'glyphRef',\r\n\t'hatch',\r\n\t'hatchpath',\r\n\t'hkern',\r\n\t'image',\r\n\t'line',\r\n\t'linearGradient',\r\n\t'marker',\r\n\t'mask',\r\n\t'mesh',\r\n\t'meshgradient',\r\n\t'meshpatch',\r\n\t'meshrow',\r\n\t'metadata',\r\n\t'missing-glyph',\r\n\t'mpath',\r\n\t'path',\r\n\t'pattern',\r\n\t'polygon',\r\n\t'polyline',\r\n\t'radialGradient',\r\n\t'rect',\r\n\t'set',\r\n\t'solidcolor',\r\n\t'stop',\r\n\t'svg',\r\n\t'switch',\r\n\t'symbol',\r\n\t'text',\r\n\t'textPath',\r\n\t'tref',\r\n\t'tspan',\r\n\t'unknown',\r\n\t'use',\r\n\t'view',\r\n\t'vkern'\r\n];\r\n\r\n/** @param {string} name */\r\nexport function is_svg(name) {\r\n\treturn SVG_ELEMENTS.includes(name);\r\n}\r\n\r\nconst MATHML_ELEMENTS = [\r\n\t'annotation',\r\n\t'annotation-xml',\r\n\t'maction',\r\n\t'math',\r\n\t'merror',\r\n\t'mfrac',\r\n\t'mi',\r\n\t'mmultiscripts',\r\n\t'mn',\r\n\t'mo',\r\n\t'mover',\r\n\t'mpadded',\r\n\t'mphantom',\r\n\t'mprescripts',\r\n\t'mroot',\r\n\t'mrow',\r\n\t'ms',\r\n\t'mspace',\r\n\t'msqrt',\r\n\t'mstyle',\r\n\t'msub',\r\n\t'msubsup',\r\n\t'msup',\r\n\t'mtable',\r\n\t'mtd',\r\n\t'mtext',\r\n\t'mtr',\r\n\t'munder',\r\n\t'munderover',\r\n\t'semantics'\r\n];\r\n\r\n/** @param {string} name */\r\nexport function is_mathml(name) {\r\n\treturn MATHML_ELEMENTS.includes(name);\r\n}\r\n\r\nconst STATE_CREATION_RUNES = /** @type {const} */ ([\r\n\t'$state',\r\n\t'$state.raw',\r\n\t'$derived',\r\n\t'$derived.by'\r\n]);\r\n\r\nconst RUNES = /** @type {const} */ ([\r\n\t...STATE_CREATION_RUNES,\r\n\t'$state.snapshot',\r\n\t'$props',\r\n\t'$props.id',\r\n\t'$bindable',\r\n\t'$effect',\r\n\t'$effect.pre',\r\n\t'$effect.tracking',\r\n\t'$effect.root',\r\n\t'$effect.pending',\r\n\t'$inspect',\r\n\t'$inspect().with',\r\n\t'$inspect.trace',\r\n\t'$host'\r\n]);\r\n\r\n/** @typedef {typeof RUNES[number]} RuneName */\r\n\r\n/**\r\n * @param {string} name\r\n * @returns {name is RuneName}\r\n */\r\nexport function is_rune(name) {\r\n\treturn RUNES.includes(/** @type {RuneName} */ (name));\r\n}\r\n\r\n/** @typedef {typeof STATE_CREATION_RUNES[number]} StateCreationRuneName */\r\n\r\n/**\r\n * @param {string} name\r\n * @returns {name is StateCreationRuneName}\r\n */\r\nexport function is_state_creation_rune(name) {\r\n\treturn STATE_CREATION_RUNES.includes(/** @type {StateCreationRuneName} */ (name));\r\n}\r\n\r\n/** List of elements that require raw contents and should not have SSR comments put in them */\r\nconst RAW_TEXT_ELEMENTS = /** @type {const} */ (['textarea', 'script', 'style', 'title']);\r\n\r\n/** @param {string} name */\r\nexport function is_raw_text_element(name) {\r\n\treturn RAW_TEXT_ELEMENTS.includes(/** @type {typeof RAW_TEXT_ELEMENTS[number]} */ (name));\r\n}\r\n\r\n/**\r\n * Prevent devtools trying to make `location` a clickable link by inserting a zero-width space\r\n * @template {string | undefined} T\r\n * @param {T} location\r\n * @returns {T};\r\n */\r\nexport function sanitize_location(location) {\r\n\treturn /** @type {T} */ (location?.replace(/\\//g, '/\\u200b'));\r\n}\r\n", "import { teardown } from '../../reactivity/effects.js';\r\nimport { define_property, is_array } from '../../../shared/utils.js';\r\nimport { hydrating } from '../hydration.js';\r\nimport { queue_micro_task } from '../task.js';\r\nimport { FILENAME } from '../../../../constants.js';\r\nimport * as w from '../../warnings.js';\r\nimport {\r\n\tactive_effect,\r\n\tactive_reaction,\r\n\tset_active_effect,\r\n\tset_active_reaction\r\n} from '../../runtime.js';\r\nimport { without_reactive_context } from './bindings/shared.js';\r\n\r\n/** @type {Set<string>} */\r\nexport const all_registered_events = new Set();\r\n\r\n/** @type {Set<(events: Array<string>) => void>} */\r\nexport const root_event_handles = new Set();\r\n\r\n/**\r\n * SSR adds onload and onerror attributes to catch those events before the hydration.\r\n * This function detects those cases, removes the attributes and replays the events.\r\n * @param {HTMLElement} dom\r\n */\r\nexport function replay_events(dom) {\r\n\tif (!hydrating) return;\r\n\r\n\tdom.removeAttribute('onload');\r\n\tdom.removeAttribute('onerror');\r\n\t// @ts-expect-error\r\n\tconst event = dom.__e;\r\n\tif (event !== undefined) {\r\n\t\t// @ts-expect-error\r\n\t\tdom.__e = undefined;\r\n\t\tqueueMicrotask(() => {\r\n\t\t\tif (dom.isConnected) {\r\n\t\t\t\tdom.dispatchEvent(event);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\r\n/**\r\n * @param {string} event_name\r\n * @param {EventTarget} dom\r\n * @param {EventListener} [handler]\r\n * @param {AddEventListenerOptions} [options]\r\n */\r\nexport function create_event(event_name, dom, handler, options = {}) {\r\n\t/**\r\n\t * @this {EventTarget}\r\n\t */\r\n\tfunction target_handler(/** @type {Event} */ event) {\r\n\t\tif (!options.capture) {\r\n\t\t\t// Only call in the bubble phase, else delegated events would be called before the capturing events\r\n\t\t\thandle_event_propagation.call(dom, event);\r\n\t\t}\r\n\t\tif (!event.cancelBubble) {\r\n\t\t\treturn without_reactive_context(() => {\r\n\t\t\t\treturn handler?.call(this, event);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t// Chrome has a bug where pointer events don't work when attached to a DOM element that has been cloned\r\n\t// with cloneNode() and the DOM element is disconnected from the document. To ensure the event works, we\r\n\t// defer the attachment till after it's been appended to the document. TODO: remove this once Chrome fixes\r\n\t// this bug. The same applies to wheel events and touch events.\r\n\tif (\r\n\t\tevent_name.startsWith('pointer') ||\r\n\t\tevent_name.startsWith('touch') ||\r\n\t\tevent_name === 'wheel'\r\n\t) {\r\n\t\tqueue_micro_task(() => {\r\n\t\t\tdom.addEventListener(event_name, target_handler, options);\r\n\t\t});\r\n\t} else {\r\n\t\tdom.addEventListener(event_name, target_handler, options);\r\n\t}\r\n\r\n\treturn target_handler;\r\n}\r\n\r\n/**\r\n * Attaches an event handler to an element and returns a function that removes the handler. Using this\r\n * rather than `addEventListener` will preserve the correct order relative to handlers added declaratively\r\n * (with attributes like `onclick`), which use event delegation for performance reasons\r\n *\r\n * @param {EventTarget} element\r\n * @param {string} type\r\n * @param {EventListener} handler\r\n * @param {AddEventListenerOptions} [options]\r\n */\r\nexport function on(element, type, handler, options = {}) {\r\n\tvar target_handler = create_event(type, element, handler, options);\r\n\r\n\treturn () => {\r\n\t\telement.removeEventListener(type, target_handler, options);\r\n\t};\r\n}\r\n\r\n/**\r\n * @param {string} event_name\r\n * @param {Element} dom\r\n * @param {EventListener} [handler]\r\n * @param {boolean} [capture]\r\n * @param {boolean} [passive]\r\n * @returns {void}\r\n */\r\nexport function event(event_name, dom, handler, capture, passive) {\r\n\tvar options = { capture, passive };\r\n\tvar target_handler = create_event(event_name, dom, handler, options);\r\n\r\n\tif (\r\n\t\tdom === document.body ||\r\n\t\t// @ts-ignore\r\n\t\tdom === window ||\r\n\t\t// @ts-ignore\r\n\t\tdom === document ||\r\n\t\t// Firefox has quirky behavior, it can happen that we still get \"canplay\" events when the element is already removed\r\n\t\tdom instanceof HTMLMediaElement\r\n\t) {\r\n\t\tteardown(() => {\r\n\t\t\tdom.removeEventListener(event_name, target_handler, options);\r\n\t\t});\r\n\t}\r\n}\r\n\r\n/**\r\n * @param {Array<string>} events\r\n * @returns {void}\r\n */\r\nexport function delegate(events) {\r\n\tfor (var i = 0; i < events.length; i++) {\r\n\t\tall_registered_events.add(events[i]);\r\n\t}\r\n\r\n\tfor (var fn of root_event_handles) {\r\n\t\tfn(events);\r\n\t}\r\n}\r\n\r\n// used to store the reference to the currently propagated event\r\n// to prevent garbage collection between microtasks in Firefox\r\n// If the event object is GCed too early, the expando __root property\r\n// set on the event object is lost, causing the event delegation\r\n// to process the event twice\r\nlet last_propagated_event = null;\r\n\r\n/**\r\n * @this {EventTarget}\r\n * @param {Event} event\r\n * @returns {void}\r\n */\r\nexport function handle_event_propagation(event) {\r\n\tvar handler_element = this;\r\n\tvar owner_document = /** @type {Node} */ (handler_element).ownerDocument;\r\n\tvar event_name = event.type;\r\n\tvar path = event.composedPath?.() || [];\r\n\tvar current_target = /** @type {null | Element} */ (path[0] || event.target);\r\n\r\n\tlast_propagated_event = event;\r\n\r\n\t// composedPath contains list of nodes the event has propagated through.\r\n\t// We check __root to skip all nodes below it in case this is a\r\n\t// parent of the __root node, which indicates that there's nested\r\n\t// mounted apps. In this case we don't want to trigger events multiple times.\r\n\tvar path_idx = 0;\r\n\r\n\t// the `last_propagated_event === event` check is redundant, but\r\n\t// without it the variable will be DCE'd and things will\r\n\t// fail mysteriously in Firefox\r\n\t// @ts-expect-error is added below\r\n\tvar handled_at = last_propagated_event === event && event.__root;\r\n\r\n\tif (handled_at) {\r\n\t\tvar at_idx = path.indexOf(handled_at);\r\n\t\tif (\r\n\t\t\tat_idx !== -1 &&\r\n\t\t\t(handler_element === document || handler_element === /** @type {any} */ (window))\r\n\t\t) {\r\n\t\t\t// This is the fallback document listener or a window listener, but the event was already handled\r\n\t\t\t// -> ignore, but set handle_at to document/window so that we're resetting the event\r\n\t\t\t// chain in case someone manually dispatches the same event object again.\r\n\t\t\t// @ts-expect-error\r\n\t\t\tevent.__root = handler_element;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// We're deliberately not skipping if the index is higher, because\r\n\t\t// someone could create an event programmatically and emit it multiple times,\r\n\t\t// in which case we want to handle the whole propagation chain properly each time.\r\n\t\t// (this will only be a false negative if the event is dispatched multiple times and\r\n\t\t// the fallback document listener isn't reached in between, but that's super rare)\r\n\t\tvar handler_idx = path.indexOf(handler_element);\r\n\t\tif (handler_idx === -1) {\r\n\t\t\t// handle_idx can theoretically be -1 (happened in some JSDOM testing scenarios with an event listener on the window object)\r\n\t\t\t// so guard against that, too, and assume that everything was handled at this point.\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (at_idx <= handler_idx) {\r\n\t\t\tpath_idx = at_idx;\r\n\t\t}\r\n\t}\r\n\r\n\tcurrent_target = /** @type {Element} */ (path[path_idx] || event.target);\r\n\t// there can only be one delegated event per element, and we either already handled the current target,\r\n\t// or this is the very first target in the chain which has a non-delegated listener, in which case it's safe\r\n\t// to handle a possible delegated event on it later (through the root delegation listener for example).\r\n\tif (current_target === handler_element) return;\r\n\r\n\t// Proxy currentTarget to correct target\r\n\tdefine_property(event, 'currentTarget', {\r\n\t\tconfigurable: true,\r\n\t\tget() {\r\n\t\t\treturn current_target || owner_document;\r\n\t\t}\r\n\t});\r\n\r\n\t// This started because of Chromium issue https://chromestatus.com/feature/5128696823545856,\r\n\t// where removal or moving of of the DOM can cause sync `blur` events to fire, which can cause logic\r\n\t// to run inside the current `active_reaction`, which isn't what we want at all. However, on reflection,\r\n\t// it's probably best that all event handled by Svelte have this behaviour, as we don't really want\r\n\t// an event handler to run in the context of another reaction or effect.\r\n\tvar previous_reaction = active_reaction;\r\n\tvar previous_effect = active_effect;\r\n\tset_active_reaction(null);\r\n\tset_active_effect(null);\r\n\r\n\ttry {\r\n\t\t/**\r\n\t\t * @type {unknown}\r\n\t\t */\r\n\t\tvar throw_error;\r\n\t\t/**\r\n\t\t * @type {unknown[]}\r\n\t\t */\r\n\t\tvar other_errors = [];\r\n\r\n\t\twhile (current_target !== null) {\r\n\t\t\t/** @type {null | Element} */\r\n\t\t\tvar parent_element =\r\n\t\t\t\tcurrent_target.assignedSlot ||\r\n\t\t\t\tcurrent_target.parentNode ||\r\n\t\t\t\t/** @type {any} */ (current_target).host ||\r\n\t\t\t\tnull;\r\n\r\n\t\t\ttry {\r\n\t\t\t\t// @ts-expect-error\r\n\t\t\t\tvar delegated = current_target['__' + event_name];\r\n\r\n\t\t\t\tif (\r\n\t\t\t\t\tdelegated != null &&\r\n\t\t\t\t\t(!(/** @type {any} */ (current_target).disabled) ||\r\n\t\t\t\t\t\t// DOM could've been updated already by the time this is reached, so we check this as well\r\n\t\t\t\t\t\t// -> the target could not have been disabled because it emits the event in the first place\r\n\t\t\t\t\t\tevent.target === current_target)\r\n\t\t\t\t) {\r\n\t\t\t\t\tif (is_array(delegated)) {\r\n\t\t\t\t\t\tvar [fn, ...data] = delegated;\r\n\t\t\t\t\t\tfn.apply(current_target, [event, ...data]);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tdelegated.call(current_target, event);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\tif (throw_error) {\r\n\t\t\t\t\tother_errors.push(error);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow_error = error;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (event.cancelBubble || parent_element === handler_element || parent_element === null) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcurrent_target = parent_element;\r\n\t\t}\r\n\r\n\t\tif (throw_error) {\r\n\t\t\tfor (let error of other_errors) {\r\n\t\t\t\t// Throw the rest of the errors, one-by-one on a microtask\r\n\t\t\t\tqueueMicrotask(() => {\r\n\t\t\t\t\tthrow error;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tthrow throw_error;\r\n\t\t}\r\n\t} finally {\r\n\t\t// @ts-expect-error is used above\r\n\t\tevent.__root = handler_element;\r\n\t\t// @ts-ignore remove proxy on currentTarget\r\n\t\tdelete event.currentTarget;\r\n\t\tset_active_reaction(previous_reaction);\r\n\t\tset_active_effect(previous_effect);\r\n\t}\r\n}\r\n\r\n/**\r\n * In dev, warn if an event handler is not a function, as it means the\r\n * user probably called the handler or forgot to add a `() =>`\r\n * @param {() => (event: Event, ...args: any) => void} thunk\r\n * @param {EventTarget} element\r\n * @param {[Event, ...any]} args\r\n * @param {any} component\r\n * @param {[number, number]} [loc]\r\n * @param {boolean} [remove_parens]\r\n */\r\nexport function apply(\r\n\tthunk,\r\n\telement,\r\n\targs,\r\n\tcomponent,\r\n\tloc,\r\n\thas_side_effects = false,\r\n\tremove_parens = false\r\n) {\r\n\tlet handler;\r\n\tlet error;\r\n\r\n\ttry {\r\n\t\thandler = thunk();\r\n\t} catch (e) {\r\n\t\terror = e;\r\n\t}\r\n\r\n\tif (typeof handler !== 'function' && (has_side_effects || handler != null || error)) {\r\n\t\tconst filename = component?.[FILENAME];\r\n\t\tconst location = loc ? ` at ${filename}:${loc[0]}:${loc[1]}` : ` in ${filename}`;\r\n\t\tconst phase = args[0]?.eventPhase < Event.BUBBLING_PHASE ? 'capture' : '';\r\n\t\tconst event_name = args[0]?.type + phase;\r\n\t\tconst description = `\\`${event_name}\\` handler${location}`;\r\n\t\tconst suggestion = remove_parens ? 'remove the trailing `()`' : 'add a leading `() =>`';\r\n\r\n\t\tw.event_handler_invalid(description, suggestion);\r\n\r\n\t\tif (error) {\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t}\r\n\thandler?.apply(element, args);\r\n}\r\n", "/** @import { TemplateNode } from '#client' */\r\nimport { hydrate_node, hydrating, set_hydrate_node, set_hydrating } from '../hydration.js';\r\nimport { create_text, get_first_child, get_next_sibling } from '../operations.js';\r\nimport { block } from '../../reactivity/effects.js';\r\nimport { COMMENT_NODE, HEAD_EFFECT } from '#client/constants';\r\nimport { HYDRATION_START } from '../../../../constants.js';\r\n\r\n/**\r\n * @type {Node | undefined}\r\n */\r\nlet head_anchor;\r\n\r\nexport function reset_head_anchor() {\r\n\thead_anchor = undefined;\r\n}\r\n\r\n/**\r\n * @param {(anchor: Node) => void} render_fn\r\n * @returns {void}\r\n */\r\nexport function head(render_fn) {\r\n\t// The head function may be called after the first hydration pass and ssr comment nodes may still be present,\r\n\t// therefore we need to skip that when we detect that we're not in hydration mode.\r\n\tlet previous_hydrate_node = null;\r\n\tlet was_hydrating = hydrating;\r\n\r\n\t/** @type {Comment | Text} */\r\n\tvar anchor;\r\n\r\n\tif (hydrating) {\r\n\t\tprevious_hydrate_node = hydrate_node;\r\n\r\n\t\t// There might be multiple head blocks in our app, so we need to account for each one needing independent hydration.\r\n\t\tif (head_anchor === undefined) {\r\n\t\t\thead_anchor = /** @type {TemplateNode} */ (get_first_child(document.head));\r\n\t\t}\r\n\r\n\t\twhile (\r\n\t\t\thead_anchor !== null &&\r\n\t\t\t(head_anchor.nodeType !== COMMENT_NODE ||\r\n\t\t\t\t/** @type {Comment} */ (head_anchor).data !== HYDRATION_START)\r\n\t\t) {\r\n\t\t\thead_anchor = /** @type {TemplateNode} */ (get_next_sibling(head_anchor));\r\n\t\t}\r\n\r\n\t\t// If we can't find an opening hydration marker, skip hydration (this can happen\r\n\t\t// if a framework rendered body but not head content)\r\n\t\tif (head_anchor === null) {\r\n\t\t\tset_hydrating(false);\r\n\t\t} else {\r\n\t\t\thead_anchor = set_hydrate_node(/** @type {TemplateNode} */ (get_next_sibling(head_anchor)));\r\n\t\t}\r\n\t}\r\n\r\n\tif (!hydrating) {\r\n\t\tanchor = document.head.appendChild(create_text());\r\n\t}\r\n\r\n\ttry {\r\n\t\tblock(() => render_fn(anchor), HEAD_EFFECT);\r\n\t} finally {\r\n\t\tif (was_hydrating) {\r\n\t\t\tset_hydrating(true);\r\n\t\t\thead_anchor = hydrate_node; // so that next head block starts from the correct node\r\n\t\t\tset_hydrate_node(/** @type {TemplateNode} */ (previous_hydrate_node));\r\n\t\t}\r\n\t}\r\n}\r\n", "/** @param {string} html */\r\nexport function create_fragment_from_html(html) {\r\n\tvar elem = document.createElement('template');\r\n\telem.innerHTML = html.replaceAll('<!>', '<!---->'); // XHTML compliance\r\n\treturn elem.content;\r\n}\r\n", "/** @import { Effect, TemplateNode } from '#client' */\r\n/** @import { TemplateStructure } from './types' */\r\nimport { hydrate_next, hydrate_node, hydrating, set_hydrate_node } from './hydration.js';\r\nimport {\r\n\tcreate_text,\r\n\tget_first_child,\r\n\tis_firefox,\r\n\tcreate_element,\r\n\tcreate_fragment,\r\n\tcreate_comment,\r\n\tset_attribute\r\n} from './operations.js';\r\nimport { create_fragment_from_html } from './reconciler.js';\r\nimport { active_effect } from '../runtime.js';\r\nimport {\r\n\tNAMESPACE_MATHML,\r\n\tNAMESPACE_SVG,\r\n\tTEMPLATE_FRAGMENT,\r\n\tTEMPLATE_USE_IMPORT_NODE,\r\n\tTEMPLATE_USE_MATHML,\r\n\tTEMPLATE_USE_SVG\r\n} from '../../../constants.js';\r\nimport { COMMENT_NODE, DOCUMENT_FRAGMENT_NODE, TEXT_NODE } from '#client/constants';\r\n\r\n/**\r\n * @param {TemplateNode} start\r\n * @param {TemplateNode | null} end\r\n */\r\nexport function assign_nodes(start, end) {\r\n\tvar effect = /** @type {Effect} */ (active_effect);\r\n\tif (effect.nodes_start === null) {\r\n\t\teffect.nodes_start = start;\r\n\t\teffect.nodes_end = end;\r\n\t}\r\n}\r\n\r\n/**\r\n * @param {string} content\r\n * @param {number} flags\r\n * @returns {() => Node | Node[]}\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function from_html(content, flags) {\r\n\tvar is_fragment = (flags & TEMPLATE_FRAGMENT) !== 0;\r\n\tvar use_import_node = (flags & TEMPLATE_USE_IMPORT_NODE) !== 0;\r\n\r\n\t/** @type {Node} */\r\n\tvar node;\r\n\r\n\t/**\r\n\t * Whether or not the first item is a text/element node. If not, we need to\r\n\t * create an additional comment node to act as `effect.nodes.start`\r\n\t */\r\n\tvar has_start = !content.startsWith('<!>');\r\n\r\n\treturn () => {\r\n\t\tif (hydrating) {\r\n\t\t\tassign_nodes(hydrate_node, null);\r\n\t\t\treturn hydrate_node;\r\n\t\t}\r\n\r\n\t\tif (node === undefined) {\r\n\t\t\tnode = create_fragment_from_html(has_start ? content : '<!>' + content);\r\n\t\t\tif (!is_fragment) node = /** @type {Node} */ (get_first_child(node));\r\n\t\t}\r\n\r\n\t\tvar clone = /** @type {TemplateNode} */ (\r\n\t\t\tuse_import_node || is_firefox ? document.importNode(node, true) : node.cloneNode(true)\r\n\t\t);\r\n\r\n\t\tif (is_fragment) {\r\n\t\t\tvar start = /** @type {TemplateNode} */ (get_first_child(clone));\r\n\t\t\tvar end = /** @type {TemplateNode} */ (clone.lastChild);\r\n\r\n\t\t\tassign_nodes(start, end);\r\n\t\t} else {\r\n\t\t\tassign_nodes(clone, clone);\r\n\t\t}\r\n\r\n\t\treturn clone;\r\n\t};\r\n}\r\n\r\n/**\r\n * @param {string} content\r\n * @param {number} flags\r\n * @param {'svg' | 'math'} ns\r\n * @returns {() => Node | Node[]}\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nfunction from_namespace(content, flags, ns = 'svg') {\r\n\t/**\r\n\t * Whether or not the first item is a text/element node. If not, we need to\r\n\t * create an additional comment node to act as `effect.nodes.start`\r\n\t */\r\n\tvar has_start = !content.startsWith('<!>');\r\n\r\n\tvar is_fragment = (flags & TEMPLATE_FRAGMENT) !== 0;\r\n\tvar wrapped = `<${ns}>${has_start ? content : '<!>' + content}</${ns}>`;\r\n\r\n\t/** @type {Element | DocumentFragment} */\r\n\tvar node;\r\n\r\n\treturn () => {\r\n\t\tif (hydrating) {\r\n\t\t\tassign_nodes(hydrate_node, null);\r\n\t\t\treturn hydrate_node;\r\n\t\t}\r\n\r\n\t\tif (!node) {\r\n\t\t\tvar fragment = /** @type {DocumentFragment} */ (create_fragment_from_html(wrapped));\r\n\t\t\tvar root = /** @type {Element} */ (get_first_child(fragment));\r\n\r\n\t\t\tif (is_fragment) {\r\n\t\t\t\tnode = document.createDocumentFragment();\r\n\t\t\t\twhile (get_first_child(root)) {\r\n\t\t\t\t\tnode.appendChild(/** @type {Node} */ (get_first_child(root)));\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tnode = /** @type {Element} */ (get_first_child(root));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar clone = /** @type {TemplateNode} */ (node.cloneNode(true));\r\n\r\n\t\tif (is_fragment) {\r\n\t\t\tvar start = /** @type {TemplateNode} */ (get_first_child(clone));\r\n\t\t\tvar end = /** @type {TemplateNode} */ (clone.lastChild);\r\n\r\n\t\t\tassign_nodes(start, end);\r\n\t\t} else {\r\n\t\t\tassign_nodes(clone, clone);\r\n\t\t}\r\n\r\n\t\treturn clone;\r\n\t};\r\n}\r\n\r\n/**\r\n * @param {string} content\r\n * @param {number} flags\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function from_svg(content, flags) {\r\n\treturn from_namespace(content, flags, 'svg');\r\n}\r\n\r\n/**\r\n * @param {string} content\r\n * @param {number} flags\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function from_mathml(content, flags) {\r\n\treturn from_namespace(content, flags, 'math');\r\n}\r\n\r\n/**\r\n * @param {TemplateStructure[]} structure\r\n * @param {typeof NAMESPACE_SVG | typeof NAMESPACE_MATHML | undefined} [ns]\r\n */\r\nfunction fragment_from_tree(structure, ns) {\r\n\tvar fragment = create_fragment();\r\n\r\n\tfor (var item of structure) {\r\n\t\tif (typeof item === 'string') {\r\n\t\t\tfragment.append(create_text(item));\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\t// if `preserveComments === true`, comments are represented as `['// <data>']`\r\n\t\tif (item === undefined || item[0][0] === '/') {\r\n\t\t\tfragment.append(create_comment(item ? item[0].slice(3) : ''));\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\tconst [name, attributes, ...children] = item;\r\n\r\n\t\tconst namespace = name === 'svg' ? NAMESPACE_SVG : name === 'math' ? NAMESPACE_MATHML : ns;\r\n\r\n\t\tvar element = create_element(name, namespace, attributes?.is);\r\n\r\n\t\tfor (var key in attributes) {\r\n\t\t\tset_attribute(element, key, attributes[key]);\r\n\t\t}\r\n\r\n\t\tif (children.length > 0) {\r\n\t\t\tvar target =\r\n\t\t\t\telement.tagName === 'TEMPLATE'\r\n\t\t\t\t\t? /** @type {HTMLTemplateElement} */ (element).content\r\n\t\t\t\t\t: element;\r\n\r\n\t\t\ttarget.append(\r\n\t\t\t\tfragment_from_tree(children, element.tagName === 'foreignObject' ? undefined : namespace)\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tfragment.append(element);\r\n\t}\r\n\r\n\treturn fragment;\r\n}\r\n\r\n/**\r\n * @param {TemplateStructure[]} structure\r\n * @param {number} flags\r\n * @returns {() => Node | Node[]}\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function from_tree(structure, flags) {\r\n\tvar is_fragment = (flags & TEMPLATE_FRAGMENT) !== 0;\r\n\tvar use_import_node = (flags & TEMPLATE_USE_IMPORT_NODE) !== 0;\r\n\r\n\t/** @type {Node} */\r\n\tvar node;\r\n\r\n\treturn () => {\r\n\t\tif (hydrating) {\r\n\t\t\tassign_nodes(hydrate_node, null);\r\n\t\t\treturn hydrate_node;\r\n\t\t}\r\n\r\n\t\tif (node === undefined) {\r\n\t\t\tconst ns =\r\n\t\t\t\t(flags & TEMPLATE_USE_SVG) !== 0\r\n\t\t\t\t\t? NAMESPACE_SVG\r\n\t\t\t\t\t: (flags & TEMPLATE_USE_MATHML) !== 0\r\n\t\t\t\t\t\t? NAMESPACE_MATHML\r\n\t\t\t\t\t\t: undefined;\r\n\r\n\t\t\tnode = fragment_from_tree(structure, ns);\r\n\t\t\tif (!is_fragment) node = /** @type {Node} */ (get_first_child(node));\r\n\t\t}\r\n\r\n\t\tvar clone = /** @type {TemplateNode} */ (\r\n\t\t\tuse_import_node || is_firefox ? document.importNode(node, true) : node.cloneNode(true)\r\n\t\t);\r\n\r\n\t\tif (is_fragment) {\r\n\t\t\tvar start = /** @type {TemplateNode} */ (get_first_child(clone));\r\n\t\t\tvar end = /** @type {TemplateNode} */ (clone.lastChild);\r\n\r\n\t\t\tassign_nodes(start, end);\r\n\t\t} else {\r\n\t\t\tassign_nodes(clone, clone);\r\n\t\t}\r\n\r\n\t\treturn clone;\r\n\t};\r\n}\r\n\r\n/**\r\n * @param {() => Element | DocumentFragment} fn\r\n */\r\nexport function with_script(fn) {\r\n\treturn () => run_scripts(fn());\r\n}\r\n\r\n/**\r\n * Creating a document fragment from HTML that contains script tags will not execute\r\n * the scripts. We need to replace the script tags with new ones so that they are executed.\r\n * @param {Element | DocumentFragment} node\r\n * @returns {Node | Node[]}\r\n */\r\nfunction run_scripts(node) {\r\n\t// scripts were SSR'd, in which case they will run\r\n\tif (hydrating) return node;\r\n\r\n\tconst is_fragment = node.nodeType === DOCUMENT_FRAGMENT_NODE;\r\n\tconst scripts =\r\n\t\t/** @type {HTMLElement} */ (node).tagName === 'SCRIPT'\r\n\t\t\t? [/** @type {HTMLScriptElement} */ (node)]\r\n\t\t\t: node.querySelectorAll('script');\r\n\tconst effect = /** @type {Effect} */ (active_effect);\r\n\r\n\tfor (const script of scripts) {\r\n\t\tconst clone = document.createElement('script');\r\n\t\tfor (var attribute of script.attributes) {\r\n\t\t\tclone.setAttribute(attribute.name, attribute.value);\r\n\t\t}\r\n\r\n\t\tclone.textContent = script.textContent;\r\n\r\n\t\t// The script has changed - if it's at the edges, the effect now points at dead nodes\r\n\t\tif (is_fragment ? node.firstChild === script : node === script) {\r\n\t\t\teffect.nodes_start = clone;\r\n\t\t}\r\n\t\tif (is_fragment ? node.lastChild === script : node === script) {\r\n\t\t\teffect.nodes_end = clone;\r\n\t\t}\r\n\r\n\t\tscript.replaceWith(clone);\r\n\t}\r\n\treturn node;\r\n}\r\n\r\n/**\r\n * Don't mark this as side-effect-free, hydration needs to walk all nodes\r\n * @param {any} value\r\n */\r\nexport function text(value = '') {\r\n\tif (!hydrating) {\r\n\t\tvar t = create_text(value + '');\r\n\t\tassign_nodes(t, t);\r\n\t\treturn t;\r\n\t}\r\n\r\n\tvar node = hydrate_node;\r\n\r\n\tif (node.nodeType !== TEXT_NODE) {\r\n\t\t// if an {expression} is empty during SSR, we need to insert an empty text node\r\n\t\tnode.before((node = create_text()));\r\n\t\tset_hydrate_node(node);\r\n\t}\r\n\r\n\tassign_nodes(node, node);\r\n\treturn node;\r\n}\r\n\r\nexport function comment() {\r\n\t// we're not delegating to `template` here for performance reasons\r\n\tif (hydrating) {\r\n\t\tassign_nodes(hydrate_node, null);\r\n\t\treturn hydrate_node;\r\n\t}\r\n\r\n\tvar frag = document.createDocumentFragment();\r\n\tvar start = document.createComment('');\r\n\tvar anchor = create_text();\r\n\tfrag.append(start, anchor);\r\n\r\n\tassign_nodes(start, anchor);\r\n\r\n\treturn frag;\r\n}\r\n\r\n/**\r\n * Assign the created (or in hydration mode, traversed) dom elements to the current block\r\n * and insert the elements into the dom (in client mode).\r\n * @param {Text | Comment | Element} anchor\r\n * @param {DocumentFragment | Element} dom\r\n */\r\nexport function append(anchor, dom) {\r\n\tif (hydrating) {\r\n\t\t/** @type {Effect} */ (active_effect).nodes_end = hydrate_node;\r\n\t\thydrate_next();\r\n\t\treturn;\r\n\t}\r\n\r\n\tif (anchor === null) {\r\n\t\t// edge case — void `<svelte:element>` with content\r\n\t\treturn;\r\n\t}\r\n\r\n\tanchor.before(/** @type {Node} */ (dom));\r\n}\r\n\r\n/**\r\n * Create (or hydrate) an unique UID for the component instance.\r\n */\r\nexport function props_id() {\r\n\tif (\r\n\t\thydrating &&\r\n\t\thydrate_node &&\r\n\t\thydrate_node.nodeType === COMMENT_NODE &&\r\n\t\thydrate_node.textContent?.startsWith(`#`)\r\n\t) {\r\n\t\tconst id = hydrate_node.textContent.substring(1);\r\n\t\thydrate_next();\r\n\t\treturn id;\r\n\t}\r\n\r\n\t// @ts-expect-error This way we ensure the id is unique even across Svelte runtimes\r\n\t(window.__svelte ??= {}).uid ??= 1;\r\n\r\n\t// @ts-expect-error\r\n\treturn `c${window.__svelte.uid++}`;\r\n}\r\n", "/** @import { ComponentContext, Effect, TemplateNode } from '#client' */\r\n/** @import { Component, ComponentType, SvelteComponent, MountOptions } from '../../index.js' */\r\nimport { DEV } from 'esm-env';\r\nimport {\r\n\tclear_text_content,\r\n\tcreate_text,\r\n\tget_first_child,\r\n\tget_next_sibling,\r\n\tinit_operations\r\n} from './dom/operations.js';\r\nimport { HYDRATION_END, HYDRATION_ERROR, HYDRATION_START } from '../../constants.js';\r\nimport { active_effect } from './runtime.js';\r\nimport { push, pop, component_context } from './context.js';\r\nimport { component_root, branch } from './reactivity/effects.js';\r\nimport {\r\n\thydrate_next,\r\n\thydrate_node,\r\n\thydrating,\r\n\tset_hydrate_node,\r\n\tset_hydrating\r\n} from './dom/hydration.js';\r\nimport { array_from } from '../shared/utils.js';\r\nimport {\r\n\tall_registered_events,\r\n\thandle_event_propagation,\r\n\troot_event_handles\r\n} from './dom/elements/events.js';\r\nimport { reset_head_anchor } from './dom/blocks/svelte-head.js';\r\nimport * as w from './warnings.js';\r\nimport * as e from './errors.js';\r\nimport { assign_nodes } from './dom/template.js';\r\nimport { is_passive_event } from '../../utils.js';\r\nimport { COMMENT_NODE } from './constants.js';\r\n\r\n/**\r\n * This is normally true — block effects should run their intro transitions —\r\n * but is false during hydration (unless `options.intro` is `true`) and\r\n * when creating the children of a `<svelte:element>` that just changed tag\r\n */\r\nexport let should_intro = true;\r\n\r\n/** @param {boolean} value */\r\nexport function set_should_intro(value) {\r\n\tshould_intro = value;\r\n}\r\n\r\n/**\r\n * @param {Element} text\r\n * @param {string} value\r\n * @returns {void}\r\n */\r\nexport function set_text(text, value) {\r\n\t// For objects, we apply string coercion (which might make things like $state array references in the template reactive) before diffing\r\n\tvar str = value == null ? '' : typeof value === 'object' ? value + '' : value;\r\n\t// @ts-expect-error\r\n\tif (str !== (text.__t ??= text.nodeValue)) {\r\n\t\t// @ts-expect-error\r\n\t\ttext.__t = str;\r\n\t\ttext.nodeValue = str + '';\r\n\t}\r\n}\r\n\r\n/**\r\n * Mounts a component to the given target and returns the exports and potentially the props (if compiled with `accessors: true`) of the component.\r\n * Transitions will play during the initial render unless the `intro` option is set to `false`.\r\n *\r\n * @template {Record<string, any>} Props\r\n * @template {Record<string, any>} Exports\r\n * @param {ComponentType<SvelteComponent<Props>> | Component<Props, Exports, any>} component\r\n * @param {MountOptions<Props>} options\r\n * @returns {Exports}\r\n */\r\nexport function mount(component, options) {\r\n\treturn _mount(component, options);\r\n}\r\n\r\n/**\r\n * Hydrates a component on the given target and returns the exports and potentially the props (if compiled with `accessors: true`) of the component\r\n *\r\n * @template {Record<string, any>} Props\r\n * @template {Record<string, any>} Exports\r\n * @param {ComponentType<SvelteComponent<Props>> | Component<Props, Exports, any>} component\r\n * @param {{} extends Props ? {\r\n * \t\ttarget: Document | Element | ShadowRoot;\r\n * \t\tprops?: Props;\r\n * \t\tevents?: Record<string, (e: any) => any>;\r\n *  \tcontext?: Map<any, any>;\r\n * \t\tintro?: boolean;\r\n * \t\trecover?: boolean;\r\n * \t} : {\r\n * \t\ttarget: Document | Element | ShadowRoot;\r\n * \t\tprops: Props;\r\n * \t\tevents?: Record<string, (e: any) => any>;\r\n *  \tcontext?: Map<any, any>;\r\n * \t\tintro?: boolean;\r\n * \t\trecover?: boolean;\r\n * \t}} options\r\n * @returns {Exports}\r\n */\r\nexport function hydrate(component, options) {\r\n\tinit_operations();\r\n\toptions.intro = options.intro ?? false;\r\n\tconst target = options.target;\r\n\tconst was_hydrating = hydrating;\r\n\tconst previous_hydrate_node = hydrate_node;\r\n\r\n\ttry {\r\n\t\tvar anchor = /** @type {TemplateNode} */ (get_first_child(target));\r\n\t\twhile (\r\n\t\t\tanchor &&\r\n\t\t\t(anchor.nodeType !== COMMENT_NODE || /** @type {Comment} */ (anchor).data !== HYDRATION_START)\r\n\t\t) {\r\n\t\t\tanchor = /** @type {TemplateNode} */ (get_next_sibling(anchor));\r\n\t\t}\r\n\r\n\t\tif (!anchor) {\r\n\t\t\tthrow HYDRATION_ERROR;\r\n\t\t}\r\n\r\n\t\tset_hydrating(true);\r\n\t\tset_hydrate_node(/** @type {Comment} */ (anchor));\r\n\t\thydrate_next();\r\n\r\n\t\tconst instance = _mount(component, { ...options, anchor });\r\n\r\n\t\tif (\r\n\t\t\thydrate_node === null ||\r\n\t\t\thydrate_node.nodeType !== COMMENT_NODE ||\r\n\t\t\t/** @type {Comment} */ (hydrate_node).data !== HYDRATION_END\r\n\t\t) {\r\n\t\t\tw.hydration_mismatch();\r\n\t\t\tthrow HYDRATION_ERROR;\r\n\t\t}\r\n\r\n\t\tset_hydrating(false);\r\n\r\n\t\treturn /**  @type {Exports} */ (instance);\r\n\t} catch (error) {\r\n\t\t// re-throw Svelte errors - they are certainly not related to hydration\r\n\t\tif (\r\n\t\t\terror instanceof Error &&\r\n\t\t\terror.message.split('\\n').some((line) => line.startsWith('https://svelte.dev/e/'))\r\n\t\t) {\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t\tif (error !== HYDRATION_ERROR) {\r\n\t\t\t// eslint-disable-next-line no-console\r\n\t\t\tconsole.warn('Failed to hydrate: ', error);\r\n\t\t}\r\n\r\n\t\tif (options.recover === false) {\r\n\t\t\te.hydration_failed();\r\n\t\t}\r\n\r\n\t\t// If an error occured above, the operations might not yet have been initialised.\r\n\t\tinit_operations();\r\n\t\tclear_text_content(target);\r\n\r\n\t\tset_hydrating(false);\r\n\t\treturn mount(component, options);\r\n\t} finally {\r\n\t\tset_hydrating(was_hydrating);\r\n\t\tset_hydrate_node(previous_hydrate_node);\r\n\t\treset_head_anchor();\r\n\t}\r\n}\r\n\r\n/** @type {Map<string, number>} */\r\nconst document_listeners = new Map();\r\n\r\n/**\r\n * @template {Record<string, any>} Exports\r\n * @param {ComponentType<SvelteComponent<any>> | Component<any>} Component\r\n * @param {MountOptions} options\r\n * @returns {Exports}\r\n */\r\nfunction _mount(Component, { target, anchor, props = {}, events, context, intro = true }) {\r\n\tinit_operations();\r\n\r\n\t/** @type {Set<string>} */\r\n\tvar registered_events = new Set();\r\n\r\n\t/** @param {Array<string>} events */\r\n\tvar event_handle = (events) => {\r\n\t\tfor (var i = 0; i < events.length; i++) {\r\n\t\t\tvar event_name = events[i];\r\n\r\n\t\t\tif (registered_events.has(event_name)) continue;\r\n\t\t\tregistered_events.add(event_name);\r\n\r\n\t\t\tvar passive = is_passive_event(event_name);\r\n\r\n\t\t\t// Add the event listener to both the container and the document.\r\n\t\t\t// The container listener ensures we catch events from within in case\r\n\t\t\t// the outer content stops propagation of the event.\r\n\t\t\ttarget.addEventListener(event_name, handle_event_propagation, { passive });\r\n\r\n\t\t\tvar n = document_listeners.get(event_name);\r\n\r\n\t\t\tif (n === undefined) {\r\n\t\t\t\t// The document listener ensures we catch events that originate from elements that were\r\n\t\t\t\t// manually moved outside of the container (e.g. via manual portals).\r\n\t\t\t\tdocument.addEventListener(event_name, handle_event_propagation, { passive });\r\n\t\t\t\tdocument_listeners.set(event_name, 1);\r\n\t\t\t} else {\r\n\t\t\t\tdocument_listeners.set(event_name, n + 1);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tevent_handle(array_from(all_registered_events));\r\n\troot_event_handles.add(event_handle);\r\n\r\n\t/** @type {Exports} */\r\n\t// @ts-expect-error will be defined because the render effect runs synchronously\r\n\tvar component = undefined;\r\n\r\n\tvar unmount = component_root(() => {\r\n\t\tvar anchor_node = anchor ?? target.appendChild(create_text());\r\n\r\n\t\tbranch(() => {\r\n\t\t\tif (context) {\r\n\t\t\t\tpush({});\r\n\t\t\t\tvar ctx = /** @type {ComponentContext} */ (component_context);\r\n\t\t\t\tctx.c = context;\r\n\t\t\t}\r\n\r\n\t\t\tif (events) {\r\n\t\t\t\t// We can't spread the object or else we'd lose the state proxy stuff, if it is one\r\n\t\t\t\t/** @type {any} */ (props).$$events = events;\r\n\t\t\t}\r\n\r\n\t\t\tif (hydrating) {\r\n\t\t\t\tassign_nodes(/** @type {TemplateNode} */ (anchor_node), null);\r\n\t\t\t}\r\n\r\n\t\t\tshould_intro = intro;\r\n\t\t\t// @ts-expect-error the public typings are not what the actual function looks like\r\n\t\t\tcomponent = Component(anchor_node, props) || {};\r\n\t\t\tshould_intro = true;\r\n\r\n\t\t\tif (hydrating) {\r\n\t\t\t\t/** @type {Effect} */ (active_effect).nodes_end = hydrate_node;\r\n\t\t\t}\r\n\r\n\t\t\tif (context) {\r\n\t\t\t\tpop();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn () => {\r\n\t\t\tfor (var event_name of registered_events) {\r\n\t\t\t\ttarget.removeEventListener(event_name, handle_event_propagation);\r\n\r\n\t\t\t\tvar n = /** @type {number} */ (document_listeners.get(event_name));\r\n\r\n\t\t\t\tif (--n === 0) {\r\n\t\t\t\t\tdocument.removeEventListener(event_name, handle_event_propagation);\r\n\t\t\t\t\tdocument_listeners.delete(event_name);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdocument_listeners.set(event_name, n);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\troot_event_handles.delete(event_handle);\r\n\r\n\t\t\tif (anchor_node !== anchor) {\r\n\t\t\t\tanchor_node.parentNode?.removeChild(anchor_node);\r\n\t\t\t}\r\n\t\t};\r\n\t});\r\n\r\n\tmounted_components.set(component, unmount);\r\n\treturn component;\r\n}\r\n\r\n/**\r\n * References of the components that were mounted or hydrated.\r\n * Uses a `WeakMap` to avoid memory leaks.\r\n */\r\nlet mounted_components = new WeakMap();\r\n\r\n/**\r\n * Unmounts a component that was previously mounted using `mount` or `hydrate`.\r\n *\r\n * Since 5.13.0, if `options.outro` is `true`, [transitions](https://svelte.dev/docs/svelte/transition) will play before the component is removed from the DOM.\r\n *\r\n * Returns a `Promise` that resolves after transitions have completed if `options.outro` is true, or immediately otherwise (prior to 5.13.0, returns `void`).\r\n *\r\n * ```js\r\n * import { mount, unmount } from 'svelte';\r\n * import App from './App.svelte';\r\n *\r\n * const app = mount(App, { target: document.body });\r\n *\r\n * // later...\r\n * unmount(app, { outro: true });\r\n * ```\r\n * @param {Record<string, any>} component\r\n * @param {{ outro?: boolean }} [options]\r\n * @returns {Promise<void>}\r\n */\r\nexport function unmount(component, options) {\r\n\tconst fn = mounted_components.get(component);\r\n\r\n\tif (fn) {\r\n\t\tmounted_components.delete(component);\r\n\t\treturn fn(options);\r\n\t}\r\n\r\n\tif (DEV) {\r\n\t\tw.lifecycle_double_unmount();\r\n\t}\r\n\r\n\treturn Promise.resolve();\r\n}\r\n", "/** @import { Snippet } from 'svelte' */\r\n/** @import { Effect, TemplateNode } from '#client' */\r\n/** @import { Getters } from '#shared' */\r\nimport { EFFECT_TRANSPARENT, ELEMENT_NODE } from '#client/constants';\r\nimport { branch, block, destroy_effect, teardown } from '../../reactivity/effects.js';\r\nimport {\r\n\tdev_current_component_function,\r\n\tset_dev_current_component_function\r\n} from '../../context.js';\r\nimport { hydrate_next, hydrate_node, hydrating } from '../hydration.js';\r\nimport { create_fragment_from_html } from '../reconciler.js';\r\nimport { assign_nodes } from '../template.js';\r\nimport * as w from '../../warnings.js';\r\nimport * as e from '../../errors.js';\r\nimport { DEV } from 'esm-env';\r\nimport { get_first_child, get_next_sibling } from '../operations.js';\r\nimport { noop } from '../../../shared/utils.js';\r\nimport { prevent_snippet_stringification } from '../../../shared/validate.js';\r\n\r\n/**\r\n * @template {(node: TemplateNode, ...args: any[]) => void} SnippetFn\r\n * @param {TemplateNode} node\r\n * @param {() => SnippetFn | null | undefined} get_snippet\r\n * @param {(() => any)[]} args\r\n * @returns {void}\r\n */\r\nexport function snippet(node, get_snippet, ...args) {\r\n\tvar anchor = node;\r\n\r\n\t/** @type {SnippetFn | null | undefined} */\r\n\t// @ts-ignore\r\n\tvar snippet = noop;\r\n\r\n\t/** @type {Effect | null} */\r\n\tvar snippet_effect;\r\n\r\n\tblock(() => {\r\n\t\tif (snippet === (snippet = get_snippet())) return;\r\n\r\n\t\tif (snippet_effect) {\r\n\t\t\tdestroy_effect(snippet_effect);\r\n\t\t\tsnippet_effect = null;\r\n\t\t}\r\n\r\n\t\tif (DEV && snippet == null) {\r\n\t\t\te.invalid_snippet();\r\n\t\t}\r\n\r\n\t\tsnippet_effect = branch(() => /** @type {SnippetFn} */ (snippet)(anchor, ...args));\r\n\t}, EFFECT_TRANSPARENT);\r\n\r\n\tif (hydrating) {\r\n\t\tanchor = hydrate_node;\r\n\t}\r\n}\r\n\r\n/**\r\n * In development, wrap the snippet function so that it passes validation, and so that the\r\n * correct component context is set for ownership checks\r\n * @param {any} component\r\n * @param {(node: TemplateNode, ...args: any[]) => void} fn\r\n */\r\nexport function wrap_snippet(component, fn) {\r\n\tconst snippet = (/** @type {TemplateNode} */ node, /** @type {any[]} */ ...args) => {\r\n\t\tvar previous_component_function = dev_current_component_function;\r\n\t\tset_dev_current_component_function(component);\r\n\r\n\t\ttry {\r\n\t\t\treturn fn(node, ...args);\r\n\t\t} finally {\r\n\t\t\tset_dev_current_component_function(previous_component_function);\r\n\t\t}\r\n\t};\r\n\r\n\tprevent_snippet_stringification(snippet);\r\n\r\n\treturn snippet;\r\n}\r\n\r\n/**\r\n * Create a snippet programmatically\r\n * @template {unknown[]} Params\r\n * @param {(...params: Getters<Params>) => {\r\n *   render: () => string\r\n *   setup?: (element: Element) => void | (() => void)\r\n * }} fn\r\n * @returns {Snippet<Params>}\r\n */\r\nexport function createRawSnippet(fn) {\r\n\t// @ts-expect-error the types are a lie\r\n\treturn (/** @type {TemplateNode} */ anchor, /** @type {Getters<Params>} */ ...params) => {\r\n\t\tvar snippet = fn(...params);\r\n\r\n\t\t/** @type {Element} */\r\n\t\tvar element;\r\n\r\n\t\tif (hydrating) {\r\n\t\t\telement = /** @type {Element} */ (hydrate_node);\r\n\t\t\thydrate_next();\r\n\t\t} else {\r\n\t\t\tvar html = snippet.render().trim();\r\n\t\t\tvar fragment = create_fragment_from_html(html);\r\n\t\t\telement = /** @type {Element} */ (get_first_child(fragment));\r\n\r\n\t\t\tif (DEV && (get_next_sibling(element) !== null || element.nodeType !== ELEMENT_NODE)) {\r\n\t\t\t\tw.invalid_raw_snippet_render();\r\n\t\t\t}\r\n\r\n\t\t\tanchor.before(element);\r\n\t\t}\r\n\r\n\t\tconst result = snippet.setup?.(element);\r\n\t\tassign_nodes(element, element);\r\n\r\n\t\tif (typeof result === 'function') {\r\n\t\t\tteardown(result);\r\n\t\t}\r\n\t};\r\n}\r\n", "import { escape_html } from '../../escaping.js';\r\nimport { clsx as _clsx } from 'clsx';\r\n\r\n/**\r\n * `<div translate={false}>` should be rendered as `<div translate=\"no\">` and _not_\r\n * `<div translate=\"false\">`, which is equivalent to `<div translate=\"yes\">`. There\r\n * may be other odd cases that need to be added to this list in future\r\n * @type {Record<string, Map<any, string>>}\r\n */\r\nconst replacements = {\r\n\ttranslate: new Map([\r\n\t\t[true, 'yes'],\r\n\t\t[false, 'no']\r\n\t])\r\n};\r\n\r\n/**\r\n * @template V\r\n * @param {string} name\r\n * @param {V} value\r\n * @param {boolean} [is_boolean]\r\n * @returns {string}\r\n */\r\nexport function attr(name, value, is_boolean = false) {\r\n\tif (value == null || (!value && is_boolean)) return '';\r\n\tconst normalized = (name in replacements && replacements[name].get(value)) || value;\r\n\tconst assignment = is_boolean ? '' : `=\"${escape_html(normalized, true)}\"`;\r\n\treturn ` ${name}${assignment}`;\r\n}\r\n\r\n/**\r\n * Small wrapper around clsx to preserve Svelte's (weird) handling of falsy values.\r\n * TODO Svelte 6 revisit this, and likely turn all falsy values into the empty string (what clsx also does)\r\n * @param  {any} value\r\n */\r\nexport function clsx(value) {\r\n\tif (typeof value === 'object') {\r\n\t\treturn _clsx(value);\r\n\t} else {\r\n\t\treturn value ?? '';\r\n\t}\r\n}\r\n\r\nconst whitespace = [...' \\t\\n\\r\\f\\u00a0\\u000b\\ufeff'];\r\n\r\n/**\r\n * @param {any} value\r\n * @param {string | null} [hash]\r\n * @param {Record<string, boolean>} [directives]\r\n * @returns {string | null}\r\n */\r\nexport function to_class(value, hash, directives) {\r\n\tvar classname = value == null ? '' : '' + value;\r\n\r\n\tif (hash) {\r\n\t\tclassname = classname ? classname + ' ' + hash : hash;\r\n\t}\r\n\r\n\tif (directives) {\r\n\t\tfor (var key in directives) {\r\n\t\t\tif (directives[key]) {\r\n\t\t\t\tclassname = classname ? classname + ' ' + key : key;\r\n\t\t\t} else if (classname.length) {\r\n\t\t\t\tvar len = key.length;\r\n\t\t\t\tvar a = 0;\r\n\r\n\t\t\t\twhile ((a = classname.indexOf(key, a)) >= 0) {\r\n\t\t\t\t\tvar b = a + len;\r\n\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\t(a === 0 || whitespace.includes(classname[a - 1])) &&\r\n\t\t\t\t\t\t(b === classname.length || whitespace.includes(classname[b]))\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tclassname = (a === 0 ? '' : classname.substring(0, a)) + classname.substring(b + 1);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\ta = b;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn classname === '' ? null : classname;\r\n}\r\n\r\n/**\r\n *\r\n * @param {Record<string,any>} styles\r\n * @param {boolean} important\r\n */\r\nfunction append_styles(styles, important = false) {\r\n\tvar separator = important ? ' !important;' : ';';\r\n\tvar css = '';\r\n\r\n\tfor (var key in styles) {\r\n\t\tvar value = styles[key];\r\n\t\tif (value != null && value !== '') {\r\n\t\t\tcss += ' ' + key + ': ' + value + separator;\r\n\t\t}\r\n\t}\r\n\r\n\treturn css;\r\n}\r\n\r\n/**\r\n * @param {string} name\r\n * @returns {string}\r\n */\r\nfunction to_css_name(name) {\r\n\tif (name[0] !== '-' || name[1] !== '-') {\r\n\t\treturn name.toLowerCase();\r\n\t}\r\n\treturn name;\r\n}\r\n\r\n/**\r\n * @param {any} value\r\n * @param {Record<string, any> | [Record<string, any>, Record<string, any>]} [styles]\r\n * @returns {string | null}\r\n */\r\nexport function to_style(value, styles) {\r\n\tif (styles) {\r\n\t\tvar new_style = '';\r\n\r\n\t\t/** @type {Record<string,any> | undefined} */\r\n\t\tvar normal_styles;\r\n\r\n\t\t/** @type {Record<string,any> | undefined} */\r\n\t\tvar important_styles;\r\n\r\n\t\tif (Array.isArray(styles)) {\r\n\t\t\tnormal_styles = styles[0];\r\n\t\t\timportant_styles = styles[1];\r\n\t\t} else {\r\n\t\t\tnormal_styles = styles;\r\n\t\t}\r\n\r\n\t\tif (value) {\r\n\t\t\tvalue = String(value)\r\n\t\t\t\t.replaceAll(/\\s*\\/\\*.*?\\*\\/\\s*/g, '')\r\n\t\t\t\t.trim();\r\n\r\n\t\t\t/** @type {boolean | '\"' | \"'\"} */\r\n\t\t\tvar in_str = false;\r\n\t\t\tvar in_apo = 0;\r\n\t\t\tvar in_comment = false;\r\n\r\n\t\t\tvar reserved_names = [];\r\n\r\n\t\t\tif (normal_styles) {\r\n\t\t\t\treserved_names.push(...Object.keys(normal_styles).map(to_css_name));\r\n\t\t\t}\r\n\t\t\tif (important_styles) {\r\n\t\t\t\treserved_names.push(...Object.keys(important_styles).map(to_css_name));\r\n\t\t\t}\r\n\r\n\t\t\tvar start_index = 0;\r\n\t\t\tvar name_index = -1;\r\n\r\n\t\t\tconst len = value.length;\r\n\t\t\tfor (var i = 0; i < len; i++) {\r\n\t\t\t\tvar c = value[i];\r\n\r\n\t\t\t\tif (in_comment) {\r\n\t\t\t\t\tif (c === '/' && value[i - 1] === '*') {\r\n\t\t\t\t\t\tin_comment = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (in_str) {\r\n\t\t\t\t\tif (in_str === c) {\r\n\t\t\t\t\t\tin_str = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (c === '/' && value[i + 1] === '*') {\r\n\t\t\t\t\tin_comment = true;\r\n\t\t\t\t} else if (c === '\"' || c === \"'\") {\r\n\t\t\t\t\tin_str = c;\r\n\t\t\t\t} else if (c === '(') {\r\n\t\t\t\t\tin_apo++;\r\n\t\t\t\t} else if (c === ')') {\r\n\t\t\t\t\tin_apo--;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!in_comment && in_str === false && in_apo === 0) {\r\n\t\t\t\t\tif (c === ':' && name_index === -1) {\r\n\t\t\t\t\t\tname_index = i;\r\n\t\t\t\t\t} else if (c === ';' || i === len - 1) {\r\n\t\t\t\t\t\tif (name_index !== -1) {\r\n\t\t\t\t\t\t\tvar name = to_css_name(value.substring(start_index, name_index).trim());\r\n\r\n\t\t\t\t\t\t\tif (!reserved_names.includes(name)) {\r\n\t\t\t\t\t\t\t\tif (c !== ';') {\r\n\t\t\t\t\t\t\t\t\ti++;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tvar property = value.substring(start_index, i).trim();\r\n\t\t\t\t\t\t\t\tnew_style += ' ' + property + ';';\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tstart_index = i + 1;\r\n\t\t\t\t\t\tname_index = -1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (normal_styles) {\r\n\t\t\tnew_style += append_styles(normal_styles);\r\n\t\t}\r\n\r\n\t\tif (important_styles) {\r\n\t\t\tnew_style += append_styles(important_styles, true);\r\n\t\t}\r\n\r\n\t\tnew_style = new_style.trim();\r\n\t\treturn new_style === '' ? null : new_style;\r\n\t}\r\n\r\n\treturn value == null ? null : String(value);\r\n}\r\n", "/** @import { Effect } from '#client' */\r\nimport { DEV } from 'esm-env';\r\nimport { hydrating, set_hydrating } from '../hydration.js';\r\nimport { get_descriptors, get_prototype_of } from '../../../shared/utils.js';\r\nimport { create_event, delegate } from './events.js';\r\nimport { add_form_reset_listener, autofocus } from './misc.js';\r\nimport * as w from '../../warnings.js';\r\nimport { LOADING_ATTR_SYMBOL } from '#client/constants';\r\nimport { queue_idle_task } from '../task.js';\r\nimport { is_capture_event, is_delegated, normalize_attribute } from '../../../../utils.js';\r\nimport {\r\n\tactive_effect,\r\n\tactive_reaction,\r\n\tget,\r\n\tset_active_effect,\r\n\tset_active_reaction\r\n} from '../../runtime.js';\r\nimport { attach } from './attachments.js';\r\nimport { clsx } from '../../../shared/attributes.js';\r\nimport { set_class } from './class.js';\r\nimport { set_style } from './style.js';\r\nimport { ATTACHMENT_KEY, NAMESPACE_HTML, UNINITIALIZED } from '../../../../constants.js';\r\nimport { block, branch, destroy_effect, effect } from '../../reactivity/effects.js';\r\nimport { init_select, select_option } from './bindings/select.js';\r\nimport { flatten } from '../../reactivity/async.js';\r\n\r\nexport const CLASS = Symbol('class');\r\nexport const STYLE = Symbol('style');\r\n\r\nconst IS_CUSTOM_ELEMENT = Symbol('is custom element');\r\nconst IS_HTML = Symbol('is html');\r\n\r\n/**\r\n * The value/checked attribute in the template actually corresponds to the defaultValue property, so we need\r\n * to remove it upon hydration to avoid a bug when someone resets the form value.\r\n * @param {HTMLInputElement} input\r\n * @returns {void}\r\n */\r\nexport function remove_input_defaults(input) {\r\n\tif (!hydrating) return;\r\n\r\n\tvar already_removed = false;\r\n\r\n\t// We try and remove the default attributes later, rather than sync during hydration.\r\n\t// Doing it sync during hydration has a negative impact on performance, but deferring the\r\n\t// work in an idle task alleviates this greatly. If a form reset event comes in before\r\n\t// the idle callback, then we ensure the input defaults are cleared just before.\r\n\tvar remove_defaults = () => {\r\n\t\tif (already_removed) return;\r\n\t\talready_removed = true;\r\n\r\n\t\t// Remove the attributes but preserve the values\r\n\t\tif (input.hasAttribute('value')) {\r\n\t\t\tvar value = input.value;\r\n\t\t\tset_attribute(input, 'value', null);\r\n\t\t\tinput.value = value;\r\n\t\t}\r\n\r\n\t\tif (input.hasAttribute('checked')) {\r\n\t\t\tvar checked = input.checked;\r\n\t\t\tset_attribute(input, 'checked', null);\r\n\t\t\tinput.checked = checked;\r\n\t\t}\r\n\t};\r\n\r\n\t// @ts-expect-error\r\n\tinput.__on_r = remove_defaults;\r\n\tqueue_idle_task(remove_defaults);\r\n\tadd_form_reset_listener();\r\n}\r\n\r\n/**\r\n * @param {Element} element\r\n * @param {any} value\r\n */\r\nexport function set_value(element, value) {\r\n\tvar attributes = get_attributes(element);\r\n\r\n\tif (\r\n\t\tattributes.value ===\r\n\t\t\t(attributes.value =\r\n\t\t\t\t// treat null and undefined the same for the initial value\r\n\t\t\t\tvalue ?? undefined) ||\r\n\t\t// @ts-expect-error\r\n\t\t// `progress` elements always need their value set when it's `0`\r\n\t\t(element.value === value && (value !== 0 || element.nodeName !== 'PROGRESS'))\r\n\t) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t// @ts-expect-error\r\n\telement.value = value ?? '';\r\n}\r\n\r\n/**\r\n * @param {Element} element\r\n * @param {boolean} checked\r\n */\r\nexport function set_checked(element, checked) {\r\n\tvar attributes = get_attributes(element);\r\n\r\n\tif (\r\n\t\tattributes.checked ===\r\n\t\t(attributes.checked =\r\n\t\t\t// treat null and undefined the same for the initial value\r\n\t\t\tchecked ?? undefined)\r\n\t) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t// @ts-expect-error\r\n\telement.checked = checked;\r\n}\r\n\r\n/**\r\n * Sets the `selected` attribute on an `option` element.\r\n * Not set through the property because that doesn't reflect to the DOM,\r\n * which means it wouldn't be taken into account when a form is reset.\r\n * @param {HTMLOptionElement} element\r\n * @param {boolean} selected\r\n */\r\nexport function set_selected(element, selected) {\r\n\tif (selected) {\r\n\t\t// The selected option could've changed via user selection, and\r\n\t\t// setting the value without this check would set it back.\r\n\t\tif (!element.hasAttribute('selected')) {\r\n\t\t\telement.setAttribute('selected', '');\r\n\t\t}\r\n\t} else {\r\n\t\telement.removeAttribute('selected');\r\n\t}\r\n}\r\n\r\n/**\r\n * Applies the default checked property without influencing the current checked property.\r\n * @param {HTMLInputElement} element\r\n * @param {boolean} checked\r\n */\r\nexport function set_default_checked(element, checked) {\r\n\tconst existing_value = element.checked;\r\n\telement.defaultChecked = checked;\r\n\telement.checked = existing_value;\r\n}\r\n\r\n/**\r\n * Applies the default value property without influencing the current value property.\r\n * @param {HTMLInputElement | HTMLTextAreaElement} element\r\n * @param {string} value\r\n */\r\nexport function set_default_value(element, value) {\r\n\tconst existing_value = element.value;\r\n\telement.defaultValue = value;\r\n\telement.value = existing_value;\r\n}\r\n\r\n/**\r\n * @param {Element} element\r\n * @param {string} attribute\r\n * @param {string | null} value\r\n * @param {boolean} [skip_warning]\r\n */\r\nexport function set_attribute(element, attribute, value, skip_warning) {\r\n\tvar attributes = get_attributes(element);\r\n\r\n\tif (hydrating) {\r\n\t\tattributes[attribute] = element.getAttribute(attribute);\r\n\r\n\t\tif (\r\n\t\t\tattribute === 'src' ||\r\n\t\t\tattribute === 'srcset' ||\r\n\t\t\t(attribute === 'href' && element.nodeName === 'LINK')\r\n\t\t) {\r\n\t\t\tif (!skip_warning) {\r\n\t\t\t\tcheck_src_in_dev_hydration(element, attribute, value ?? '');\r\n\t\t\t}\r\n\r\n\t\t\t// If we reset these attributes, they would result in another network request, which we want to avoid.\r\n\t\t\t// We assume they are the same between client and server as checking if they are equal is expensive\r\n\t\t\t// (we can't just compare the strings as they can be different between client and server but result in the\r\n\t\t\t// same url, so we would need to create hidden anchor elements to compare them)\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\r\n\tif (attributes[attribute] === (attributes[attribute] = value)) return;\r\n\r\n\tif (attribute === 'loading') {\r\n\t\t// @ts-expect-error\r\n\t\telement[LOADING_ATTR_SYMBOL] = value;\r\n\t}\r\n\r\n\tif (value == null) {\r\n\t\telement.removeAttribute(attribute);\r\n\t} else if (typeof value !== 'string' && get_setters(element).includes(attribute)) {\r\n\t\t// @ts-ignore\r\n\t\telement[attribute] = value;\r\n\t} else {\r\n\t\telement.setAttribute(attribute, value);\r\n\t}\r\n}\r\n\r\n/**\r\n * @param {Element} dom\r\n * @param {string} attribute\r\n * @param {string} value\r\n */\r\nexport function set_xlink_attribute(dom, attribute, value) {\r\n\tdom.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} node\r\n * @param {string} prop\r\n * @param {any} value\r\n */\r\nexport function set_custom_element_data(node, prop, value) {\r\n\t// We need to ensure that setting custom element props, which can\r\n\t// invoke lifecycle methods on other custom elements, does not also\r\n\t// associate those lifecycle methods with the current active reaction\r\n\t// or effect\r\n\tvar previous_reaction = active_reaction;\r\n\tvar previous_effect = active_effect;\r\n\r\n\t// If we're hydrating but the custom element is from Svelte, and it already scaffolded,\r\n\t// then it might run block logic in hydration mode, which we have to prevent.\r\n\tlet was_hydrating = hydrating;\r\n\tif (hydrating) {\r\n\t\tset_hydrating(false);\r\n\t}\r\n\r\n\tset_active_reaction(null);\r\n\tset_active_effect(null);\r\n\r\n\ttry {\r\n\t\tif (\r\n\t\t\t// `style` should use `set_attribute` rather than the setter\r\n\t\t\tprop !== 'style' &&\r\n\t\t\t// Don't compute setters for custom elements while they aren't registered yet,\r\n\t\t\t// because during their upgrade/instantiation they might add more setters.\r\n\t\t\t// Instead, fall back to a simple \"an object, then set as property\" heuristic.\r\n\t\t\t(setters_cache.has(node.getAttribute('is') || node.nodeName) ||\r\n\t\t\t// customElements may not be available in browser extension contexts\r\n\t\t\t!customElements ||\r\n\t\t\tcustomElements.get(node.getAttribute('is') || node.tagName.toLowerCase())\r\n\t\t\t\t? get_setters(node).includes(prop)\r\n\t\t\t\t: value && typeof value === 'object')\r\n\t\t) {\r\n\t\t\t// @ts-expect-error\r\n\t\t\tnode[prop] = value;\r\n\t\t} else {\r\n\t\t\t// We did getters etc checks already, stringify before passing to set_attribute\r\n\t\t\t// to ensure it doesn't invoke the same logic again, and potentially populating\r\n\t\t\t// the setters cache too early.\r\n\t\t\tset_attribute(node, prop, value == null ? value : String(value));\r\n\t\t}\r\n\t} finally {\r\n\t\tset_active_reaction(previous_reaction);\r\n\t\tset_active_effect(previous_effect);\r\n\t\tif (was_hydrating) {\r\n\t\t\tset_hydrating(true);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Spreads attributes onto a DOM element, taking into account the currently set attributes\r\n * @param {Element & ElementCSSInlineStyle} element\r\n * @param {Record<string | symbol, any> | undefined} prev\r\n * @param {Record<string | symbol, any>} next New attributes - this function mutates this object\r\n * @param {string} [css_hash]\r\n * @param {boolean} [skip_warning]\r\n * @returns {Record<string, any>}\r\n */\r\nexport function set_attributes(element, prev, next, css_hash, skip_warning = false) {\r\n\tvar attributes = get_attributes(element);\r\n\r\n\tvar is_custom_element = attributes[IS_CUSTOM_ELEMENT];\r\n\tvar preserve_attribute_case = !attributes[IS_HTML];\r\n\r\n\t// If we're hydrating but the custom element is from Svelte, and it already scaffolded,\r\n\t// then it might run block logic in hydration mode, which we have to prevent.\r\n\tlet is_hydrating_custom_element = hydrating && is_custom_element;\r\n\tif (is_hydrating_custom_element) {\r\n\t\tset_hydrating(false);\r\n\t}\r\n\r\n\tvar current = prev || {};\r\n\tvar is_option_element = element.tagName === 'OPTION';\r\n\r\n\tfor (var key in prev) {\r\n\t\tif (!(key in next)) {\r\n\t\t\tnext[key] = null;\r\n\t\t}\r\n\t}\r\n\r\n\tif (next.class) {\r\n\t\tnext.class = clsx(next.class);\r\n\t} else if (css_hash || next[CLASS]) {\r\n\t\tnext.class = null; /* force call to set_class() */\r\n\t}\r\n\r\n\tif (next[STYLE]) {\r\n\t\tnext.style ??= null; /* force call to set_style() */\r\n\t}\r\n\r\n\tvar setters = get_setters(element);\r\n\r\n\t// since key is captured we use const\r\n\tfor (const key in next) {\r\n\t\t// let instead of var because referenced in a closure\r\n\t\tlet value = next[key];\r\n\r\n\t\t// Up here because we want to do this for the initial value, too, even if it's undefined,\r\n\t\t// and this wouldn't be reached in case of undefined because of the equality check below\r\n\t\tif (is_option_element && key === 'value' && value == null) {\r\n\t\t\t// The <option> element is a special case because removing the value attribute means\r\n\t\t\t// the value is set to the text content of the option element, and setting the value\r\n\t\t\t// to null or undefined means the value is set to the string \"null\" or \"undefined\".\r\n\t\t\t// To align with how we handle this case in non-spread-scenarios, this logic is needed.\r\n\t\t\t// There's a super-edge-case bug here that is left in in favor of smaller code size:\r\n\t\t\t// Because of the \"set missing props to null\" logic above, we can't differentiate\r\n\t\t\t// between a missing value and an explicitly set value of null or undefined. That means\r\n\t\t\t// that once set, the value attribute of an <option> element can't be removed. This is\r\n\t\t\t// a very rare edge case, and removing the attribute altogether isn't possible either\r\n\t\t\t// for the <option value={undefined}> case, so we're not losing any functionality here.\r\n\t\t\t// @ts-ignore\r\n\t\t\telement.value = element.__value = '';\r\n\t\t\tcurrent[key] = value;\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\tif (key === 'class') {\r\n\t\t\tvar is_html = element.namespaceURI === 'http://www.w3.org/1999/xhtml';\r\n\t\t\tset_class(element, is_html, value, css_hash, prev?.[CLASS], next[CLASS]);\r\n\t\t\tcurrent[key] = value;\r\n\t\t\tcurrent[CLASS] = next[CLASS];\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\tif (key === 'style') {\r\n\t\t\tset_style(element, value, prev?.[STYLE], next[STYLE]);\r\n\t\t\tcurrent[key] = value;\r\n\t\t\tcurrent[STYLE] = next[STYLE];\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\tvar prev_value = current[key];\r\n\r\n\t\t// Skip if value is unchanged, unless it's `undefined` and the element still has the attribute\r\n\t\tif (value === prev_value && !(value === undefined && element.hasAttribute(key))) {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\tcurrent[key] = value;\r\n\r\n\t\tvar prefix = key[0] + key[1]; // this is faster than key.slice(0, 2)\r\n\t\tif (prefix === '$$') continue;\r\n\r\n\t\tif (prefix === 'on') {\r\n\t\t\t/** @type {{ capture?: true }} */\r\n\t\t\tconst opts = {};\r\n\t\t\tconst event_handle_key = '$$' + key;\r\n\t\t\tlet event_name = key.slice(2);\r\n\t\t\tvar delegated = is_delegated(event_name);\r\n\r\n\t\t\tif (is_capture_event(event_name)) {\r\n\t\t\t\tevent_name = event_name.slice(0, -7);\r\n\t\t\t\topts.capture = true;\r\n\t\t\t}\r\n\r\n\t\t\tif (!delegated && prev_value) {\r\n\t\t\t\t// Listening to same event but different handler -> our handle function below takes care of this\r\n\t\t\t\t// If we were to remove and add listeners in this case, it could happen that the event is \"swallowed\"\r\n\t\t\t\t// (the browser seems to not know yet that a new one exists now) and doesn't reach the handler\r\n\t\t\t\t// https://github.com/sveltejs/svelte/issues/11903\r\n\t\t\t\tif (value != null) continue;\r\n\r\n\t\t\t\telement.removeEventListener(event_name, current[event_handle_key], opts);\r\n\t\t\t\tcurrent[event_handle_key] = null;\r\n\t\t\t}\r\n\r\n\t\t\tif (value != null) {\r\n\t\t\t\tif (!delegated) {\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t * @this {any}\r\n\t\t\t\t\t * @param {Event} evt\r\n\t\t\t\t\t */\r\n\t\t\t\t\tfunction handle(evt) {\r\n\t\t\t\t\t\tcurrent[key].call(this, evt);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcurrent[event_handle_key] = create_event(event_name, element, handle, opts);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\telement[`__${event_name}`] = value;\r\n\t\t\t\t\tdelegate([event_name]);\r\n\t\t\t\t}\r\n\t\t\t} else if (delegated) {\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\telement[`__${event_name}`] = undefined;\r\n\t\t\t}\r\n\t\t} else if (key === 'style') {\r\n\t\t\t// avoid using the setter\r\n\t\t\tset_attribute(element, key, value);\r\n\t\t} else if (key === 'autofocus') {\r\n\t\t\tautofocus(/** @type {HTMLElement} */ (element), Boolean(value));\r\n\t\t} else if (!is_custom_element && (key === '__value' || (key === 'value' && value != null))) {\r\n\t\t\t// @ts-ignore We're not running this for custom elements because __value is actually\r\n\t\t\t// how Lit stores the current value on the element, and messing with that would break things.\r\n\t\t\telement.value = element.__value = value;\r\n\t\t} else if (key === 'selected' && is_option_element) {\r\n\t\t\tset_selected(/** @type {HTMLOptionElement} */ (element), value);\r\n\t\t} else {\r\n\t\t\tvar name = key;\r\n\t\t\tif (!preserve_attribute_case) {\r\n\t\t\t\tname = normalize_attribute(name);\r\n\t\t\t}\r\n\r\n\t\t\tvar is_default = name === 'defaultValue' || name === 'defaultChecked';\r\n\r\n\t\t\tif (value == null && !is_custom_element && !is_default) {\r\n\t\t\t\tattributes[key] = null;\r\n\r\n\t\t\t\tif (name === 'value' || name === 'checked') {\r\n\t\t\t\t\t// removing value/checked also removes defaultValue/defaultChecked — preserve\r\n\t\t\t\t\tlet input = /** @type {HTMLInputElement} */ (element);\r\n\t\t\t\t\tconst use_default = prev === undefined;\r\n\t\t\t\t\tif (name === 'value') {\r\n\t\t\t\t\t\tlet previous = input.defaultValue;\r\n\t\t\t\t\t\tinput.removeAttribute(name);\r\n\t\t\t\t\t\tinput.defaultValue = previous;\r\n\t\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\t\tinput.value = input.__value = use_default ? previous : null;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tlet previous = input.defaultChecked;\r\n\t\t\t\t\t\tinput.removeAttribute(name);\r\n\t\t\t\t\t\tinput.defaultChecked = previous;\r\n\t\t\t\t\t\tinput.checked = use_default ? previous : false;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\telement.removeAttribute(key);\r\n\t\t\t\t}\r\n\t\t\t} else if (\r\n\t\t\t\tis_default ||\r\n\t\t\t\t(setters.includes(name) && (is_custom_element || typeof value !== 'string'))\r\n\t\t\t) {\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\telement[name] = value;\r\n\t\t\t\t// remove it from attributes's cache\r\n\t\t\t\tif (name in attributes) attributes[name] = UNINITIALIZED;\r\n\t\t\t} else if (typeof value !== 'function') {\r\n\t\t\t\tset_attribute(element, name, value, skip_warning);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tif (is_hydrating_custom_element) {\r\n\t\tset_hydrating(true);\r\n\t}\r\n\r\n\treturn current;\r\n}\r\n\r\n/**\r\n * @param {Element & ElementCSSInlineStyle} element\r\n * @param {(...expressions: any) => Record<string | symbol, any>} fn\r\n * @param {Array<() => any>} sync\r\n * @param {Array<() => Promise<any>>} async\r\n * @param {string} [css_hash]\r\n * @param {boolean} [skip_warning]\r\n */\r\nexport function attribute_effect(\r\n\telement,\r\n\tfn,\r\n\tsync = [],\r\n\tasync = [],\r\n\tcss_hash,\r\n\tskip_warning = false\r\n) {\r\n\tflatten(sync, async, (values) => {\r\n\t\t/** @type {Record<string | symbol, any> | undefined} */\r\n\t\tvar prev = undefined;\r\n\r\n\t\t/** @type {Record<symbol, Effect>} */\r\n\t\tvar effects = {};\r\n\r\n\t\tvar is_select = element.nodeName === 'SELECT';\r\n\t\tvar inited = false;\r\n\r\n\t\tblock(() => {\r\n\t\t\tvar next = fn(...values.map(get));\r\n\t\t\t/** @type {Record<string | symbol, any>} */\r\n\t\t\tvar current = set_attributes(element, prev, next, css_hash, skip_warning);\r\n\r\n\t\t\tif (inited && is_select && 'value' in next) {\r\n\t\t\t\tselect_option(/** @type {HTMLSelectElement} */ (element), next.value);\r\n\t\t\t}\r\n\r\n\t\t\tfor (let symbol of Object.getOwnPropertySymbols(effects)) {\r\n\t\t\t\tif (!next[symbol]) destroy_effect(effects[symbol]);\r\n\t\t\t}\r\n\r\n\t\t\tfor (let symbol of Object.getOwnPropertySymbols(next)) {\r\n\t\t\t\tvar n = next[symbol];\r\n\r\n\t\t\t\tif (symbol.description === ATTACHMENT_KEY && (!prev || n !== prev[symbol])) {\r\n\t\t\t\t\tif (effects[symbol]) destroy_effect(effects[symbol]);\r\n\t\t\t\t\teffects[symbol] = branch(() => attach(element, () => n));\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcurrent[symbol] = n;\r\n\t\t\t}\r\n\r\n\t\t\tprev = current;\r\n\t\t});\r\n\r\n\t\tif (is_select) {\r\n\t\t\tvar select = /** @type {HTMLSelectElement} */ (element);\r\n\r\n\t\t\teffect(() => {\r\n\t\t\t\tselect_option(select, /** @type {Record<string | symbol, any>} */ (prev).value, true);\r\n\t\t\t\tinit_select(select);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tinited = true;\r\n\t});\r\n}\r\n\r\n/**\r\n *\r\n * @param {Element} element\r\n */\r\nfunction get_attributes(element) {\r\n\treturn /** @type {Record<string | symbol, unknown>} **/ (\r\n\t\t// @ts-expect-error\r\n\t\telement.__attributes ??= {\r\n\t\t\t[IS_CUSTOM_ELEMENT]: element.nodeName.includes('-'),\r\n\t\t\t[IS_HTML]: element.namespaceURI === NAMESPACE_HTML\r\n\t\t}\r\n\t);\r\n}\r\n\r\n/** @type {Map<string, string[]>} */\r\nvar setters_cache = new Map();\r\n\r\n/** @param {Element} element */\r\nfunction get_setters(element) {\r\n\tvar cache_key = element.getAttribute('is') || element.nodeName;\r\n\tvar setters = setters_cache.get(cache_key);\r\n\tif (setters) return setters;\r\n\tsetters_cache.set(cache_key, (setters = []));\r\n\r\n\tvar descriptors;\r\n\tvar proto = element; // In the case of custom elements there might be setters on the instance\r\n\tvar element_proto = Element.prototype;\r\n\r\n\t// Stop at Element, from there on there's only unnecessary setters we're not interested in\r\n\t// Do not use contructor.name here as that's unreliable in some browser environments\r\n\twhile (element_proto !== proto) {\r\n\t\tdescriptors = get_descriptors(proto);\r\n\r\n\t\tfor (var key in descriptors) {\r\n\t\t\tif (descriptors[key].set) {\r\n\t\t\t\tsetters.push(key);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tproto = get_prototype_of(proto);\r\n\t}\r\n\r\n\treturn setters;\r\n}\r\n\r\n/**\r\n * @param {any} element\r\n * @param {string} attribute\r\n * @param {string} value\r\n */\r\nfunction check_src_in_dev_hydration(element, attribute, value) {\r\n\tif (!DEV) return;\r\n\tif (attribute === 'srcset' && srcset_url_equal(element, value)) return;\r\n\tif (src_url_equal(element.getAttribute(attribute) ?? '', value)) return;\r\n\r\n\tw.hydration_attribute_changed(\r\n\t\tattribute,\r\n\t\telement.outerHTML.replace(element.innerHTML, element.innerHTML && '...'),\r\n\t\tString(value)\r\n\t);\r\n}\r\n\r\n/**\r\n * @param {string} element_src\r\n * @param {string} url\r\n * @returns {boolean}\r\n */\r\nfunction src_url_equal(element_src, url) {\r\n\tif (element_src === url) return true;\r\n\treturn new URL(element_src, document.baseURI).href === new URL(url, document.baseURI).href;\r\n}\r\n\r\n/** @param {string} srcset */\r\nfunction split_srcset(srcset) {\r\n\treturn srcset.split(',').map((src) => src.trim().split(' ').filter(Boolean));\r\n}\r\n\r\n/**\r\n * @param {HTMLSourceElement | HTMLImageElement} element\r\n * @param {string} srcset\r\n * @returns {boolean}\r\n */\r\nfunction srcset_url_equal(element, srcset) {\r\n\tvar element_urls = split_srcset(element.srcset);\r\n\tvar urls = split_srcset(srcset);\r\n\r\n\treturn (\r\n\t\turls.length === element_urls.length &&\r\n\t\turls.every(\r\n\t\t\t([url, width], i) =>\r\n\t\t\t\twidth === element_urls[i][1] &&\r\n\t\t\t\t// We need to test both ways because Vite will create an a full URL with\r\n\t\t\t\t// `new URL(asset, import.meta.url).href` for the client when `base: './'`, and the\r\n\t\t\t\t// relative URLs inside srcset are not automatically resolved to absolute URLs by\r\n\t\t\t\t// browsers (in contrast to img.src). This means both SSR and DOM code could\r\n\t\t\t\t// contain relative or absolute URLs.\r\n\t\t\t\t(src_url_equal(element_urls[i][0], url) || src_url_equal(url, element_urls[i][0]))\r\n\t\t)\r\n\t);\r\n}\r\n", "import { effect, teardown } from '../../../reactivity/effects.js';\r\nimport { untrack } from '../../../runtime.js';\r\n\r\n/**\r\n * Resize observer singleton.\r\n * One listener per element only!\r\n * https://groups.google.com/a/chromium.org/g/blink-dev/c/z6ienONUb5A/m/F5-VcUZtBAAJ\r\n */\r\nclass ResizeObserverSingleton {\r\n\t/** */\r\n\t#listeners = new WeakMap();\r\n\r\n\t/** @type {ResizeObserver | undefined} */\r\n\t#observer;\r\n\r\n\t/** @type {ResizeObserverOptions} */\r\n\t#options;\r\n\r\n\t/** @static */\r\n\tstatic entries = new WeakMap();\r\n\r\n\t/** @param {ResizeObserverOptions} options */\r\n\tconstructor(options) {\r\n\t\tthis.#options = options;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {Element} element\r\n\t * @param {(entry: ResizeObserverEntry) => any} listener\r\n\t */\r\n\tobserve(element, listener) {\r\n\t\tvar listeners = this.#listeners.get(element) || new Set();\r\n\t\tlisteners.add(listener);\r\n\r\n\t\tthis.#listeners.set(element, listeners);\r\n\t\tthis.#getObserver().observe(element, this.#options);\r\n\r\n\t\treturn () => {\r\n\t\t\tvar listeners = this.#listeners.get(element);\r\n\t\t\tlisteners.delete(listener);\r\n\r\n\t\t\tif (listeners.size === 0) {\r\n\t\t\t\tthis.#listeners.delete(element);\r\n\t\t\t\t/** @type {ResizeObserver} */ (this.#observer).unobserve(element);\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\t#getObserver() {\r\n\t\treturn (\r\n\t\t\tthis.#observer ??\r\n\t\t\t(this.#observer = new ResizeObserver(\r\n\t\t\t\t/** @param {any} entries */ (entries) => {\r\n\t\t\t\t\tfor (var entry of entries) {\r\n\t\t\t\t\t\tResizeObserverSingleton.entries.set(entry.target, entry);\r\n\t\t\t\t\t\tfor (var listener of this.#listeners.get(entry.target) || []) {\r\n\t\t\t\t\t\t\tlistener(entry);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t))\r\n\t\t);\r\n\t}\r\n}\r\n\r\nvar resize_observer_content_box = /* @__PURE__ */ new ResizeObserverSingleton({\r\n\tbox: 'content-box'\r\n});\r\n\r\nvar resize_observer_border_box = /* @__PURE__ */ new ResizeObserverSingleton({\r\n\tbox: 'border-box'\r\n});\r\n\r\nvar resize_observer_device_pixel_content_box = /* @__PURE__ */ new ResizeObserverSingleton({\r\n\tbox: 'device-pixel-content-box'\r\n});\r\n\r\n/**\r\n * @param {Element} element\r\n * @param {'contentRect' | 'contentBoxSize' | 'borderBoxSize' | 'devicePixelContentBoxSize'} type\r\n * @param {(entry: keyof ResizeObserverEntry) => void} set\r\n */\r\nexport function bind_resize_observer(element, type, set) {\r\n\tvar observer =\r\n\t\ttype === 'contentRect' || type === 'contentBoxSize'\r\n\t\t\t? resize_observer_content_box\r\n\t\t\t: type === 'borderBoxSize'\r\n\t\t\t\t? resize_observer_border_box\r\n\t\t\t\t: resize_observer_device_pixel_content_box;\r\n\r\n\tvar unsub = observer.observe(element, /** @param {any} entry */ (entry) => set(entry[type]));\r\n\tteardown(unsub);\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} element\r\n * @param {'clientWidth' | 'clientHeight' | 'offsetWidth' | 'offsetHeight'} type\r\n * @param {(size: number) => void} set\r\n */\r\nexport function bind_element_size(element, type, set) {\r\n\tvar unsub = resize_observer_border_box.observe(element, () => set(element[type]));\r\n\r\n\teffect(() => {\r\n\t\t// The update could contain reads which should be ignored\r\n\t\tuntrack(() => set(element[type]));\r\n\t\treturn unsub;\r\n\t});\r\n}\r\n", "/** @import { Readable } from './public' */\r\nimport { untrack } from '../index-client.js';\r\nimport { noop } from '../internal/shared/utils.js';\r\n\r\n/**\r\n * @template T\r\n * @param {Readable<T> | null | undefined} store\r\n * @param {(value: T) => void} run\r\n * @param {(value: T) => void} [invalidate]\r\n * @returns {() => void}\r\n */\r\nexport function subscribe_to_store(store, run, invalidate) {\r\n\tif (store == null) {\r\n\t\t// @ts-expect-error\r\n\t\trun(undefined);\r\n\r\n\t\t// @ts-expect-error\r\n\t\tif (invalidate) invalidate(undefined);\r\n\r\n\t\treturn noop;\r\n\t}\r\n\r\n\t// Svelte store takes a private second argument\r\n\t// StartStopNotifier could mutate state, and we want to silence the corresponding validation error\r\n\tconst unsub = untrack(() =>\r\n\t\tstore.subscribe(\r\n\t\t\trun,\r\n\t\t\t// @ts-expect-error\r\n\t\t\tinvalidate\r\n\t\t)\r\n\t);\r\n\r\n\t// Also support RxJS\r\n\t// @ts-expect-error TODO fix this in the types?\r\n\treturn unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\r\n}\r\n", "/** @import { Readable, StartStopNotifier, Subscriber, Unsubscriber, Updater, Writable } from '../public.js' */\r\n/** @import { Stores, StoresValues, SubscribeInvalidateTuple } from '../private.js' */\r\nimport { noop, run_all } from '../../internal/shared/utils.js';\r\nimport { safe_not_equal } from '../../internal/client/reactivity/equality.js';\r\nimport { subscribe_to_store } from '../utils.js';\r\n\r\n/**\r\n * @type {Array<SubscribeInvalidateTuple<any> | any>}\r\n */\r\nconst subscriber_queue = [];\r\n\r\n/**\r\n * Creates a `Readable` store that allows reading by subscription.\r\n *\r\n * @template T\r\n * @param {T} [value] initial value\r\n * @param {StartStopNotifier<T>} [start]\r\n * @returns {Readable<T>}\r\n */\r\nexport function readable(value, start) {\r\n\treturn {\r\n\t\tsubscribe: writable(value, start).subscribe\r\n\t};\r\n}\r\n\r\n/**\r\n * Create a `Writable` store that allows both updating and reading by subscription.\r\n *\r\n * @template T\r\n * @param {T} [value] initial value\r\n * @param {StartStopNotifier<T>} [start]\r\n * @returns {Writable<T>}\r\n */\r\nexport function writable(value, start = noop) {\r\n\t/** @type {Unsubscriber | null} */\r\n\tlet stop = null;\r\n\r\n\t/** @type {Set<SubscribeInvalidateTuple<T>>} */\r\n\tconst subscribers = new Set();\r\n\r\n\t/**\r\n\t * @param {T} new_value\r\n\t * @returns {void}\r\n\t */\r\n\tfunction set(new_value) {\r\n\t\tif (safe_not_equal(value, new_value)) {\r\n\t\t\tvalue = new_value;\r\n\t\t\tif (stop) {\r\n\t\t\t\t// store is ready\r\n\t\t\t\tconst run_queue = !subscriber_queue.length;\r\n\t\t\t\tfor (const subscriber of subscribers) {\r\n\t\t\t\t\tsubscriber[1]();\r\n\t\t\t\t\tsubscriber_queue.push(subscriber, value);\r\n\t\t\t\t}\r\n\t\t\t\tif (run_queue) {\r\n\t\t\t\t\tfor (let i = 0; i < subscriber_queue.length; i += 2) {\r\n\t\t\t\t\t\tsubscriber_queue[i][0](subscriber_queue[i + 1]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsubscriber_queue.length = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {Updater<T>} fn\r\n\t * @returns {void}\r\n\t */\r\n\tfunction update(fn) {\r\n\t\tset(fn(/** @type {T} */ (value)));\r\n\t}\r\n\r\n\t/**\r\n\t * @param {Subscriber<T>} run\r\n\t * @param {() => void} [invalidate]\r\n\t * @returns {Unsubscriber}\r\n\t */\r\n\tfunction subscribe(run, invalidate = noop) {\r\n\t\t/** @type {SubscribeInvalidateTuple<T>} */\r\n\t\tconst subscriber = [run, invalidate];\r\n\t\tsubscribers.add(subscriber);\r\n\t\tif (subscribers.size === 1) {\r\n\t\t\tstop = start(set, update) || noop;\r\n\t\t}\r\n\t\trun(/** @type {T} */ (value));\r\n\t\treturn () => {\r\n\t\t\tsubscribers.delete(subscriber);\r\n\t\t\tif (subscribers.size === 0 && stop) {\r\n\t\t\t\tstop();\r\n\t\t\t\tstop = null;\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\treturn { set, update, subscribe };\r\n}\r\n\r\n/**\r\n * Derived value store by synchronizing one or more readable stores and\r\n * applying an aggregation function over its input values.\r\n *\r\n * @template {Stores} S\r\n * @template T\r\n * @overload\r\n * @param {S} stores\r\n * @param {(values: StoresValues<S>, set: (value: T) => void, update: (fn: Updater<T>) => void) => Unsubscriber | void} fn\r\n * @param {T} [initial_value]\r\n * @returns {Readable<T>}\r\n */\r\n/**\r\n * Derived value store by synchronizing one or more readable stores and\r\n * applying an aggregation function over its input values.\r\n *\r\n * @template {Stores} S\r\n * @template T\r\n * @overload\r\n * @param {S} stores\r\n * @param {(values: StoresValues<S>) => T} fn\r\n * @param {T} [initial_value]\r\n * @returns {Readable<T>}\r\n */\r\n/**\r\n * @template {Stores} S\r\n * @template T\r\n * @param {S} stores\r\n * @param {Function} fn\r\n * @param {T} [initial_value]\r\n * @returns {Readable<T>}\r\n */\r\nexport function derived(stores, fn, initial_value) {\r\n\tconst single = !Array.isArray(stores);\r\n\t/** @type {Array<Readable<any>>} */\r\n\tconst stores_array = single ? [stores] : stores;\r\n\tif (!stores_array.every(Boolean)) {\r\n\t\tthrow new Error('derived() expects stores as input, got a falsy value');\r\n\t}\r\n\tconst auto = fn.length < 2;\r\n\treturn readable(initial_value, (set, update) => {\r\n\t\tlet started = false;\r\n\t\t/** @type {T[]} */\r\n\t\tconst values = [];\r\n\t\tlet pending = 0;\r\n\t\tlet cleanup = noop;\r\n\t\tconst sync = () => {\r\n\t\t\tif (pending) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tcleanup();\r\n\t\t\tconst result = fn(single ? values[0] : values, set, update);\r\n\t\t\tif (auto) {\r\n\t\t\t\tset(result);\r\n\t\t\t} else {\r\n\t\t\t\tcleanup = typeof result === 'function' ? result : noop;\r\n\t\t\t}\r\n\t\t};\r\n\t\tconst unsubscribers = stores_array.map((store, i) =>\r\n\t\t\tsubscribe_to_store(\r\n\t\t\t\tstore,\r\n\t\t\t\t(value) => {\r\n\t\t\t\t\tvalues[i] = value;\r\n\t\t\t\t\tpending &= ~(1 << i);\r\n\t\t\t\t\tif (started) {\r\n\t\t\t\t\t\tsync();\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t() => {\r\n\t\t\t\t\tpending |= 1 << i;\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t);\r\n\t\tstarted = true;\r\n\t\tsync();\r\n\t\treturn function stop() {\r\n\t\t\trun_all(unsubscribers);\r\n\t\t\tcleanup();\r\n\t\t\t// We need to set this to false because callbacks can still happen despite having unsubscribed:\r\n\t\t\t// Callbacks might already be placed in the queue which doesn't know it should no longer\r\n\t\t\t// invoke this derived store.\r\n\t\t\tstarted = false;\r\n\t\t};\r\n\t});\r\n}\r\n\r\n/**\r\n * Takes a store and returns a new one derived from the old one that is readable.\r\n *\r\n * @template T\r\n * @param {Readable<T>} store  - store to make readonly\r\n * @returns {Readable<T>}\r\n */\r\nexport function readonly(store) {\r\n\treturn {\r\n\t\t// @ts-expect-error TODO i suspect the bind is unnecessary\r\n\t\tsubscribe: store.subscribe.bind(store)\r\n\t};\r\n}\r\n\r\n/**\r\n * Get the current value from a store by subscribing and immediately unsubscribing.\r\n *\r\n * @template T\r\n * @param {Readable<T>} store\r\n * @returns {T}\r\n */\r\nexport function get(store) {\r\n\tlet value;\r\n\tsubscribe_to_store(store, (_) => (value = _))();\r\n\t// @ts-expect-error\r\n\treturn value;\r\n}\r\n", "/** @import { StoreReferencesContainer } from '#client' */\r\n/** @import { Store } from '#shared' */\r\nimport { subscribe_to_store } from '../../../store/utils.js';\r\nimport { get as get_store } from '../../../store/shared/index.js';\r\nimport { define_property, noop } from '../../shared/utils.js';\r\nimport { get } from '../runtime.js';\r\nimport { teardown } from './effects.js';\r\nimport { mutable_source, set } from './sources.js';\r\nimport { DEV } from 'esm-env';\r\n\r\n/**\r\n * Whether or not the prop currently being read is a store binding, as in\r\n * `<Child bind:x={$y} />`. If it is, we treat the prop as mutable even in\r\n * runes mode, and skip `binding_property_non_reactive` validation\r\n */\r\nlet is_store_binding = false;\r\n\r\nlet IS_UNMOUNTED = Symbol();\r\n\r\n/**\r\n * Gets the current value of a store. If the store isn't subscribed to yet, it will create a proxy\r\n * signal that will be updated when the store is. The store references container is needed to\r\n * track reassignments to stores and to track the correct component context.\r\n * @template V\r\n * @param {Store<V> | null | undefined} store\r\n * @param {string} store_name\r\n * @param {StoreReferencesContainer} stores\r\n * @returns {V}\r\n */\r\nexport function store_get(store, store_name, stores) {\r\n\tconst entry = (stores[store_name] ??= {\r\n\t\tstore: null,\r\n\t\tsource: mutable_source(undefined),\r\n\t\tunsubscribe: noop\r\n\t});\r\n\r\n\tif (DEV) {\r\n\t\tentry.source.label = store_name;\r\n\t}\r\n\r\n\t// if the component that setup this is already unmounted we don't want to register a subscription\r\n\tif (entry.store !== store && !(IS_UNMOUNTED in stores)) {\r\n\t\tentry.unsubscribe();\r\n\t\tentry.store = store ?? null;\r\n\r\n\t\tif (store == null) {\r\n\t\t\tentry.source.v = undefined; // see synchronous callback comment below\r\n\t\t\tentry.unsubscribe = noop;\r\n\t\t} else {\r\n\t\t\tvar is_synchronous_callback = true;\r\n\r\n\t\t\tentry.unsubscribe = subscribe_to_store(store, (v) => {\r\n\t\t\t\tif (is_synchronous_callback) {\r\n\t\t\t\t\t// If the first updates to the store value (possibly multiple of them) are synchronously\r\n\t\t\t\t\t// inside a derived, we will hit the `state_unsafe_mutation` error if we `set` the value\r\n\t\t\t\t\tentry.source.v = v;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tset(entry.source, v);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tis_synchronous_callback = false;\r\n\t\t}\r\n\t}\r\n\r\n\t// if the component that setup this stores is already unmounted the source will be out of sync\r\n\t// so we just use the `get` for the stores, less performant but it avoids to create a memory leak\r\n\t// and it will keep the value consistent\r\n\tif (store && IS_UNMOUNTED in stores) {\r\n\t\treturn get_store(store);\r\n\t}\r\n\r\n\treturn get(entry.source);\r\n}\r\n\r\n/**\r\n * Unsubscribe from a store if it's not the same as the one in the store references container.\r\n * We need this in addition to `store_get` because someone could unsubscribe from a store but\r\n * then never subscribe to the new one (if any), causing the subscription to stay open wrongfully.\r\n * @param {Store<any> | null | undefined} store\r\n * @param {string} store_name\r\n * @param {StoreReferencesContainer} stores\r\n */\r\nexport function store_unsub(store, store_name, stores) {\r\n\t/** @type {StoreReferencesContainer[''] | undefined} */\r\n\tlet entry = stores[store_name];\r\n\r\n\tif (entry && entry.store !== store) {\r\n\t\t// Don't reset store yet, so that store_get above can resubscribe to new store if necessary\r\n\t\tentry.unsubscribe();\r\n\t\tentry.unsubscribe = noop;\r\n\t}\r\n\r\n\treturn store;\r\n}\r\n\r\n/**\r\n * Sets the new value of a store and returns that value.\r\n * @template V\r\n * @param {Store<V>} store\r\n * @param {V} value\r\n * @returns {V}\r\n */\r\nexport function store_set(store, value) {\r\n\tstore.set(value);\r\n\treturn value;\r\n}\r\n\r\n/**\r\n * @param {StoreReferencesContainer} stores\r\n * @param {string} store_name\r\n */\r\nexport function invalidate_store(stores, store_name) {\r\n\tvar entry = stores[store_name];\r\n\tif (entry.store !== null) {\r\n\t\tstore_set(entry.store, entry.source.v);\r\n\t}\r\n}\r\n\r\n/**\r\n * Unsubscribes from all auto-subscribed stores on destroy\r\n * @returns {[StoreReferencesContainer, ()=>void]}\r\n */\r\nexport function setup_stores() {\r\n\t/** @type {StoreReferencesContainer} */\r\n\tconst stores = {};\r\n\r\n\tfunction cleanup() {\r\n\t\tteardown(() => {\r\n\t\t\tfor (var store_name in stores) {\r\n\t\t\t\tconst ref = stores[store_name];\r\n\t\t\t\tref.unsubscribe();\r\n\t\t\t}\r\n\t\t\tdefine_property(stores, IS_UNMOUNTED, {\r\n\t\t\t\tenumerable: false,\r\n\t\t\t\tvalue: true\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\treturn [stores, cleanup];\r\n}\r\n\r\n/**\r\n * Updates a store with a new value.\r\n * @param {Store<V>} store  the store to update\r\n * @param {any} expression  the expression that mutates the store\r\n * @param {V} new_value  the new store value\r\n * @template V\r\n */\r\nexport function store_mutate(store, expression, new_value) {\r\n\tstore.set(new_value);\r\n\treturn expression;\r\n}\r\n\r\n/**\r\n * @param {Store<number>} store\r\n * @param {number} store_value\r\n * @param {1 | -1} [d]\r\n * @returns {number}\r\n */\r\nexport function update_store(store, store_value, d = 1) {\r\n\tstore.set(store_value + d);\r\n\treturn store_value;\r\n}\r\n\r\n/**\r\n * @param {Store<number>} store\r\n * @param {number} store_value\r\n * @param {1 | -1} [d]\r\n * @returns {number}\r\n */\r\nexport function update_pre_store(store, store_value, d = 1) {\r\n\tconst value = store_value + d;\r\n\tstore.set(value);\r\n\treturn value;\r\n}\r\n\r\n/**\r\n * Called inside prop getters to communicate that the prop is a store binding\r\n */\r\nexport function mark_store_binding() {\r\n\tis_store_binding = true;\r\n}\r\n\r\n/**\r\n * Returns a tuple that indicates whether `fn()` reads a prop that is a store binding.\r\n * Used to prevent `binding_property_non_reactive` validation false positives and\r\n * ensure that these props are treated as mutable even in runes mode\r\n * @template T\r\n * @param {() => T} fn\r\n * @returns {[T, boolean]}\r\n */\r\nexport function capture_store_binding(fn) {\r\n\tvar previous_is_store_binding = is_store_binding;\r\n\r\n\ttry {\r\n\t\tis_store_binding = false;\r\n\t\treturn [fn(), is_store_binding];\r\n\t} finally {\r\n\t\tis_store_binding = previous_is_store_binding;\r\n\t}\r\n}\r\n", "/** @import { ComponentConstructorOptions, ComponentType, SvelteComponent, Component } from 'svelte' */\r\nimport { DIRTY, LEGACY_PROPS, MAYBE_DIRTY } from '../internal/client/constants.js';\r\nimport { user_pre_effect } from '../internal/client/reactivity/effects.js';\r\nimport { mutable_source, set } from '../internal/client/reactivity/sources.js';\r\nimport { hydrate, mount, unmount } from '../internal/client/render.js';\r\nimport { active_effect, get, set_signal_status } from '../internal/client/runtime.js';\r\nimport { flushSync } from '../internal/client/reactivity/batch.js';\r\nimport { define_property, is_array } from '../internal/shared/utils.js';\r\nimport * as e from '../internal/client/errors.js';\r\nimport * as w from '../internal/client/warnings.js';\r\nimport { DEV } from 'esm-env';\r\nimport { FILENAME } from '../constants.js';\r\nimport { component_context, dev_current_component_function } from '../internal/client/context.js';\r\nimport { async_mode_flag } from '../internal/flags/index.js';\r\n\r\n/**\r\n * Takes the same options as a Svelte 4 component and the component function and returns a Svelte 4 compatible component.\r\n *\r\n * @deprecated Use this only as a temporary solution to migrate your imperative component code to Svelte 5.\r\n *\r\n * @template {Record<string, any>} Props\r\n * @template {Record<string, any>} Exports\r\n * @template {Record<string, any>} Events\r\n * @template {Record<string, any>} Slots\r\n *\r\n * @param {ComponentConstructorOptions<Props> & {\r\n * \tcomponent: ComponentType<SvelteComponent<Props, Events, Slots>> | Component<Props>;\r\n * }} options\r\n * @returns {SvelteComponent<Props, Events, Slots> & Exports}\r\n */\r\nexport function createClassComponent(options) {\r\n\t// @ts-expect-error $$prop_def etc are not actually defined\r\n\treturn new Svelte4Component(options);\r\n}\r\n\r\n/**\r\n * Takes the component function and returns a Svelte 4 compatible component constructor.\r\n *\r\n * @deprecated Use this only as a temporary solution to migrate your imperative component code to Svelte 5.\r\n *\r\n * @template {Record<string, any>} Props\r\n * @template {Record<string, any>} Exports\r\n * @template {Record<string, any>} Events\r\n * @template {Record<string, any>} Slots\r\n *\r\n * @param {SvelteComponent<Props, Events, Slots> | Component<Props>} component\r\n * @returns {ComponentType<SvelteComponent<Props, Events, Slots> & Exports>}\r\n */\r\nexport function asClassComponent(component) {\r\n\t// @ts-expect-error $$prop_def etc are not actually defined\r\n\treturn class extends Svelte4Component {\r\n\t\t/** @param {any} options */\r\n\t\tconstructor(options) {\r\n\t\t\tsuper({\r\n\t\t\t\tcomponent,\r\n\t\t\t\t...options\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n}\r\n\r\n/**\r\n * Support using the component as both a class and function during the transition period\r\n * @typedef  {{new (o: ComponentConstructorOptions): SvelteComponent;(...args: Parameters<Component<Record<string, any>>>): ReturnType<Component<Record<string, any>, Record<string, any>>>;}} LegacyComponentType\r\n */\r\n\r\nclass Svelte4Component {\r\n\t/** @type {any} */\r\n\t#events;\r\n\r\n\t/** @type {Record<string, any>} */\r\n\t#instance;\r\n\r\n\t/**\r\n\t * @param {ComponentConstructorOptions & {\r\n\t *  component: any;\r\n\t * }} options\r\n\t */\r\n\tconstructor(options) {\r\n\t\tvar sources = new Map();\r\n\r\n\t\t/**\r\n\t\t * @param {string | symbol} key\r\n\t\t * @param {unknown} value\r\n\t\t */\r\n\t\tvar add_source = (key, value) => {\r\n\t\t\tvar s = mutable_source(value, false, false);\r\n\t\t\tsources.set(key, s);\r\n\t\t\treturn s;\r\n\t\t};\r\n\r\n\t\t// Replicate coarse-grained props through a proxy that has a version source for\r\n\t\t// each property, which is incremented on updates to the property itself. Do not\r\n\t\t// use our $state proxy because that one has fine-grained reactivity.\r\n\t\tconst props = new Proxy(\r\n\t\t\t{ ...(options.props || {}), $$events: {} },\r\n\t\t\t{\r\n\t\t\t\tget(target, prop) {\r\n\t\t\t\t\treturn get(sources.get(prop) ?? add_source(prop, Reflect.get(target, prop)));\r\n\t\t\t\t},\r\n\t\t\t\thas(target, prop) {\r\n\t\t\t\t\t// Necessary to not throw \"invalid binding\" validation errors on the component side\r\n\t\t\t\t\tif (prop === LEGACY_PROPS) return true;\r\n\r\n\t\t\t\t\tget(sources.get(prop) ?? add_source(prop, Reflect.get(target, prop)));\r\n\t\t\t\t\treturn Reflect.has(target, prop);\r\n\t\t\t\t},\r\n\t\t\t\tset(target, prop, value) {\r\n\t\t\t\t\tset(sources.get(prop) ?? add_source(prop, value), value);\r\n\t\t\t\t\treturn Reflect.set(target, prop, value);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tthis.#instance = (options.hydrate ? hydrate : mount)(options.component, {\r\n\t\t\ttarget: options.target,\r\n\t\t\tanchor: options.anchor,\r\n\t\t\tprops,\r\n\t\t\tcontext: options.context,\r\n\t\t\tintro: options.intro ?? false,\r\n\t\t\trecover: options.recover\r\n\t\t});\r\n\r\n\t\t// We don't flushSync for custom element wrappers or if the user doesn't want it,\r\n\t\t// or if we're in async mode since `flushSync()` will fail\r\n\t\tif (!async_mode_flag && (!options?.props?.$$host || options.sync === false)) {\r\n\t\t\tflushSync();\r\n\t\t}\r\n\r\n\t\tthis.#events = props.$$events;\r\n\r\n\t\tfor (const key of Object.keys(this.#instance)) {\r\n\t\t\tif (key === '$set' || key === '$destroy' || key === '$on') continue;\r\n\t\t\tdefine_property(this, key, {\r\n\t\t\t\tget() {\r\n\t\t\t\t\treturn this.#instance[key];\r\n\t\t\t\t},\r\n\t\t\t\t/** @param {any} value */\r\n\t\t\t\tset(value) {\r\n\t\t\t\t\tthis.#instance[key] = value;\r\n\t\t\t\t},\r\n\t\t\t\tenumerable: true\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tthis.#instance.$set = /** @param {Record<string, any>} next */ (next) => {\r\n\t\t\tObject.assign(props, next);\r\n\t\t};\r\n\r\n\t\tthis.#instance.$destroy = () => {\r\n\t\t\tunmount(this.#instance);\r\n\t\t};\r\n\t}\r\n\r\n\t/** @param {Record<string, any>} props */\r\n\t$set(props) {\r\n\t\tthis.#instance.$set(props);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} event\r\n\t * @param {(...args: any[]) => any} callback\r\n\t * @returns {any}\r\n\t */\r\n\t$on(event, callback) {\r\n\t\tthis.#events[event] = this.#events[event] || [];\r\n\r\n\t\t/** @param {any[]} args */\r\n\t\tconst cb = (...args) => callback.call(this, ...args);\r\n\t\tthis.#events[event].push(cb);\r\n\t\treturn () => {\r\n\t\t\tthis.#events[event] = this.#events[event].filter(/** @param {any} fn */ (fn) => fn !== cb);\r\n\t\t};\r\n\t}\r\n\r\n\t$destroy() {\r\n\t\tthis.#instance.$destroy();\r\n\t}\r\n}\r\n\r\n/**\r\n * Runs the given function once immediately on the server, and works like `$effect.pre` on the client.\r\n *\r\n * @deprecated Use this only as a temporary solution to migrate your component code to Svelte 5.\r\n * @param {() => void | (() => void)} fn\r\n * @returns {void}\r\n */\r\nexport function run(fn) {\r\n\tuser_pre_effect(() => {\r\n\t\tfn();\r\n\t\tvar effect = /** @type {import('#client').Effect} */ (active_effect);\r\n\t\t// If the effect is immediately made dirty again, mark it as maybe dirty to emulate legacy behaviour\r\n\t\tif ((effect.f & DIRTY) !== 0) {\r\n\t\t\tlet filename = \"a file (we can't know which one)\";\r\n\t\t\tif (DEV) {\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\tfilename = dev_current_component_function?.[FILENAME] ?? filename;\r\n\t\t\t}\r\n\t\t\tw.legacy_recursive_reactive_block(filename);\r\n\t\t\tset_signal_status(effect, MAYBE_DIRTY);\r\n\t\t}\r\n\t});\r\n}\r\n\r\n/**\r\n * Function to mimic the multiple listeners available in svelte 4\r\n * @deprecated\r\n * @param {EventListener[]} handlers\r\n * @returns {EventListener}\r\n */\r\nexport function handlers(...handlers) {\r\n\treturn function (event) {\r\n\t\tconst { stopImmediatePropagation } = event;\r\n\t\tlet stopped = false;\r\n\r\n\t\tevent.stopImmediatePropagation = () => {\r\n\t\t\tstopped = true;\r\n\t\t\tstopImmediatePropagation.call(event);\r\n\t\t};\r\n\r\n\t\tconst errors = [];\r\n\r\n\t\tfor (const handler of handlers) {\r\n\t\t\ttry {\r\n\t\t\t\t// @ts-expect-error `this` is not typed\r\n\t\t\t\thandler?.call(this, event);\r\n\t\t\t} catch (e) {\r\n\t\t\t\terrors.push(e);\r\n\t\t\t}\r\n\r\n\t\t\tif (stopped) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (let error of errors) {\r\n\t\t\tqueueMicrotask(() => {\r\n\t\t\t\tthrow error;\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n}\r\n\r\n/**\r\n * Function to create a `bubble` function that mimic the behavior of `on:click` without handler available in svelte 4.\r\n * @deprecated Use this only as a temporary solution to migrate your automatically delegated events in Svelte 5.\r\n */\r\nexport function createBubbler() {\r\n\tconst active_component_context = component_context;\r\n\tif (active_component_context === null) {\r\n\t\te.lifecycle_outside_component('createBubbler');\r\n\t}\r\n\r\n\treturn (/**@type {string}*/ type) => (/**@type {Event}*/ event) => {\r\n\t\tconst events = /** @type {Record<string, Function | Function[]>} */ (\r\n\t\t\tactive_component_context.s.$$events\r\n\t\t)?.[/** @type {any} */ (type)];\r\n\r\n\t\tif (events) {\r\n\t\t\tconst callbacks = is_array(events) ? events.slice() : [events];\r\n\t\t\tfor (const fn of callbacks) {\r\n\t\t\t\tfn.call(active_component_context.x, event);\r\n\t\t\t}\r\n\t\t\treturn !event.defaultPrevented;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n}\r\n\r\nexport {\r\n\tonce,\r\n\tpreventDefault,\r\n\tself,\r\n\tstopImmediatePropagation,\r\n\tstopPropagation,\r\n\ttrusted,\r\n\tpassive,\r\n\tnonpassive\r\n} from '../internal/client/dom/legacy/event-modifiers.js';\r\n", "import { createClassComponent } from '../../../../legacy/legacy-client.js';\r\nimport { effect_root, render_effect } from '../../reactivity/effects.js';\r\nimport { append } from '../template.js';\r\nimport { define_property, get_descriptor, object_keys } from '../../../shared/utils.js';\r\n\r\n/**\r\n * @typedef {Object} CustomElementPropDefinition\r\n * @property {string} [attribute]\r\n * @property {boolean} [reflect]\r\n * @property {'String'|'Boolean'|'Number'|'Array'|'Object'} [type]\r\n */\r\n\r\n/** @type {any} */\r\nlet SvelteElement;\r\n\r\nif (typeof HTMLElement === 'function') {\r\n\tSvelteElement = class extends HTMLElement {\r\n\t\t/** The Svelte component constructor */\r\n\t\t$$ctor;\r\n\t\t/** Slots */\r\n\t\t$$s;\r\n\t\t/** @type {any} The Svelte component instance */\r\n\t\t$$c;\r\n\t\t/** Whether or not the custom element is connected */\r\n\t\t$$cn = false;\r\n\t\t/** @type {Record<string, any>} Component props data */\r\n\t\t$$d = {};\r\n\t\t/** `true` if currently in the process of reflecting component props back to attributes */\r\n\t\t$$r = false;\r\n\t\t/** @type {Record<string, CustomElementPropDefinition>} Props definition (name, reflected, type etc) */\r\n\t\t$$p_d = {};\r\n\t\t/** @type {Record<string, EventListenerOrEventListenerObject[]>} Event listeners */\r\n\t\t$$l = {};\r\n\t\t/** @type {Map<EventListenerOrEventListenerObject, Function>} Event listener unsubscribe functions */\r\n\t\t$$l_u = new Map();\r\n\t\t/** @type {any} The managed render effect for reflecting attributes */\r\n\t\t$$me;\r\n\r\n\t\t/**\r\n\t\t * @param {*} $$componentCtor\r\n\t\t * @param {*} $$slots\r\n\t\t * @param {*} use_shadow_dom\r\n\t\t */\r\n\t\tconstructor($$componentCtor, $$slots, use_shadow_dom) {\r\n\t\t\tsuper();\r\n\t\t\tthis.$$ctor = $$componentCtor;\r\n\t\t\tthis.$$s = $$slots;\r\n\t\t\tif (use_shadow_dom) {\r\n\t\t\t\tthis.attachShadow({ mode: 'open' });\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * @param {string} type\r\n\t\t * @param {EventListenerOrEventListenerObject} listener\r\n\t\t * @param {boolean | AddEventListenerOptions} [options]\r\n\t\t */\r\n\t\taddEventListener(type, listener, options) {\r\n\t\t\t// We can't determine upfront if the event is a custom event or not, so we have to\r\n\t\t\t// listen to both. If someone uses a custom event with the same name as a regular\r\n\t\t\t// browser event, this fires twice - we can't avoid that.\r\n\t\t\tthis.$$l[type] = this.$$l[type] || [];\r\n\t\t\tthis.$$l[type].push(listener);\r\n\t\t\tif (this.$$c) {\r\n\t\t\t\tconst unsub = this.$$c.$on(type, listener);\r\n\t\t\t\tthis.$$l_u.set(listener, unsub);\r\n\t\t\t}\r\n\t\t\tsuper.addEventListener(type, listener, options);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * @param {string} type\r\n\t\t * @param {EventListenerOrEventListenerObject} listener\r\n\t\t * @param {boolean | AddEventListenerOptions} [options]\r\n\t\t */\r\n\t\tremoveEventListener(type, listener, options) {\r\n\t\t\tsuper.removeEventListener(type, listener, options);\r\n\t\t\tif (this.$$c) {\r\n\t\t\t\tconst unsub = this.$$l_u.get(listener);\r\n\t\t\t\tif (unsub) {\r\n\t\t\t\t\tunsub();\r\n\t\t\t\t\tthis.$$l_u.delete(listener);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tasync connectedCallback() {\r\n\t\t\tthis.$$cn = true;\r\n\t\t\tif (!this.$$c) {\r\n\t\t\t\t// We wait one tick to let possible child slot elements be created/mounted\r\n\t\t\t\tawait Promise.resolve();\r\n\t\t\t\tif (!this.$$cn || this.$$c) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\t/** @param {string} name */\r\n\t\t\t\tfunction create_slot(name) {\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t * @param {Element} anchor\r\n\t\t\t\t\t */\r\n\t\t\t\t\treturn (anchor) => {\r\n\t\t\t\t\t\tconst slot = document.createElement('slot');\r\n\t\t\t\t\t\tif (name !== 'default') slot.name = name;\r\n\r\n\t\t\t\t\t\tappend(anchor, slot);\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\t/** @type {Record<string, any>} */\r\n\t\t\t\tconst $$slots = {};\r\n\t\t\t\tconst existing_slots = get_custom_elements_slots(this);\r\n\t\t\t\tfor (const name of this.$$s) {\r\n\t\t\t\t\tif (name in existing_slots) {\r\n\t\t\t\t\t\tif (name === 'default' && !this.$$d.children) {\r\n\t\t\t\t\t\t\tthis.$$d.children = create_slot(name);\r\n\t\t\t\t\t\t\t$$slots.default = true;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t$$slots[name] = create_slot(name);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfor (const attribute of this.attributes) {\r\n\t\t\t\t\t// this.$$data takes precedence over this.attributes\r\n\t\t\t\t\tconst name = this.$$g_p(attribute.name);\r\n\t\t\t\t\tif (!(name in this.$$d)) {\r\n\t\t\t\t\t\tthis.$$d[name] = get_custom_element_value(name, attribute.value, this.$$p_d, 'toProp');\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// Port over props that were set programmatically before ce was initialized\r\n\t\t\t\tfor (const key in this.$$p_d) {\r\n\t\t\t\t\t// @ts-expect-error\r\n\t\t\t\t\tif (!(key in this.$$d) && this[key] !== undefined) {\r\n\t\t\t\t\t\t// @ts-expect-error\r\n\t\t\t\t\t\tthis.$$d[key] = this[key]; // don't transform, these were set through JavaScript\r\n\t\t\t\t\t\t// @ts-expect-error\r\n\t\t\t\t\t\tdelete this[key]; // remove the property that shadows the getter/setter\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthis.$$c = createClassComponent({\r\n\t\t\t\t\tcomponent: this.$$ctor,\r\n\t\t\t\t\ttarget: this.shadowRoot || this,\r\n\t\t\t\t\tprops: {\r\n\t\t\t\t\t\t...this.$$d,\r\n\t\t\t\t\t\t$$slots,\r\n\t\t\t\t\t\t$$host: this\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// Reflect component props as attributes\r\n\t\t\t\tthis.$$me = effect_root(() => {\r\n\t\t\t\t\trender_effect(() => {\r\n\t\t\t\t\t\tthis.$$r = true;\r\n\t\t\t\t\t\tfor (const key of object_keys(this.$$c)) {\r\n\t\t\t\t\t\t\tif (!this.$$p_d[key]?.reflect) continue;\r\n\t\t\t\t\t\t\tthis.$$d[key] = this.$$c[key];\r\n\t\t\t\t\t\t\tconst attribute_value = get_custom_element_value(\r\n\t\t\t\t\t\t\t\tkey,\r\n\t\t\t\t\t\t\t\tthis.$$d[key],\r\n\t\t\t\t\t\t\t\tthis.$$p_d,\r\n\t\t\t\t\t\t\t\t'toAttribute'\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\tif (attribute_value == null) {\r\n\t\t\t\t\t\t\t\tthis.removeAttribute(this.$$p_d[key].attribute || key);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tthis.setAttribute(this.$$p_d[key].attribute || key, attribute_value);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.$$r = false;\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\r\n\t\t\t\tfor (const type in this.$$l) {\r\n\t\t\t\t\tfor (const listener of this.$$l[type]) {\r\n\t\t\t\t\t\tconst unsub = this.$$c.$on(type, listener);\r\n\t\t\t\t\t\tthis.$$l_u.set(listener, unsub);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthis.$$l = {};\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// We don't need this when working within Svelte code, but for compatibility of people using this outside of Svelte\r\n\t\t// and setting attributes through setAttribute etc, this is helpful\r\n\r\n\t\t/**\r\n\t\t * @param {string} attr\r\n\t\t * @param {string} _oldValue\r\n\t\t * @param {string} newValue\r\n\t\t */\r\n\t\tattributeChangedCallback(attr, _oldValue, newValue) {\r\n\t\t\tif (this.$$r) return;\r\n\t\t\tattr = this.$$g_p(attr);\r\n\t\t\tthis.$$d[attr] = get_custom_element_value(attr, newValue, this.$$p_d, 'toProp');\r\n\t\t\tthis.$$c?.$set({ [attr]: this.$$d[attr] });\r\n\t\t}\r\n\r\n\t\tdisconnectedCallback() {\r\n\t\t\tthis.$$cn = false;\r\n\t\t\t// In a microtask, because this could be a move within the DOM\r\n\t\t\tPromise.resolve().then(() => {\r\n\t\t\t\tif (!this.$$cn && this.$$c) {\r\n\t\t\t\t\tthis.$$c.$destroy();\r\n\t\t\t\t\tthis.$$me();\r\n\t\t\t\t\tthis.$$c = undefined;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * @param {string} attribute_name\r\n\t\t */\r\n\t\t$$g_p(attribute_name) {\r\n\t\t\treturn (\r\n\t\t\t\tobject_keys(this.$$p_d).find(\r\n\t\t\t\t\t(key) =>\r\n\t\t\t\t\t\tthis.$$p_d[key].attribute === attribute_name ||\r\n\t\t\t\t\t\t(!this.$$p_d[key].attribute && key.toLowerCase() === attribute_name)\r\n\t\t\t\t) || attribute_name\r\n\t\t\t);\r\n\t\t}\r\n\t};\r\n}\r\n\r\n/**\r\n * @param {string} prop\r\n * @param {any} value\r\n * @param {Record<string, CustomElementPropDefinition>} props_definition\r\n * @param {'toAttribute' | 'toProp'} [transform]\r\n */\r\nfunction get_custom_element_value(prop, value, props_definition, transform) {\r\n\tconst type = props_definition[prop]?.type;\r\n\tvalue = type === 'Boolean' && typeof value !== 'boolean' ? value != null : value;\r\n\tif (!transform || !props_definition[prop]) {\r\n\t\treturn value;\r\n\t} else if (transform === 'toAttribute') {\r\n\t\tswitch (type) {\r\n\t\t\tcase 'Object':\r\n\t\t\tcase 'Array':\r\n\t\t\t\treturn value == null ? null : JSON.stringify(value);\r\n\t\t\tcase 'Boolean':\r\n\t\t\t\treturn value ? '' : null;\r\n\t\t\tcase 'Number':\r\n\t\t\t\treturn value == null ? null : value;\r\n\t\t\tdefault:\r\n\t\t\t\treturn value;\r\n\t\t}\r\n\t} else {\r\n\t\tswitch (type) {\r\n\t\t\tcase 'Object':\r\n\t\t\tcase 'Array':\r\n\t\t\t\treturn value && JSON.parse(value);\r\n\t\t\tcase 'Boolean':\r\n\t\t\t\treturn value; // conversion already handled above\r\n\t\t\tcase 'Number':\r\n\t\t\t\treturn value != null ? +value : value;\r\n\t\t\tdefault:\r\n\t\t\t\treturn value;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} element\r\n */\r\nfunction get_custom_elements_slots(element) {\r\n\t/** @type {Record<string, true>} */\r\n\tconst result = {};\r\n\telement.childNodes.forEach((node) => {\r\n\t\tresult[/** @type {Element} node */ (node).slot || 'default'] = true;\r\n\t});\r\n\treturn result;\r\n}\r\n\r\n/**\r\n * @internal\r\n *\r\n * Turn a Svelte component into a custom element.\r\n * @param {any} Component  A Svelte component function\r\n * @param {Record<string, CustomElementPropDefinition>} props_definition  The props to observe\r\n * @param {string[]} slots  The slots to create\r\n * @param {string[]} exports  Explicitly exported values, other than props\r\n * @param {boolean} use_shadow_dom  Whether to use shadow DOM\r\n * @param {(ce: new () => HTMLElement) => new () => HTMLElement} [extend]\r\n */\r\nexport function create_custom_element(\r\n\tComponent,\r\n\tprops_definition,\r\n\tslots,\r\n\texports,\r\n\tuse_shadow_dom,\r\n\textend\r\n) {\r\n\tlet Class = class extends SvelteElement {\r\n\t\tconstructor() {\r\n\t\t\tsuper(Component, slots, use_shadow_dom);\r\n\t\t\tthis.$$p_d = props_definition;\r\n\t\t}\r\n\t\tstatic get observedAttributes() {\r\n\t\t\treturn object_keys(props_definition).map((key) =>\r\n\t\t\t\t(props_definition[key].attribute || key).toLowerCase()\r\n\t\t\t);\r\n\t\t}\r\n\t};\r\n\tobject_keys(props_definition).forEach((prop) => {\r\n\t\tdefine_property(Class.prototype, prop, {\r\n\t\t\tget() {\r\n\t\t\t\treturn this.$$c && prop in this.$$c ? this.$$c[prop] : this.$$d[prop];\r\n\t\t\t},\r\n\t\t\tset(value) {\r\n\t\t\t\tvalue = get_custom_element_value(prop, value, props_definition);\r\n\t\t\t\tthis.$$d[prop] = value;\r\n\t\t\t\tvar component = this.$$c;\r\n\r\n\t\t\t\tif (component) {\r\n\t\t\t\t\t// // If the instance has an accessor, use that instead\r\n\t\t\t\t\tvar setter = get_descriptor(component, prop)?.get;\r\n\r\n\t\t\t\t\tif (setter) {\r\n\t\t\t\t\t\tcomponent[prop] = value;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcomponent.$set({ [prop]: value });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n\texports.forEach((property) => {\r\n\t\tdefine_property(Class.prototype, property, {\r\n\t\t\tget() {\r\n\t\t\t\treturn this.$$c?.[property];\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n\tif (extend) {\r\n\t\t// @ts-expect-error - assigning here is fine\r\n\t\tClass = extend(Class);\r\n\t}\r\n\tComponent.element = /** @type {any} */ Class;\r\n\treturn Class;\r\n}\r\n", "/** @import { ComponentContext, ComponentContextLegacy } from '#client' */\r\n/** @import { EventDispatcher } from './index.js' */\r\n/** @import { NotFunction } from './internal/types.js' */\r\nimport { active_reaction, untrack } from './internal/client/runtime.js';\r\nimport { is_array } from './internal/shared/utils.js';\r\nimport { user_effect } from './internal/client/index.js';\r\nimport * as e from './internal/client/errors.js';\r\nimport { legacy_mode_flag } from './internal/flags/index.js';\r\nimport { component_context } from './internal/client/context.js';\r\nimport { DEV } from 'esm-env';\r\n\r\nif (DEV) {\r\n\t/**\r\n\t * @param {string} rune\r\n\t */\r\n\tfunction throw_rune_error(rune) {\r\n\t\tif (!(rune in globalThis)) {\r\n\t\t\t// TODO if people start adjusting the \"this can contain runes\" config through v-p-s more, adjust this message\r\n\t\t\t/** @type {any} */\r\n\t\t\tlet value; // let's hope noone modifies this global, but belts and braces\r\n\t\t\tObject.defineProperty(globalThis, rune, {\r\n\t\t\t\tconfigurable: true,\r\n\t\t\t\t// eslint-disable-next-line getter-return\r\n\t\t\t\tget: () => {\r\n\t\t\t\t\tif (value !== undefined) {\r\n\t\t\t\t\t\treturn value;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\te.rune_outside_svelte(rune);\r\n\t\t\t\t},\r\n\t\t\t\tset: (v) => {\r\n\t\t\t\t\tvalue = v;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tthrow_rune_error('$state');\r\n\tthrow_rune_error('$effect');\r\n\tthrow_rune_error('$derived');\r\n\tthrow_rune_error('$inspect');\r\n\tthrow_rune_error('$props');\r\n\tthrow_rune_error('$bindable');\r\n}\r\n\r\n/**\r\n * Returns an [`AbortSignal`](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal) that aborts when the current [derived](https://svelte.dev/docs/svelte/$derived) or [effect](https://svelte.dev/docs/svelte/$effect) re-runs or is destroyed.\r\n *\r\n * Must be called while a derived or effect is running.\r\n *\r\n * ```svelte\r\n * <script>\r\n * \timport { getAbortSignal } from 'svelte';\r\n *\r\n * \tlet { id } = $props();\r\n *\r\n * \tasync function getData(id) {\r\n * \t\tconst response = await fetch(`/items/${id}`, {\r\n * \t\t\tsignal: getAbortSignal()\r\n * \t\t});\r\n *\r\n * \t\treturn await response.json();\r\n * \t}\r\n *\r\n * \tconst data = $derived(await getData(id));\r\n * </script>\r\n * ```\r\n */\r\nexport function getAbortSignal() {\r\n\tif (active_reaction === null) {\r\n\t\te.get_abort_signal_outside_reaction();\r\n\t}\r\n\r\n\treturn (active_reaction.ac ??= new AbortController()).signal;\r\n}\r\n\r\n/**\r\n * `onMount`, like [`$effect`](https://svelte.dev/docs/svelte/$effect), schedules a function to run as soon as the component has been mounted to the DOM.\r\n * Unlike `$effect`, the provided function only runs once.\r\n *\r\n * It must be called during the component's initialisation (but doesn't need to live _inside_ the component;\r\n * it can be called from an external module). If a function is returned _synchronously_ from `onMount`,\r\n * it will be called when the component is unmounted.\r\n *\r\n * `onMount` functions do not run during [server-side rendering](https://svelte.dev/docs/svelte/svelte-server#render).\r\n *\r\n * @template T\r\n * @param {() => NotFunction<T> | Promise<NotFunction<T>> | (() => any)} fn\r\n * @returns {void}\r\n */\r\nexport function onMount(fn) {\r\n\tif (component_context === null) {\r\n\t\te.lifecycle_outside_component('onMount');\r\n\t}\r\n\r\n\tif (legacy_mode_flag && component_context.l !== null) {\r\n\t\tinit_update_callbacks(component_context).m.push(fn);\r\n\t} else {\r\n\t\tuser_effect(() => {\r\n\t\t\tconst cleanup = untrack(fn);\r\n\t\t\tif (typeof cleanup === 'function') return /** @type {() => void} */ (cleanup);\r\n\t\t});\r\n\t}\r\n}\r\n\r\n/**\r\n * Schedules a callback to run immediately before the component is unmounted.\r\n *\r\n * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the\r\n * only one that runs inside a server-side component.\r\n *\r\n * @param {() => any} fn\r\n * @returns {void}\r\n */\r\nexport function onDestroy(fn) {\r\n\tif (component_context === null) {\r\n\t\te.lifecycle_outside_component('onDestroy');\r\n\t}\r\n\r\n\tonMount(() => () => untrack(fn));\r\n}\r\n\r\n/**\r\n * @template [T=any]\r\n * @param {string} type\r\n * @param {T} [detail]\r\n * @param {any}params_0\r\n * @returns {CustomEvent<T>}\r\n */\r\nfunction create_custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {\r\n\treturn new CustomEvent(type, { detail, bubbles, cancelable });\r\n}\r\n\r\n/**\r\n * Creates an event dispatcher that can be used to dispatch [component events](https://svelte.dev/docs/svelte/legacy-on#Component-events).\r\n * Event dispatchers are functions that can take two arguments: `name` and `detail`.\r\n *\r\n * Component events created with `createEventDispatcher` create a\r\n * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).\r\n * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).\r\n * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)\r\n * property and can contain any type of data.\r\n *\r\n * The event dispatcher can be typed to narrow the allowed event names and the type of the `detail` argument:\r\n * ```ts\r\n * const dispatch = createEventDispatcher<{\r\n *  loaded: null; // does not take a detail argument\r\n *  change: string; // takes a detail argument of type string, which is required\r\n *  optional: number | null; // takes an optional detail argument of type number\r\n * }>();\r\n * ```\r\n *\r\n * @deprecated Use callback props and/or the `$host()` rune instead — see [migration guide](https://svelte.dev/docs/svelte/v5-migration-guide#Event-changes-Component-events)\r\n * @template {Record<string, any>} [EventMap = any]\r\n * @returns {EventDispatcher<EventMap>}\r\n */\r\nexport function createEventDispatcher() {\r\n\tconst active_component_context = component_context;\r\n\tif (active_component_context === null) {\r\n\t\te.lifecycle_outside_component('createEventDispatcher');\r\n\t}\r\n\r\n\t/**\r\n\t * @param [detail]\r\n\t * @param [options]\r\n\t */\r\n\treturn (type, detail, options) => {\r\n\t\tconst events = /** @type {Record<string, Function | Function[]>} */ (\r\n\t\t\tactive_component_context.s.$$events\r\n\t\t)?.[/** @type {string} */ (type)];\r\n\r\n\t\tif (events) {\r\n\t\t\tconst callbacks = is_array(events) ? events.slice() : [events];\r\n\t\t\t// TODO are there situations where events could be dispatched\r\n\t\t\t// in a server (non-DOM) environment?\r\n\t\t\tconst event = create_custom_event(/** @type {string} */ (type), detail, options);\r\n\t\t\tfor (const fn of callbacks) {\r\n\t\t\t\tfn.call(active_component_context.x, event);\r\n\t\t\t}\r\n\t\t\treturn !event.defaultPrevented;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t};\r\n}\r\n\r\n// TODO mark beforeUpdate and afterUpdate as deprecated in Svelte 6\r\n\r\n/**\r\n * Schedules a callback to run immediately before the component is updated after any state change.\r\n *\r\n * The first time the callback runs will be before the initial `onMount`.\r\n *\r\n * In runes mode use `$effect.pre` instead.\r\n *\r\n * @deprecated Use [`$effect.pre`](https://svelte.dev/docs/svelte/$effect#$effect.pre) instead\r\n * @param {() => void} fn\r\n * @returns {void}\r\n */\r\nexport function beforeUpdate(fn) {\r\n\tif (component_context === null) {\r\n\t\te.lifecycle_outside_component('beforeUpdate');\r\n\t}\r\n\r\n\tif (component_context.l === null) {\r\n\t\te.lifecycle_legacy_only('beforeUpdate');\r\n\t}\r\n\r\n\tinit_update_callbacks(component_context).b.push(fn);\r\n}\r\n\r\n/**\r\n * Schedules a callback to run immediately after the component has been updated.\r\n *\r\n * The first time the callback runs will be after the initial `onMount`.\r\n *\r\n * In runes mode use `$effect` instead.\r\n *\r\n * @deprecated Use [`$effect`](https://svelte.dev/docs/svelte/$effect) instead\r\n * @param {() => void} fn\r\n * @returns {void}\r\n */\r\nexport function afterUpdate(fn) {\r\n\tif (component_context === null) {\r\n\t\te.lifecycle_outside_component('afterUpdate');\r\n\t}\r\n\r\n\tif (component_context.l === null) {\r\n\t\te.lifecycle_legacy_only('afterUpdate');\r\n\t}\r\n\r\n\tinit_update_callbacks(component_context).a.push(fn);\r\n}\r\n\r\n/**\r\n * Legacy-mode: Init callbacks object for onMount/beforeUpdate/afterUpdate\r\n * @param {ComponentContext} context\r\n */\r\nfunction init_update_callbacks(context) {\r\n\tvar l = /** @type {ComponentContextLegacy} */ (context).l;\r\n\treturn (l.u ??= { a: [], b: [], m: [] });\r\n}\r\n\r\nexport { flushSync } from './internal/client/reactivity/batch.js';\r\nexport { getContext, getAllContexts, hasContext, setContext } from './internal/client/context.js';\r\nexport { hydrate, mount, unmount } from './internal/client/render.js';\r\nexport { tick, untrack, settled } from './internal/client/runtime.js';\r\nexport { createRawSnippet } from './internal/client/dom/blocks/snippet.js';\r\n"],
  "mappings": "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",
  "names": ["stack", "source", "stack", "key", "flags", "component", "component_context", "effect", "tasks", "derived", "source", "effect", "update", "flags", "child", "stack", "stack", "source", "effect", "source", "flags", "stack", "version", "prop", "source", "s", "value", "key", "prop", "array_prototype", "index", "effect", "push", "e", "derived", "flags", "effect", "flags", "push", "effect", "teardown", "next", "transition", "child", "sibling", "effect", "flags", "derived", "index", "teardown", "trace", "event", "html", "effect", "component", "events", "passive", "unmount", "snippet", "element", "html", "element", "listeners", "run", "set", "update", "run", "derived", "pending", "get", "key", "prop", "next", "event", "slot", "key", "attr", "prop", "element", "event"]
}
